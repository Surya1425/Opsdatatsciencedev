{
	"name": "WIP_Summary_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "QAG0NmrDetailVsat"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "AllJobs"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "Routings"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "WipG0AllMovetransactions"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "Invg0itemviasat"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "wipg0allmtrlrequirements"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "Onhandquantites"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "MRPG0MRPWorkbenchVsat"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "PAG0ProjectParametersVsat"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "initCapCols1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "selectingreqCols1"
				},
				{
					"name": "sortingNmrDate"
				},
				{
					"name": "UniqueRows1"
				},
				{
					"name": "initCapCols2"
				},
				{
					"name": "filter2"
				},
				{
					"name": "selectingReqCols2"
				},
				{
					"name": "leftouterjoin1"
				},
				{
					"name": "Summarise1"
				},
				{
					"name": "innerjoin1"
				},
				{
					"name": "initCapCols3"
				},
				{
					"name": "filter3"
				},
				{
					"name": "select1"
				},
				{
					"name": "innerjoin2"
				},
				{
					"name": "RenamingCols1"
				},
				{
					"name": "RankingOrTilingUnique"
				},
				{
					"name": "filter4"
				},
				{
					"name": "Summarise2"
				},
				{
					"name": "innerouterjoin3"
				},
				{
					"name": "filter5"
				},
				{
					"name": "UniqueRows2"
				},
				{
					"name": "select2"
				},
				{
					"name": "leftouterjoin2"
				},
				{
					"name": "select3"
				},
				{
					"name": "innerjoin4"
				},
				{
					"name": "RoutingFlagInner"
				},
				{
					"name": "exists1"
				},
				{
					"name": "RoutingFlagLeftAnti"
				},
				{
					"name": "unioningRoutingFlags"
				},
				{
					"name": "select4"
				},
				{
					"name": "sort1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "selectingReqCols3"
				},
				{
					"name": "Summarise3"
				},
				{
					"name": "initCapCols4"
				},
				{
					"name": "innerjoin3"
				},
				{
					"name": "initcapcols5"
				},
				{
					"name": "select5"
				},
				{
					"name": "select7"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "filter6"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "select8"
				},
				{
					"name": "filter7"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "select9"
				},
				{
					"name": "select10"
				},
				{
					"name": "select11"
				},
				{
					"name": "filter8"
				},
				{
					"name": "filter9"
				},
				{
					"name": "select12"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "aggregate5"
				},
				{
					"name": "join1"
				},
				{
					"name": "select13"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "select14"
				},
				{
					"name": "select15"
				},
				{
					"name": "select16"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "select17"
				},
				{
					"name": "filter10"
				},
				{
					"name": "innerjoin5"
				},
				{
					"name": "select18"
				},
				{
					"name": "aggregate6"
				},
				{
					"name": "aggregate7"
				},
				{
					"name": "innerjoin6"
				},
				{
					"name": "select19"
				},
				{
					"name": "leftouter1"
				},
				{
					"name": "select20"
				},
				{
					"name": "leftouter2"
				},
				{
					"name": "rightouter1"
				},
				{
					"name": "select21"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "select22"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "filter11"
				},
				{
					"name": "sort2"
				},
				{
					"name": "window1"
				},
				{
					"name": "derivedColumn7"
				},
				{
					"name": "window2"
				},
				{
					"name": "derivedColumn8"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'ops-datascience-5026',",
				"     folderPath: 'NoetixViews',",
				"     fileName: 'QAG0_NMR_Detail_Vsat.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> QAG0NmrDetailVsat",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'ops-datascience-5026',",
				"     folderPath: 'NoetixViews',",
				"     fileName: 'AllJobs.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> AllJobs",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'ops-datascience-5026',",
				"     folderPath: 'NoetixViews',",
				"     fileName: 'Routings.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> Routings",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> WipG0AllMovetransactions",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Invg0itemviasat",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'ops-datascience-inputs',",
				"     folderPath: 'Queries',",
				"     fileName: 'wipg0_all_matrl_requirements.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> wipg0allmtrlrequirements",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Onhandquantites",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> MRPG0MRPWorkbenchVsat",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PAG0ProjectParametersVsat",
				"QAG0NmrDetailVsat select(mapColumn(",
				"          each(match(true()),",
				"               initCap(replace(initCap($$),'_',' ')) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> initCapCols1",
				"initCapCols1 filter(isNull({Nmr Nmr Date Closed})) ~> filter1",
				"filter1 select(mapColumn(",
				"          {Nmr Nmr Date},",
				"          {Nmr Nmr Date Closed},",
				"          {Nmr Nmr No},",
				"          {Nmr Parent Nmr},",
				"          {Nmr Pn},",
				"          {Nmr Project No},",
				"          {Nmr Sn},",
				"          {Nmr Wo},",
				"          {Organization Code}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingreqCols1",
				"selectingreqCols1 sort(asc({Nmr Nmr Date}, false)) ~> sortingNmrDate",
				"sortingNmrDate aggregate(groupBy({Nmr Nmr No}),",
				"     each(match(name!='Nmr Nmr No'), $$ = first($$))) ~> UniqueRows1",
				"AllJobs select(mapColumn(",
				"          each(match(true()),",
				"               initCap(replace(initCap($$),'_',' ')) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> initCapCols2",
				"initCapCols2 filter({Job Status} == \"Released\" || {Job Status} == \"Unreleased\") ~> filter2",
				"filter2 select(mapColumn(",
				"          {Assembly$Sv$Part Number} = {Assembly$sv$part Number},",
				"          {Assembly Description},",
				"          {Job Created By},",
				"          {Job Name},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Quantity Scrapped},",
				"          {Job Description},",
				"          {Job Type},",
				"          {Job Status},",
				"          {Job Released Date},",
				"          {Organization Code},",
				"          {Project Number},",
				"          {Task Number},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingReqCols2",
				"selectingReqCols2, UniqueRows1 join({Job Name} == {Nmr Wo}",
				"     && selectingReqCols2@{Organization Code} == UniqueRows1@{Organization Code},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouterjoin1",
				"leftouterjoin1 aggregate(groupBy({Organization Code} = selectingReqCols2@{Organization Code},",
				"          {Job Name}),",
				"     {Project Number} = max({Project Number}),",
				"          {Number of NMR's} = count({Nmr Nmr No}),",
				"          {Concat_Nmr Nmr No} = dropRight(toString(reduce(collect({Nmr Nmr No}),'',#item+','+#acc,#result)),1),",
				"          {Concat_Nmr Nmr Date} = dropRight(toString(reduce(collect(toString({Nmr Nmr Date})),'',#item+','+#acc,#result)),1)) ~> Summarise1",
				"Summarise1, leftouterjoin1 join(Summarise1@{Job Name} == selectingReqCols2@{Job Name}",
				"     && Summarise1@{Organization Code} == UniqueRows1@{Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin1",
				"Routings select(mapColumn(",
				"          each(match(true()),",
				"               initCap(replace(initCap($$),'_',' ')) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> initCapCols3",
				"filter4 filter({Job Status} == \"Released\") ~> filter3",
				"innerjoin1 select(mapColumn(",
				"          {Organization Code},",
				"          {Job Name},",
				"          {Project Number},",
				"          {Number of NMR's},",
				"          {Concat_Nmr Nmr No},",
				"          {Concat_Nmr Nmr Date},",
				"          {Assembly$Sv$Part Number},",
				"          {Assembly Description},",
				"          {Job Created By},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Quantity Scrapped},",
				"          {Job Description},",
				"          {Job Type},",
				"          {Job Status},",
				"          {Job Released Date},",
				"          {Organization Code} = {selectingReqCols2@Organization Code},",
				"          {Project Number} = {selectingReqCols2@Project Number},",
				"          {Task Number},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date},",
				"          {Nmr Nmr No},",
				"          {Nmr Nmr Date},",
				"          {Nmr Nmr Date Closed},",
				"          {Nmr Parent Nmr},",
				"          {Nmr Pn},",
				"          {Nmr Project No},",
				"          {Nmr Sn},",
				"          {Nmr Wo},",
				"          {Right_Organization Code} = {UniqueRows1@Organization Code}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, filter3 join(select1@{Job Name} == initCapCols3@{Job Name}",
				"     && select1@{Organization Code} == initCapCols3@{Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin2",
				"innerjoin2 select(mapColumn(",
				"          {Organization Code},",
				"          {Job Name},",
				"          {Project Number},",
				"          {Number of NMR's},",
				"          {Concat_Nmr Nmr No},",
				"          {Concat_Nmr Nmr Date},",
				"          {Assembly$Sv$Part Number} = {select1@Assembly$Sv$Part Number},",
				"          {Assembly Description} = {select1@Assembly Description},",
				"          {Job Created By},",
				"          {Job Quantity Completed} = {select1@Job Quantity Completed},",
				"          {Job Quantity Scheduled} = {select1@Job Quantity Scheduled},",
				"          {Job Quantity Scrapped} = {select1@Job Quantity Scrapped},",
				"          {Job Description},",
				"          {Job Type} = {select1@Job Type},",
				"          {Job Status} = {select1@Job Status},",
				"          {Released Date} = {Job Released Date},",
				"          {Task Number},",
				"          {Scheduled Comp Date} = {Job Scheduled Completion Dt},",
				"          {Job Start Date} = {select1@Job Start Date},",
				"          {Nmr Nmr No},",
				"          {Nmr Nmr Date},",
				"          {Nmr Nmr Date Closed},",
				"          {Nmr Parent Nmr},",
				"          {Nmr Pn},",
				"          {Nmr Project No},",
				"          {Nmr Sn},",
				"          {Nmr Wo},",
				"          {Right_Organization Code},",
				"          {Assembly$sv$part Number},",
				"          {Assembly Description},",
				"          Department,",
				"          {Job Date Released},",
				"          {Job Name} = {initCapCols3@Job Name},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Quantity Scrapped},",
				"          {Job Start Date},",
				"          {Job Status},",
				"          {Job Type},",
				"          {Operation Description},",
				"          Completed = {Operation Quantity Completed},",
				"          Queue = {Operation Quantity In Queue},",
				"          Rejected = {Operation Quantity Rejected},",
				"          Remaining = {Operation Quantity Remaining},",
				"          Running = {Operation Quantity Running},",
				"          Scrapped = {Operation Quantity Scrapped},",
				"          {To Move} = {Operation Quantity To Move},",
				"          {Sequence #} = {Operation Sequence Number},",
				"          {Organization Code} = {initCapCols3@Organization Code},",
				"          {Organization Name}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamingCols1",
				"RenamingCols1 rank(asc({Scheduled Comp Date}, true),",
				"     asc({Job Name}, true),",
				"     asc({Sequence #}, true),",
				"     output({Conditional Formatting} as long),",
				"     dense: true) ~> RankingOrTilingUnique",
				"initCapCols3 filter({Job Status} == \"Released\" || {Job Status} == \"Unreleased\") ~> filter4",
				"filter4 aggregate(groupBy({Organization Code},",
				"          {Job Name}),",
				"     {Max_Operation Sequence Number} = max({Operation Sequence Number})) ~> Summarise2",
				"Summarise2, filter4 join(Summarise2@{Job Name} == initCapCols3@{Job Name}",
				"     && {Max_Operation Sequence Number} == {Operation Sequence Number}",
				"     && Summarise2@{Organization Code} == initCapCols3@{Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerouterjoin3",
				"filter4 filter(({Operation Quantity In Queue} + {Operation Quantity Running} + {Operation Quantity To Move}) > 0) ~> filter5",
				"filter5 aggregate(groupBy({Job Name},",
				"          {Organization Code}),",
				"     each(match(name!='Job Name'&&name!='Organization Code'), $$ = first($$))) ~> UniqueRows2",
				"UniqueRows2 select(mapColumn(",
				"          {Job Name},",
				"          {Organization Code},",
				"          {Assembly$sv$part Number},",
				"          {Assembly Description},",
				"          Department,",
				"          {First Unit Completion Date},",
				"          {First Unit Start Date},",
				"          {Job Date Released},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Quantity Scrapped},",
				"          {Job Start Date},",
				"          {Job Status},",
				"          {Job Type},",
				"          {Last Unit Completion Date},",
				"          {Last Unit Start Date},",
				"          {Operation Description},",
				"          {Operation Quantity Completed},",
				"          {Operation Quantity In Queue},",
				"          {Operation Quantity Rejected},",
				"          {Operation Quantity Remaining},",
				"          {Operation Quantity Running},",
				"          {Operation Quantity Scrapped},",
				"          {Operation Quantity To Move},",
				"          {Current Operation Sequence Number} = {Operation Sequence Number},",
				"          {Organization Name}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"innerouterjoin3, select2 join(Summarise2@{Organization Code} == select2@{Organization Code}",
				"     && Summarise2@{Job Name} == select2@{Job Name},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouterjoin2",
				"leftouterjoin2 select(mapColumn(",
				"          {Organization Code} = Summarise2@{Organization Code},",
				"          {Job Name} = Summarise2@{Job Name},",
				"          {Max_Operation Sequence Number},",
				"          {Assembly$sv$part Number} = {initCapCols3@Assembly$sv$part Number},",
				"          {Assembly Description} = {initCapCols3@Assembly Description},",
				"          Department = {initCapCols3@Department},",
				"          {First Unit Completion Date} = {initCapCols3@First Unit Completion Date},",
				"          {First Unit Start Date} = {initCapCols3@First Unit Start Date},",
				"          {Job Date Released} = {initCapCols3@Job Date Released},",
				"          {Job Quantity Completed} = {initCapCols3@Job Quantity Completed},",
				"          {Job Quantity Scheduled} = {initCapCols3@Job Quantity Scheduled},",
				"          {Job Quantity Scrapped} = {initCapCols3@Job Quantity Scrapped},",
				"          {Job Start Date} = {initCapCols3@Job Start Date},",
				"          {Job Status} = {initCapCols3@Job Status},",
				"          {Job Type} = {initCapCols3@Job Type},",
				"          {Last Unit Completion Date} = {initCapCols3@Last Unit Completion Date},",
				"          {Last Unit Start Date} = {initCapCols3@Last Unit Start Date},",
				"          {Operation Description} = {initCapCols3@Operation Description},",
				"          {Operation Quantity Completed} = {initCapCols3@Operation Quantity Completed},",
				"          {Operation Quantity In Queue} = {initCapCols3@Operation Quantity In Queue},",
				"          {Operation Quantity Rejected} = {initCapCols3@Operation Quantity Rejected},",
				"          {Operation Quantity Remaining} = {initCapCols3@Operation Quantity Remaining},",
				"          {Operation Quantity Running} = {initCapCols3@Operation Quantity Running},",
				"          {Operation Quantity Scrapped} = {initCapCols3@Operation Quantity Scrapped},",
				"          {Operation Quantity To Move} = {initCapCols3@Operation Quantity To Move},",
				"          {Operation Sequence Number},",
				"          {Organization Code} = {initCapCols3@Organization Code},",
				"          {Organization Name} = {initCapCols3@Organization Name},",
				"          {Operation Description} = {select2@Operation Description},",
				"          {Current Operation Sequence Number}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"selectingReqCols2, select3 join(selectingReqCols2@{Job Name} == select3@{Job Name}",
				"     && selectingReqCols2@{Organization Code} == select3@{Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin4",
				"innerjoin4 derive({No Routing Flag} = toBoolean('0')) ~> RoutingFlagInner",
				"selectingReqCols2, select3 exists(selectingReqCols2@{Job Name} == select3@{Job Name}",
				"     && selectingReqCols2@{Organization Code} == select3@{Organization Code},",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive({No Routing Flag} = toBoolean('1')) ~> RoutingFlagLeftAnti",
				"RoutingFlagLeftAnti, select4 union(byName: true)~> unioningRoutingFlags",
				"RoutingFlagInner select(mapColumn(",
				"          {Assembly$Sv$Part Number} = {selectingReqCols2@Assembly$Sv$Part Number},",
				"          {Assembly Description} = {selectingReqCols2@Assembly Description},",
				"          {Job Created By},",
				"          {Job Name} = {selectingReqCols2@Job Name},",
				"          {Job Quantity Completed} = {selectingReqCols2@Job Quantity Completed},",
				"          {Job Quantity Scheduled} = {selectingReqCols2@Job Quantity Scheduled},",
				"          {Job Quantity Scrapped} = {selectingReqCols2@Job Quantity Scrapped},",
				"          {Job Description},",
				"          {Job Type} = {selectingReqCols2@Job Type},",
				"          {Job Status} = {selectingReqCols2@Job Status},",
				"          {Job Released Date},",
				"          {Organization Code} = {selectingReqCols2@Organization Code},",
				"          {Project Number},",
				"          {Task Number},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date} = {selectingReqCols2@Job Start Date},",
				"          {Right_Organization Code} = {Organization Code},",
				"          {Right_Job Name} = {Job Name},",
				"          {Max_Operation Sequence Number},",
				"          {Right_Assembly$sv$part Number} = {Assembly$sv$part Number},",
				"          {Right_Assembly Description} = {Assembly Description},",
				"          Department,",
				"          {First Unit Completion Date},",
				"          {First Unit Start Date},",
				"          {Job Date Released},",
				"          {Right_Job Quantity Completed} = {Job Quantity Completed},",
				"          {Right_Job Quantity Scheduled} = {Job Quantity Scheduled},",
				"          {Right_Job Quantity Scrapped} = {Job Quantity Scrapped},",
				"          {Right_Job Start Date} = {Job Start Date},",
				"          {Right_Job Status} = {Job Status},",
				"          {Right_Job Type} = {Job Type},",
				"          {Last Unit Completion Date},",
				"          {Last Unit Start Date},",
				"          {Operation Description},",
				"          {Operation Quantity Completed},",
				"          {Operation Quantity In Queue},",
				"          {Operation Quantity Rejected},",
				"          {Operation Quantity Remaining},",
				"          {Operation Quantity Running},",
				"          {Operation Quantity Scrapped},",
				"          {Operation Quantity To Move},",
				"          {Operation Sequence Number},",
				"          {Organization Name},",
				"          {Current Operation Sequence Number},",
				"          {No Routing Flag}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"unioningRoutingFlags sort(asc({Job Scheduled Completion Dt}, false)) ~> sort1",
				"sort1 derive({WO Status Category} = iif({Operation Quantity Remaining}==toDouble(0),'In Last Sequence Step', 'Past Due WO')) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          {Item Description} = {Assembly Description},",
				"          {Job Created By},",
				"          {Job Name},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Quantity Scrapped},",
				"          {Job Description},",
				"          {Job Type},",
				"          {Job Status},",
				"          {Job Released Date},",
				"          {Organization Code},",
				"          {Project Number},",
				"          {Task Number},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date},",
				"          {No Routing Flag},",
				"          {Right_Organization Code},",
				"          Department,",
				"          {Operation Description},",
				"          {Operation Quantity Completed},",
				"          {Operation Quantity Remaining},",
				"          {Operation Sequence Number},",
				"          {Organization Name},",
				"          {Current Operation Sequence Number},",
				"          {WO Status Category}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingReqCols3",
				"select14 aggregate(groupBy(JOB_NAME,",
				"          ORGANIZATION_NAME),",
				"     Max_MAX_WIPG0_ALL_MOVE_TRANSACTIONS_TRANSACTION_DATE = max({MAX(WIPG0_ALL_MOVE_TRANSACTIONS.TRANSACTION_DATE)})) ~> Summarise3",
				"Invg0itemviasat select(mapColumn(",
				"          each(match(true()),",
				"               initCap(replace(initCap($$),'_',' ')) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> initCapCols4",
				"Summarise3, select14 join(Summarise3@ORGANIZATION_NAME == select14@ORGANIZATION_NAME",
				"     && Summarise3@JOB_NAME == select14@JOB_NAME",
				"     && Max_MAX_WIPG0_ALL_MOVE_TRANSACTIONS_TRANSACTION_DATE == {MAX(WIPG0_ALL_MOVE_TRANSACTIONS.TRANSACTION_DATE)},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin3",
				"wipg0allmtrlrequirements select(mapColumn(",
				"          {Component Part #} = {ASSMCOMP$SV$PART_NUMBER},",
				"          {Component Comments} = COMPONENT_COMMENTS,",
				"          {Component Description} = COMPONENT_DESCRIPTION,",
				"          {Component Qty Per Assembly} = COMPONENT_QTY_PER_ASSEMBLY,",
				"          {Component Quantity Issued} = COMPONENT_QUANTITY_ISSUED,",
				"          {Component Quantity Open} = COMPONENT_QUANTITY_OPEN,",
				"          {Component Quantity Required} = COMPONENT_QUANTITY_REQUIRED,",
				"          {Component Required Date} = COMPONENT_REQUIRED_DATE,",
				"          {Component Revision} = COMPONENT_REVISION,",
				"          {Component Unit Cost} = COMPONENT_UNIT_COST,",
				"          {Component Uom Code} = COMPONENT_UOM_CODE,",
				"          {Job Description} = JOB_DESCRIPTION,",
				"          {Job Name} = JOB_NAME,",
				"          {Job Quantity Completed} = JOB_QUANTITY_COMPLETED,",
				"          {Job Quantity Scheduled} = JOB_QUANTITY_SCHEDULED,",
				"          {Organization Code} = ORGANIZATION_CODE,",
				"          {Operation Sequence Number} = OPERATION_SEQUENCE_NUMBER,",
				"          {Task Number} = TASK_NUMBER,",
				"          {Wip Supply Type} = WIP_SUPPLY_TYPE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> initcapcols5",
				"initCapCols4 select(mapColumn(",
				"          {Organization Code},",
				"          {Item Number},",
				"          {Planning Make Buy Code},",
				"          {Wip Supply Type},",
				"          {Item Revision Control Flag},",
				"          {Items$comsec},",
				"          {List Price Per Unit},",
				"          {Lot Control Flag},",
				"          {Serial Number Control Code},",
				"          {Serial Starting Number},",
				"          {Serial Starting Prefix},",
				"          {Shelf Life Code},",
				"          {Shrinkage Rate},",
				"          {Track In Installed Base},",
				"          {Variable Lead Time},",
				"          {Shelf Life Days},",
				"          {Itemcatpur Category Desc},",
				"          {Items$target Cost},",
				"          {Hazard Class},",
				"          {Hazard Class Description},",
				"          {Hazardous Material Flag},",
				"          {Items$vmi Item},",
				"          {Item Replenishment Type},",
				"          {Mtl Transactions Enabled Flag},",
				"          {Minimum Order Quantity},",
				"          {Items$country Of Origin},",
				"          {Repo Load Dttm},",
				"          {Item$agile Access Restriction},",
				"          {Solumina Security Group}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"Onhandquantites select(mapColumn(",
				"          ALLOW_RESERVATION,",
				"          CONTRACT_NUMBER,",
				"          COST_CAT_CODE,",
				"          COST_GROUP,",
				"          EXTENDED_COST,",
				"          INCLUDE_IN_ATP,",
				"          INV_CAT_CODE,",
				"          ITEM_COST,",
				"          ITEM_DESCRIPTION,",
				"          ITEM_NUM,",
				"          ITEM_REV,",
				"          ITEM_STATUS,",
				"          ITEM_STATUS_CODE,",
				"          ITEM_TYPE,",
				"          ITEM_WARRANTY_PERIOD,",
				"          {LOTS$DATE_CODE},",
				"          {LOTS$DIE_BIN_NUMBER},",
				"          {LOTS$DIE_WAFER_NUMBER},",
				"          {LOTS$EXT__LOT_NUMBER},",
				"          {LOTS$MFG_PN},",
				"          {LOTS$PACKAGING},",
				"          {LOTS$PROP_DESC},",
				"          {LOTS$PROP_MFG},",
				"          {LOTS$PROP_PRICE},",
				"          {LOTS$PROP_SN},",
				"          LOCATOR,",
				"          LOCATOR_ID,",
				"          LOT_CONTROL_CODE,",
				"          LOT_CREATION_DATE,",
				"          LOT_DATE_CODE,",
				"          LOT_DESCRIPTION,",
				"          LOT_EXP_DATE,",
				"          LOT_EXTENDED_PRICE,",
				"          LOT_FIRST_TXN_SOURCE,",
				"          LOT_FIRST_TXN_TYPE,",
				"          LOT_NUMBER,",
				"          LOT_STATUS,",
				"          MAKE_BUY_CODE,",
				"          MATERIAL_COST,",
				"          MATERIAL_OVERHEAD_COST,",
				"          NETTABLE,",
				"          ONHAND_QTY,",
				"          ORGANIZATION_CODE,",
				"          ORIG_DATE_RECEIVED,",
				"          OUTSIDE_PROCESSING_COST,",
				"          OVERHEAD_COST,",
				"          PLANNING_CAT_CODE,",
				"          PLANNING_GROUP,",
				"          PRIMARY_UNIT_OF_MEASURE,",
				"          PROD_LINE,",
				"          PROD_TYPE,",
				"          PROJ_MGR,",
				"          PROJECT_DIVISION,",
				"          PROJECT_NAME,",
				"          PROJECT_NUM,",
				"          PROJECT_TYPE,",
				"          PURCH_CAT_CODE,",
				"          RECEIPT_DATE,",
				"          RECEIPT_NUMBER,",
				"          RESOURCE_COST,",
				"          SERIAL_CONTROL_CODE,",
				"          SERVICE_CAT_CODE,",
				"          SUBINV_CUSTODIAN,",
				"          SUBINV_ROOM,",
				"          SUBINVENTORY_CODE,",
				"          SUPPLIER_LOT_NUMBER,",
				"          TASK_NUM",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"select7 derive(ONHAND_QTY = iif(regexMatch(upper(ITEM_DESCRIPTION), \"PSEUDO\"),toDouble(0),ONHAND_QTY)) ~> derivedColumn2",
				"derivedColumn2 filter(!regexMatch(LOCATOR,\"VMI-MTI\")\r",
				"&&\r",
				"!regexMatch(LOCATOR,\"MRB\")\r",
				"&&\r",
				"!regexMatch(LOCATOR,\"RTV\")\r",
				"&&\r",
				"!regexMatch(LOCATOR,\"ENGX\")\r",
				"&&\r",
				"!regexMatch(LOCATOR,\"MANOPS\")\r",
				"&&\r",
				"!regexMatch(LOCATOR,\"REDMNDLOST\")\r",
				"&&\r",
				"!regexMatch(LOCATOR,\"VMI-SIENNA\")\r",
				"&&\r",
				"!regexMatch(LOCATOR,\"VMI-CHALLE\")) ~> filter6",
				"derivedColumn2 aggregate(groupBy(ORGANIZATION_CODE,",
				"          ITEM_NUM,",
				"          PLANNING_GROUP),",
				"     {Sum_Onhand Qty} = sum(ONHAND_QTY)) ~> aggregate1",
				"filter6 aggregate(groupBy(ORGANIZATION_CODE,",
				"          ITEM_NUM,",
				"          PLANNING_GROUP),",
				"     {Sum_Onhand Qty} = sum(ONHAND_QTY)) ~> aggregate2",
				"derivedColumn2 select(mapColumn(",
				"          COST_CAT_CODE,",
				"          COST_GROUP,",
				"          EXTENDED_COST,",
				"          ITEM_COST,",
				"          ITEM_DESCRIPTION,",
				"          ITEM_NUM,",
				"          ITEM_REV,",
				"          ITEM_STATUS,",
				"          ITEM_STATUS_CODE,",
				"          ITEM_TYPE,",
				"          {LOTS$DATE_CODE},",
				"          {LOTS$DIE_BIN_NUMBER},",
				"          {LOTS$DIE_WAFER_NUMBER},",
				"          {LOTS$EXT__LOT_NUMBER},",
				"          {LOTS$MFG_PN},",
				"          {LOTS$PACKAGING},",
				"          {LOTS$PROP_DESC},",
				"          {LOTS$PROP_MFG},",
				"          LOCATOR,",
				"          LOCATOR_ID,",
				"          LOT_CONTROL_CODE,",
				"          LOT_CREATION_DATE,",
				"          LOT_DATE_CODE,",
				"          LOT_DESCRIPTION,",
				"          LOT_EXP_DATE,",
				"          LOT_EXTENDED_PRICE,",
				"          LOT_FIRST_TXN_SOURCE,",
				"          LOT_FIRST_TXN_TYPE,",
				"          LOT_NUMBER,",
				"          LOT_STATUS,",
				"          MAKE_BUY_CODE,",
				"          MATERIAL_COST,",
				"          MATERIAL_OVERHEAD_COST,",
				"          NETTABLE,",
				"          ONHAND_QTY,",
				"          ORGANIZATION_CODE,",
				"          ORIG_DATE_RECEIVED,",
				"          OUTSIDE_PROCESSING_COST,",
				"          OVERHEAD_COST,",
				"          PLANNING_CAT_CODE,",
				"          PLANNING_GROUP,",
				"          PRIMARY_UNIT_OF_MEASURE,",
				"          PROD_LINE,",
				"          PROD_TYPE,",
				"          PROJ_MGR,",
				"          PROJECT_DIVISION,",
				"          PROJECT_NAME,",
				"          PROJECT_NUM,",
				"          PROJECT_TYPE,",
				"          PURCH_CAT_CODE,",
				"          RECEIPT_DATE,",
				"          RECEIPT_NUMBER,",
				"          RESOURCE_COST,",
				"          SERIAL_CONTROL_CODE,",
				"          SERVICE_CAT_CODE,",
				"          SUBINV_CUSTODIAN,",
				"          SUBINV_ROOM,",
				"          SUBINVENTORY_CODE,",
				"          SUPPLIER_LOT_NUMBER,",
				"          TASK_NUM",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"select8 filter(!regexMatch(LOCATOR,\"MRB\")\r",
				"&&\r",
				"!regexMatch(LOCATOR,\"RTV\")\r",
				"&&\r",
				"!regexMatch(LOCATOR,\"RMA\")\r",
				"&&\r",
				"!regexMatch(LOCATOR,\"ENGX\")\r",
				"&&\r",
				"!regexMatch(NETTABLE,\"Non\")) ~> filter7",
				"filter7 aggregate(groupBy(ORGANIZATION_CODE,",
				"          PLANNING_GROUP,",
				"          ITEM_NUM),",
				"     {Qty Onhand} = sum(ONHAND_QTY)) ~> aggregate3",
				"MRPG0MRPWorkbenchVsat select(mapColumn(",
				"          {Item Number} = ITEM_NUMBER,",
				"          {Item Description} = ITEM_DESCRIPTION,",
				"          {Order Number} = ORDER_NUMBER,",
				"          {Old Due Date} = OLD_DUE_DATE,",
				"          {Quantity Rate} = QUANTITY_RATE,",
				"          {Organization Code} = ORGANIZATION_CODE,",
				"          {Order Type} = ORDER_TYPE,",
				"          {New Date} = NEW_DATE,",
				"          {Planning Group} = PLANNING_GROUP,",
				"          {Project Num} = PROJECT_NUM,",
				"          {Sugg Due Date} = SUGG_DUE_DATE,",
				"          {Sugg Dock Date} = SUGG_DOCK_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select9",
				"MRPG0MRPWorkbenchVsat select(mapColumn(",
				"          {Item Number} = ITEM_NUMBER,",
				"          {Item Description} = ITEM_DESCRIPTION,",
				"          {Order Number} = ORDER_NUMBER,",
				"          {Old Due Date} = OLD_DUE_DATE,",
				"          {Quantity Rate} = QUANTITY_RATE,",
				"          {Organization Code} = ORGANIZATION_CODE,",
				"          {Order Type} = ORDER_TYPE,",
				"          {New Date} = NEW_DATE,",
				"          {Planning Group} = PLANNING_GROUP,",
				"          {Project Num} = PROJECT_NUM,",
				"          {Sugg Due Date} = SUGG_DUE_DATE,",
				"          {Sugg Dock Date} = SUGG_DOCK_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"MRPG0MRPWorkbenchVsat select(mapColumn(",
				"          {Item Number} = ITEM_NUMBER,",
				"          {Item Description} = ITEM_DESCRIPTION,",
				"          {Order Number} = ORDER_NUMBER,",
				"          {Old Due Date} = OLD_DUE_DATE,",
				"          Quantity = QUANTITY_RATE,",
				"          {Organization Code} = ORGANIZATION_CODE,",
				"          {Order Type} = ORDER_TYPE,",
				"          {Project Number} = PROJECT_NUM,",
				"          {Sugg Due Date} = SUGG_DUE_DATE,",
				"          {Sugg Dock Date} = SUGG_DOCK_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select11",
				"select11 filter(!isNull({Item Number})\r",
				"&&\r",
				"({Order Type} == \"Purchase Order\"\r",
				"||\r",
				"{Order Type} == \"PO in receiving\"\r",
				"||\r",
				"{Order Type} == \"Intransit receipt\"\r",
				"||\r",
				"{Order Type} == \"Sales order MDS\"\r",
				"||\r",
				"{Order Type} == \"Manual MDS\"\r",
				"||\r",
				"{Order Type} == \"Forecast MDS\")) ~> filter8",
				"select9 filter(!isNull({Item Number})\r",
				"&&\r",
				"({Order Type} == \"Purchase Order\"\r",
				"||\r",
				"{Order Type} == \"PO in receiving\"\r",
				"||\r",
				"{Order Type} == \"Intransit receipt\")) ~> filter9",
				"filter9 select(mapColumn(",
				"          {Item Number},",
				"          {Item Description},",
				"          {Order Number},",
				"          {Old Due Date},",
				"          {Quantity Rate},",
				"          {Organization Code},",
				"          {Order Type},",
				"          {New Date},",
				"          {Planning Group},",
				"          {Project Num},",
				"          {Sugg Due Date},",
				"          {Sugg Dock Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select12",
				"select12 derive(Date = iif({Order Type}==\"PO in receiving\",\"!!In Receiving\",(iif({Order Type}==\"Intransit receipt\",\"!Intransit\",{Old Due Date})))) ~> derivedColumn3",
				"derivedColumn3 aggregate(groupBy({Organization Code},",
				"          {Item Number}),",
				"     Date = min(Date)) ~> aggregate4",
				"derivedColumn3 aggregate(groupBy({Organization Code},",
				"          {Item Number},",
				"          Date),",
				"     {Quantity Rate} = sum({Quantity Rate})) ~> aggregate5",
				"aggregate4, aggregate5 join(aggregate4@{Item Number} == aggregate5@{Item Number}",
				"     && aggregate4@{Organization Code} == aggregate5@{Organization Code}",
				"     && aggregate4@Date == aggregate5@Date,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          {Organization Code} = aggregate4@{Organization Code},",
				"          {Item Number} = aggregate4@{Item Number},",
				"          {Next Supply} = aggregate4@Date,",
				"          {Quantity Rate}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select13",
				"select13 derive({Next Supply} = replace({Next Supply}, \"!\", \"\")) ~> derivedColumn4",
				"WipG0AllMovetransactions select(mapColumn(",
				"          JOB_NAME,",
				"          JOB_STATUS,",
				"          ORGANIZATION_NAME,",
				"          {MAX(WIPG0_ALL_MOVE_TRANSACTIONS.TRANSACTION_DATE)},",
				"          TRANSACTION_CREATED_BY,",
				"          TO_OPERATION_SEQUENCE_NUMBER,",
				"          TO_INTRAOPERATION_STEP,",
				"          TO_DEPARTMENT_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select14",
				"innerjoin3 select(mapColumn(",
				"          JOB_NAME = {select14@JOB_NAME},",
				"          JOB_STATUS,",
				"          ORGANIZATION_NAME = {select14@ORGANIZATION_NAME},",
				"          {MAX(WIPG0_ALL_MOVE_TRANSACTIONS.TRANSACTION_DATE)},",
				"          TRANSACTION_CREATED_BY,",
				"          TO_OPERATION_SEQUENCE_NUMBER,",
				"          TO_INTRAOPERATION_STEP,",
				"          TO_DEPARTMENT_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select15",
				"PAG0ProjectParametersVsat select(mapColumn(",
				"          ORGANIZATION_CODE,",
				"          PLANNING_GROUP,",
				"          PROJECT_NAME,",
				"          PROJECT_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select16",
				"selectingReqCols3 join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"initcapcols5, select5 join({Component Part #} == {Item Number}",
				"     && initcapcols5@{Organization Code} == select5@{Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          {Component Part #},",
				"          {Component Comments},",
				"          {Component Description},",
				"          {Component Qty Per Assembly},",
				"          {Component Quantity Issued},",
				"          {Component Quantity Open},",
				"          {Component Quantity Required},",
				"          {Component Required Date},",
				"          {Component Revision},",
				"          {Component Unit Cost},",
				"          {Component Uom Code},",
				"          {Job Description},",
				"          {Job Name},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Organization Code},",
				"          {Operation Sequence Number},",
				"          {Task Number},",
				"          {Wip Supply Type},",
				"          {Right_Organization Code} = {select5@Organization Code},",
				"          {Item Number},",
				"          {Planning Make Buy Code},",
				"          {Right_Wip Supply Type} = {select5@Wip Supply Type},",
				"          {Item Revision Control Flag},",
				"          {Items$comsec},",
				"          {List Price Per Unit},",
				"          {Lot Control Flag},",
				"          {Serial Number Control Code},",
				"          {Serial Starting Number},",
				"          {Serial Starting Prefix},",
				"          {Shelf Life Code},",
				"          {Shrinkage Rate},",
				"          {Track In Installed Base},",
				"          {Variable Lead Time},",
				"          {Shelf Life Days},",
				"          {Itemcatpur Category Desc},",
				"          {Items$target Cost},",
				"          {Hazard Class},",
				"          {Hazard Class Description},",
				"          {Hazardous Material Flag},",
				"          {Items$vmi Item},",
				"          {Item Replenishment Type},",
				"          {Mtl Transactions Enabled Flag},",
				"          {Minimum Order Quantity},",
				"          {Items$country Of Origin},",
				"          {Repo Load Dttm},",
				"          {Item$agile Access Restriction},",
				"          {Solumina Security Group}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select17",
				"select17 filter({Wip Supply Type} == \"Push\" || (regexMatch(upper({Component Description}), 'PSEUDO') && {Organization Code} == '75')) ~> filter10",
				"selectingReqCols2, filter10 join(selectingReqCols2@{Job Name} == select17@{Job Name}",
				"     && selectingReqCols2@{Organization Code} == select17@{Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin5",
				"innerjoin5 select(mapColumn(",
				"          {Assembly Part #} = {Assembly$Sv$Part Number},",
				"          {Assembly Description},",
				"          {Job Created By},",
				"          {Job Name} = {selectingReqCols2@Job Name},",
				"          {Job Quantity Completed} = {selectingReqCols2@Job Quantity Completed},",
				"          {Job Quantity Scheduled} = {selectingReqCols2@Job Quantity Scheduled},",
				"          {Job Quantity Scrapped},",
				"          {Job Description} = {selectingReqCols2@Job Description},",
				"          {Job Type},",
				"          {Job Status},",
				"          {Job Released Date},",
				"          {Organization Code} = {selectingReqCols2@Organization Code},",
				"          {Project Number},",
				"          {Task Number} = {selectingReqCols2@Task Number},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date},",
				"          {Component Part #},",
				"          {Component Comments},",
				"          {Component Description},",
				"          {Component Qty Per Assembly},",
				"          {Component Quantity Issued},",
				"          {Component Quantity Open},",
				"          {Component Quantity Required},",
				"          {Component Required Date},",
				"          {Component Revision},",
				"          {Component Unit Cost},",
				"          {Component Uom Code},",
				"          {Right_Job Description} = {Job Description},",
				"          {Right_Job Name} = {Job Name},",
				"          {Right_Job Quantity Completed} = {Job Quantity Completed},",
				"          {Right_Job Quantity Scheduled} = {Job Quantity Scheduled},",
				"          {Right_Organization Code} = {Organization Code},",
				"          {Operation Sequence Number},",
				"          {Right_Task Number} = {Task Number},",
				"          {Wip Supply Type},",
				"          {Right_Right_Organization Code} = {Right_Organization Code},",
				"          {Item Number},",
				"          {Planning Make Buy Code},",
				"          {Right_Wip Supply Type},",
				"          {Item Revision Control Flag},",
				"          {Items$comsec},",
				"          {List Price Per Unit},",
				"          {Lot Control Flag},",
				"          {Serial Number Control Code},",
				"          {Serial Starting Number},",
				"          {Serial Starting Prefix},",
				"          {Shelf Life Code},",
				"          {Shrinkage Rate},",
				"          {Track In Installed Base},",
				"          {Variable Lead Time},",
				"          {Shelf Life Days},",
				"          {Itemcatpur Category Desc},",
				"          {Items$target Cost},",
				"          {Hazard Class},",
				"          {Hazard Class Description},",
				"          {Hazardous Material Flag},",
				"          {Items$vmi Item},",
				"          {Item Replenishment Type},",
				"          {Mtl Transactions Enabled Flag},",
				"          {Minimum Order Quantity},",
				"          {Items$country Of Origin},",
				"          {Repo Load Dttm},",
				"          {Item$agile Access Restriction},",
				"          {Solumina Security Group}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select18",
				"select18 aggregate(groupBy({Organization Code},",
				"          {Assembly Part #},",
				"          {Job Name},",
				"          {Component Part #}),",
				"     {Qty Open for Job Grouping} = sum({Component Quantity Open})) ~> aggregate6",
				"select18 aggregate(groupBy({Job Name},",
				"          {Assembly Part #},",
				"          {Component Part #}),",
				"     each(match(name!=\"Job Name\"&&name!=\"Assembly Part #\"&&name!=\"Component Part #\"), $$ = first($$))) ~> aggregate7",
				"aggregate6, aggregate7 join(aggregate6@{Assembly Part #} == aggregate7@{Assembly Part #}",
				"     && aggregate6@{Component Part #} == aggregate7@{Component Part #}",
				"     && aggregate6@{Job Name} == aggregate7@{Job Name}",
				"     && aggregate6@{Organization Code} == aggregate7@{Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin6",
				"innerjoin6 select(mapColumn(",
				"          {Organization Code},",
				"          {Assembly Part #} = aggregate6@{Assembly Part #},",
				"          {Job Name} = aggregate6@{Job Name},",
				"          {Component Part #} = aggregate6@{Component Part #},",
				"          {Qty Open for Job Grouping},",
				"          {Job Name} = aggregate7@{Job Name},",
				"          {Assembly Part #} = aggregate7@{Assembly Part #},",
				"          {Component Part #} = aggregate7@{Component Part #},",
				"          {Assembly Description},",
				"          {Job Created By},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Quantity Scrapped},",
				"          {Job Description},",
				"          {Job Type},",
				"          {Job Status},",
				"          {Job Released Date},",
				"          {Right_Organization Code} = {aggregate7@Organization Code},",
				"          {Project Number},",
				"          {Task Number},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date},",
				"          {Component Comments},",
				"          {Component Description},",
				"          {Component Qty Per Assembly},",
				"          {Component Quantity Issued},",
				"          {Component Quantity Open},",
				"          {Component Quantity Required},",
				"          {Component Required Date},",
				"          {Component Revision},",
				"          {Component Unit Cost},",
				"          {Component Uom Code},",
				"          {Right_Job Description},",
				"          {Right_Job Name},",
				"          {Right_Job Quantity Completed},",
				"          {Right_Job Quantity Scheduled},",
				"          {Right_Right_Organization Code} = {Right_Organization Code},",
				"          {Operation Sequence Number},",
				"          {Right_Task Number},",
				"          {Wip Supply Type},",
				"          {Right_Right_Right_Organization Code} = {Right_Right_Organization Code},",
				"          {Item Number},",
				"          {Planning Make Buy Code},",
				"          {Right_Wip Supply Type},",
				"          {Item Revision Control Flag},",
				"          {Items$comsec},",
				"          {List Price Per Unit},",
				"          {Lot Control Flag},",
				"          {Serial Number Control Code},",
				"          {Serial Starting Number},",
				"          {Serial Starting Prefix},",
				"          {Shelf Life Code},",
				"          {Shrinkage Rate},",
				"          {Track In Installed Base},",
				"          {Variable Lead Time},",
				"          {Shelf Life Days},",
				"          {Itemcatpur Category Desc},",
				"          {Items$target Cost},",
				"          {Hazard Class},",
				"          {Hazard Class Description},",
				"          {Hazardous Material Flag},",
				"          {Items$vmi Item},",
				"          {Item Replenishment Type},",
				"          {Mtl Transactions Enabled Flag},",
				"          {Minimum Order Quantity},",
				"          {Items$country Of Origin},",
				"          {Repo Load Dttm},",
				"          {Item$agile Access Restriction},",
				"          {Solumina Security Group}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select19",
				"select19, select16 join({Organization Code} == ORGANIZATION_CODE",
				"     && {Project Number} == PROJECT_NUMBER,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouter1",
				"leftouter1 select(mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select20",
				"select20, derivedColumn5 join({Component Part #} == ITEM_NUM",
				"     && {Organization Code} == select21@ORGANIZATION_CODE",
				"     && select20@PLANNING_GROUP == select21@PLANNING_GROUP,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouter2",
				"aggregate2, aggregate1 join(aggregate2@ITEM_NUM == aggregate1@ITEM_NUM",
				"     && aggregate2@ORGANIZATION_CODE == aggregate1@ORGANIZATION_CODE",
				"     && aggregate2@PLANNING_GROUP == aggregate1@PLANNING_GROUP,",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> rightouter1",
				"rightouter1 select(mapColumn(",
				"          ORGANIZATION_CODE = aggregate2@ORGANIZATION_CODE,",
				"          ITEM_NUM = aggregate2@ITEM_NUM,",
				"          PLANNING_GROUP = aggregate2@PLANNING_GROUP,",
				"          {Onhand (Clean Locators)} = aggregate2@{Sum_Onhand Qty},",
				"          {Right_Planning Group} = aggregate1@PLANNING_GROUP,",
				"          {Onhand (All)} = aggregate1@{Sum_Onhand Qty}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select21",
				"select21 derive({Onhand (Clean Locators)} = iif(isNull({Onhand (Clean Locators)}), toDouble(0), {Onhand (Clean Locators)})) ~> derivedColumn5",
				"leftouter2 select(mapColumn(",
				"          {Organization Code},",
				"          {Assembly Part #},",
				"          {Job Name},",
				"          {Component Part #},",
				"          {Qty Open for Job Grouping},",
				"          {Assembly Description},",
				"          {Job Created By},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Quantity Scrapped},",
				"          {Job Description},",
				"          {Job Type},",
				"          {Job Status},",
				"          {Job Released Date},",
				"          {Right_Organization Code},",
				"          {Project Number},",
				"          {Task Number},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date},",
				"          {Component Comments},",
				"          {Component Description},",
				"          {Component Qty Per Assembly},",
				"          {Component Quantity Issued},",
				"          {Component Quantity Open},",
				"          {Component Quantity Required},",
				"          {Component Required Date},",
				"          {Component Revision},",
				"          {Component Unit Cost},",
				"          {Component Uom Code},",
				"          {Right_Job Description},",
				"          {Right_Job Name},",
				"          {Right_Job Quantity Completed},",
				"          {Right_Job Quantity Scheduled},",
				"          {Right_Right_Organization Code},",
				"          {Operation Sequence Number},",
				"          {Right_Task Number},",
				"          {Wip Supply Type},",
				"          {Right_Right_Right_Organization Code},",
				"          {Item Number},",
				"          {Planning Make Buy Code},",
				"          {Right_Wip Supply Type},",
				"          {Item Revision Control Flag},",
				"          {Items$comsec},",
				"          {List Price Per Unit},",
				"          {Lot Control Flag},",
				"          {Serial Number Control Code},",
				"          {Serial Starting Number},",
				"          {Serial Starting Prefix},",
				"          {Shelf Life Code},",
				"          {Shrinkage Rate},",
				"          {Track In Installed Base},",
				"          {Variable Lead Time},",
				"          {Shelf Life Days},",
				"          {Itemcatpur Category Desc},",
				"          {Items$target Cost},",
				"          {Hazard Class},",
				"          {Hazard Class Description},",
				"          {Hazardous Material Flag},",
				"          {Items$vmi Item},",
				"          {Item Replenishment Type},",
				"          {Mtl Transactions Enabled Flag},",
				"          {Minimum Order Quantity},",
				"          {Items$country Of Origin},",
				"          {Repo Load Dttm},",
				"          {Item$agile Access Restriction},",
				"          {Solumina Security Group},",
				"          ORGANIZATION_CODE = {select20@ORGANIZATION_CODE},",
				"          PLANNING_GROUP = {select20@PLANNING_GROUP},",
				"          PROJECT_NAME,",
				"          PROJECT_NUMBER,",
				"          ORGANIZATION_CODE,",
				"          ITEM_NUM,",
				"          {Right_Planning Group} = PLANNING_GROUP,",
				"          {Onhand (Clean Locators)},",
				"          {Right_Right_Planning Group} = {Right_Planning Group},",
				"          {Onhand (All)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select22",
				"select22 derive({Onhand (Clean Locators)} = iif(isNull({Onhand (Clean Locators)}), toDouble(0), {Onhand (Clean Locators)}),",
				"          {Onhand (All)} = iif(isNull({Onhand (All)}), toDouble(0), {Onhand (All)})) ~> derivedColumn6",
				"derivedColumn6 filter({Qty Open for Job Grouping} >= 0) ~> filter11",
				"filter11 sort(asc({Organization Code}, true),",
				"     asc({Component Part #}, true),",
				"     asc({Job Start Date}, true)) ~> sort2",
				"sort2 window(over({Organization Code},",
				"          PLANNING_GROUP)) ~> window1",
				"window1 derive() ~> derivedColumn7",
				"derivedColumn7 window() ~> window2",
				"window2 derive() ~> derivedColumn8"
			]
		}
	}
}