{
	"name": "Charged WO Labor Hours with Timecard Hrs",
	"properties": {
		"folder": {
			"name": "timpildataflow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "WIPG0_Resource_transaction",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "WIPG0_ALL_JOB",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "datedimm",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "oracleinputchargedwolabour",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "oracleinputchargedwolabour",
						"type": "DatasetReference"
					},
					"name": "source5"
				},
				{
					"dataset": {
						"referenceName": "oracleinputchargedwolabour",
						"type": "DatasetReference"
					},
					"name": "source6"
				},
				{
					"dataset": {
						"referenceName": "oracleinputchargedwolabour",
						"type": "DatasetReference"
					},
					"name": "source7"
				},
				{
					"dataset": {
						"referenceName": "oracleinputchargedwolabour",
						"type": "DatasetReference"
					},
					"name": "source8"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "chargedoutput1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText11",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "join1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select7"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "join2"
				},
				{
					"name": "filter2"
				},
				{
					"name": "select8"
				},
				{
					"name": "filter3"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "aggregate5"
				},
				{
					"name": "union1"
				},
				{
					"name": "filter4"
				},
				{
					"name": "select9"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "derivedColumn7"
				},
				{
					"name": "derivedColumn8"
				},
				{
					"name": "derivedColumn9"
				},
				{
					"name": "derivedColumn10"
				},
				{
					"name": "derivedColumn11"
				},
				{
					"name": "derivedColumn12"
				},
				{
					"name": "select10"
				},
				{
					"name": "select11"
				},
				{
					"name": "select12"
				},
				{
					"name": "select13"
				},
				{
					"name": "select14"
				},
				{
					"name": "union2"
				},
				{
					"name": "join3"
				},
				{
					"name": "union3"
				},
				{
					"name": "aggregate6"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {ASSEMBLY$INVENTORY_ITEM_ID} as integer,",
				"          {ASSEMBLY$ORGANIZATION_ID} as short,",
				"          {ASSEMBLY$SV$PART_NUMBER} as string,",
				"          ASSEMBLY_DESCRIPTION as string,",
				"          ASSEMBLY_ITEM_TYPE as string,",
				"          ASSEMBLY_REVISION as string,",
				"          {ASSM_OSP$INVENTORY_ITEM_ID} as integer,",
				"          {ASSM_OSP$ORGANIZATION_ID} as short,",
				"          {ASSM_OSP$SV$PART_NUMBER} as string,",
				"          CHART_OF_ACCOUNTS_NAME as string,",
				"          DEPARTMENT as string,",
				"          EMPLOYEE_NAME as string,",
				"          DEPARTMENT_DESCRIPTION as string,",
				"          DEPARTMENT_CLASS as string,",
				"          EMPLOYEE_NUMBER as string,",
				"          JOB_TYPE as string,",
				"          JOB_NAME as string,",
				"          MASTER_ORGANIZATION_NAME as string,",
				"          OPERATION_DESCRIPTION as string,",
				"          OPERATION_SEQUENCE_NUMBER as short,",
				"          ORGANIZATION_NAME as string,",
				"          OUTSIDE_PROCESS_DESCRIPTION as string,",
				"          PERIOD_CLOSE_DATE as string,",
				"          PERIOD_CLOSED_FLAG as boolean,",
				"          PERIOD_NAME as string,",
				"          PERIOD_SCHEDULED_CLOSE_DATE as string,",
				"          PERIOD_START_DATE as string,",
				"          PRODUCTION_LINE as string,",
				"          PRODUCTION_LINE_DESCRIPTION as string,",
				"          PURCHASE_ORDER as integer,",
				"          REPETITIVE_SCHEDULE as string,",
				"          RESOURCE_ACTIVITY as string,",
				"          RESOURCE_AUTOCHARGE as string,",
				"          RESOURCE_COST_BASIS as string,",
				"          RESOURCE_COST_PER_UNIT_APPLIED as double,",
				"          RESOURCE_DESCRIPTION as string,",
				"          RESOURCE_NAME as string,",
				"          RESOURCE_SEQUENCE_NUMBER as short,",
				"          RESOURCE_STANDARD_RATE_FLAG as boolean,",
				"          RESOURCE_TRANSACTION_QUANTITY as double,",
				"          RESOURCE_TRANSACTION_REASON as string,",
				"          RESOURCE_TRANSACTION_REFERENCE as string,",
				"          RESOURCE_TYPE as string,",
				"          RESOURCE_UNIT_OF_MEASURE as string,",
				"          RESOURCE_UNITS_APPLIED as double,",
				"          RESOURCE_USAGE_RATE_OR_AMOUNT as double,",
				"          RESOURCE_VALUE_APPLIED as double,",
				"          SOURCE_CODE as string,",
				"          SOURCE_LINE_ID as integer,",
				"          TRANSACTION_DATE as timestamp,",
				"          TRANSACTION_ID as integer,",
				"          TRANSACTION_TYPE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          {A$CHART_OF_ACCOUNTS_NAME} as string,",
				"          {A$JOB_NAME} as string,",
				"          {A$MASTER_ORGANIZATION_NAME} as string,",
				"          {A$ORGANIZATION_NAME} as string,",
				"          {A$WIP_ENTITY_ID} as integer,",
				"          {A$ZZ__________________________} as string,",
				"          ACCOUNT_CLASS_CODE as string,",
				"          {ASSEMBLY$INVENTORY_ITEM_ID} as integer,",
				"          {ASSEMBLY$ORGANIZATION_ID} as short,",
				"          {ASSEMBLY$SV$PART_NUMBER} as string,",
				"          ASSEMBLY_DESCRIPTION as string,",
				"          ASSEMBLY_UOM_CODE as string,",
				"          BILL_ALTERNATE_BOM as string,",
				"          BILL_ALTERNATE_ROUTING as string,",
				"          BILL_REVISION as string,",
				"          BILL_REVISION_DATE as string,",
				"          BILL_REVISION_TIME as string,",
				"          BILL_ROUTING_REVISION as boolean,",
				"          BILL_ROUTING_REVISION_DATE as string,",
				"          BILL_ROUTING_REVISION_TIME as string,",
				"          BUILD_SEQUENCE as string,",
				"          CHART_OF_ACCOUNTS_NAME as string,",
				"          COMPLETION_SUBINVENTORY as string,",
				"          DJOB_DELIVER_KIT_TO as string,",
				"          DJOB_HOLD_REASON as string,",
				"          DJOB_HOLD_REASON_CODE as string,",
				"          DJOB_LINE_NUMBER as string,",
				"          DJOB_NMR as integer,",
				"          DJOB_NMR_DATE as string,",
				"          DJOB_ORDER_NUMBER as integer,",
				"          DJOB_OUTSIDE_PROCESSING as string,",
				"          DJOB_SENT_TO_SOL as string,",
				"          DJOB_SOL_PP_ID as string,",
				"          DJOB_SOL_PP_REVISION as string,",
				"          DJOB_SOL_PP_VERSION as string,",
				"          DAILY_PRODUCTION_RATE as string,",
				"          DEMAND_CLASS_CODE as string,",
				"          FIRM_PLANNED_FLAG as boolean,",
				"          INVENTORY_ITEM_ID as integer,",
				"          JOB_CLOSED_DATE as string,",
				"          JOB_COMPLETED_DATE as string,",
				"          JOB_CREATED_BY as string,",
				"          JOB_CREATION_DATE as string,",
				"          JOB_DAYS_LATE as short,",
				"          JOB_DAYS_UNTIL_DUE as short,",
				"          JOB_DESCRIPTION as string,",
				"          JOB_LATE_FLAG as boolean,",
				"          JOB_NAME as string,",
				"          JOB_QUANTITY_COMPLETED as short,",
				"          JOB_QUANTITY_SCHEDULED as short,",
				"          JOB_QUANTITY_SCRAPPED as boolean,",
				"          JOB_RELEASED_DATE as string,",
				"          JOB_SCHEDULED_COMPLETION_DT as string,",
				"          JOB_START_DATE as string,",
				"          JOB_START_TIME as string,",
				"          JOB_STATUS as string,",
				"          JOB_TYPE as string,",
				"          JOB_TYPE_EBS as string,",
				"          LAST_UPDATE_DATE as string,",
				"          LAST_UPDATE_DATE_EN as string,",
				"          LAST_UPDATED_BY as string,",
				"          LAST_UPDATED_BY_EN as string,",
				"          {LOCATOR$CV$STOCK_LOCATOR_KFF} as string,",
				"          {LOCATOR$INVENTORY_LOCATION_ID} as string,",
				"          {LOCATOR$ORGANIZATION_ID} as string,",
				"          LOT_NUMBER as string,",
				"          MASTER_ORGANIZATION_NAME as string,",
				"          NET_QUANTITY as short,",
				"          ORGANIZATION_CODE as short,",
				"          ORGANIZATION_ID as short,",
				"          ORGANIZATION_NAME as string,",
				"          PRODUCTION_LINE_CODE as string,",
				"          PRODUCTION_LINE_DESCRIPTION as string,",
				"          PROJECT_NAME as string,",
				"          PROJECT_NUMBER as string,",
				"          RES_HRS_EXISTS as boolean,",
				"          ROUTING_EXIST as boolean,",
				"          SCHEDULE_GROUP_NAME as string,",
				"          TASK_NUMBER as string,",
				"          WIP_ENTITY_ID as integer,",
				"          WIP_SUPPLY_TYPE as string,",
				"          {Z$$_________________________} as string,",
				"          {Z$WIPG0_ALL_JOBS} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          DateKey as date,",
				"          DateText as date,",
				"          Date as date,",
				"          DayOfMonth as short,",
				"          DayName as string,",
				"          DayOfWeek as short,",
				"          WeekOfMonth as short,",
				"          WeekOfQuarter as short,",
				"          MonthName as string,",
				"          Month as short,",
				"          Quarter as short,",
				"          Year as short,",
				"          MonthYear as string,",
				"          YearMonth as string,",
				"          MonthYearName as string,",
				"          QuarterYear as string,",
				"          FirstDayOfMonth as date,",
				"          LastDayOfMonth as date,",
				"          FirstDayOfQuarter as date,",
				"          LastDayOfQuarter as date,",
				"          FiscalFirstDayOfYear as date,",
				"          FiscalLastDayOfYear as date,",
				"          FiscalDayOfYear as short,",
				"          FiscalWeekOfYear as short,",
				"          FiscalQuarter as string,",
				"          FiscalQuarterYear as string,",
				"          FiscalYearQuarter as string,",
				"          FiscalYear as short,",
				"          FiscalYearName as string,",
				"          IsBusinessDay as boolean,",
				"          IsHoliday as boolean,",
				"          HolidayName as string,",
				"          WeekEndingDate_Monday as date,",
				"          WeekEndingDate_Tuesday as date,",
				"          WeekEndingDate_Wednesday as date,",
				"          WeekEndingDate_Thursday as date,",
				"          WeekEndingDate_Friday as date,",
				"          WeekEndingDate_Saturday as date,",
				"          WeekEndingDate_Sunday as date,",
				"          IsStandardTime as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          EMPLOYEE_NUMBER as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          SUPERVISOR_FULL_NAME as string,",
				"          PROJECT_NAME as string,",
				"          PROJECT_NUMBER as string,",
				"          TASK_NAME as string,",
				"          TASK_NUMBER as string,",
				"          TASK_ID as string,",
				"          EMPLOYEE_NUMBER2 as string,",
				"          PERSON_ID as string,",
				"          FULL_NAME as string,",
				"          UNIT_OF_MEASURE as string,",
				"          QUANTITY as string,",
				"          EXPENDITURE_ITEM_DATE as string,",
				"          EXPENDITURE_TYPE as string,",
				"          DATE_RECORD_CREATED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source(output(",
				"          EMPLOYEE_NUMBER as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          SUPERVISOR_FULL_NAME as string,",
				"          PROJECT_NAME as string,",
				"          PROJECT_NUMBER as string,",
				"          TASK_NAME as string,",
				"          TASK_NUMBER as string,",
				"          TASK_ID as string,",
				"          EMPLOYEE_NUMBER2 as string,",
				"          PERSON_ID as string,",
				"          FULL_NAME as string,",
				"          UNIT_OF_MEASURE as string,",
				"          QUANTITY as string,",
				"          EXPENDITURE_ITEM_DATE as string,",
				"          EXPENDITURE_TYPE as string,",
				"          DATE_RECORD_CREATED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source5",
				"source(output(",
				"          EMPLOYEE_NUMBER as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          SUPERVISOR_FULL_NAME as string,",
				"          PROJECT_NAME as string,",
				"          PROJECT_NUMBER as string,",
				"          TASK_NAME as string,",
				"          TASK_NUMBER as string,",
				"          TASK_ID as string,",
				"          EMPLOYEE_NUMBER2 as string,",
				"          PERSON_ID as string,",
				"          FULL_NAME as string,",
				"          UNIT_OF_MEASURE as string,",
				"          QUANTITY as string,",
				"          EXPENDITURE_ITEM_DATE as string,",
				"          EXPENDITURE_TYPE as string,",
				"          DATE_RECORD_CREATED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source6",
				"source(output(",
				"          EMPLOYEE_NUMBER as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          SUPERVISOR_FULL_NAME as string,",
				"          PROJECT_NAME as string,",
				"          PROJECT_NUMBER as string,",
				"          TASK_NAME as string,",
				"          TASK_NUMBER as string,",
				"          TASK_ID as string,",
				"          EMPLOYEE_NUMBER2 as string,",
				"          PERSON_ID as string,",
				"          FULL_NAME as string,",
				"          UNIT_OF_MEASURE as string,",
				"          QUANTITY as string,",
				"          EXPENDITURE_ITEM_DATE as string,",
				"          EXPENDITURE_TYPE as string,",
				"          DATE_RECORD_CREATED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source7",
				"source(output(",
				"          EMPLOYEE_NUMBER as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          SUPERVISOR_FULL_NAME as string,",
				"          PROJECT_NAME as string,",
				"          PROJECT_NUMBER as string,",
				"          TASK_NAME as string,",
				"          TASK_NUMBER as string,",
				"          TASK_ID as string,",
				"          EMPLOYEE_NUMBER2 as string,",
				"          PERSON_ID as string,",
				"          FULL_NAME as string,",
				"          UNIT_OF_MEASURE as string,",
				"          QUANTITY as string,",
				"          EXPENDITURE_ITEM_DATE as string,",
				"          EXPENDITURE_TYPE as string,",
				"          DATE_RECORD_CREATED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source8",
				"source1 select(mapColumn(",
				"          {ASSEMBLY$INVENTORY_ITEM_ID},",
				"          {ASSEMBLY$ORGANIZATION_ID},",
				"          {ASSEMBLY$SV$PART_NUMBER},",
				"          ASSEMBLY_DESCRIPTION,",
				"          ASSEMBLY_ITEM_TYPE,",
				"          ASSEMBLY_REVISION,",
				"          {ASSM_OSP$INVENTORY_ITEM_ID},",
				"          {ASSM_OSP$ORGANIZATION_ID},",
				"          {ASSM_OSP$SV$PART_NUMBER},",
				"          CHART_OF_ACCOUNTS_NAME,",
				"          DEPARTMENT,",
				"          DEPARTMENT_CLASS,",
				"          DEPARTMENT_DESCRIPTION,",
				"          EMPLOYEE_NAME,",
				"          EMPLOYEE_NUMBER,",
				"          JOB_NAME,",
				"          JOB_TYPE,",
				"          MASTER_ORGANIZATION_NAME,",
				"          OPERATION_DESCRIPTION,",
				"          OPERATION_SEQUENCE_NUMBER,",
				"          ORGANIZATION_NAME,",
				"          OUTSIDE_PROCESS_DESCRIPTION,",
				"          PERIOD_CLOSE_DATE,",
				"          PERIOD_CLOSED_FLAG,",
				"          PERIOD_NAME,",
				"          PERIOD_SCHEDULED_CLOSE_DATE,",
				"          PERIOD_START_DATE,",
				"          PRODUCTION_LINE,",
				"          PRODUCTION_LINE_DESCRIPTION,",
				"          PURCHASE_ORDER,",
				"          REPETITIVE_SCHEDULE,",
				"          RESOURCE_ACTIVITY,",
				"          RESOURCE_AUTOCHARGE,",
				"          RESOURCE_COST_BASIS,",
				"          RESOURCE_COST_PER_UNIT_APPLIED,",
				"          RESOURCE_DESCRIPTION,",
				"          RESOURCE_NAME,",
				"          RESOURCE_SEQUENCE_NUMBER,",
				"          RESOURCE_STANDARD_RATE_FLAG,",
				"          RESOURCE_TRANSACTION_QUANTITY,",
				"          RESOURCE_TRANSACTION_REASON,",
				"          RESOURCE_TRANSACTION_REFERENCE,",
				"          RESOURCE_TYPE,",
				"          RESOURCE_UNIT_OF_MEASURE,",
				"          RESOURCE_UNITS_APPLIED,",
				"          RESOURCE_USAGE_RATE_OR_AMOUNT,",
				"          RESOURCE_VALUE_APPLIED,",
				"          SOURCE_CODE,",
				"          SOURCE_LINE_ID,",
				"          TRANSACTION_DATE,",
				"          TRANSACTION_ID,",
				"          TRANSACTION_TYPE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source2 select(mapColumn(",
				"          {Job Name} = JOB_NAME,",
				"          {Project Number} = PROJECT_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1, select2 join(JOB_NAME == {Job Name},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 filter(toDate(TRANSACTION_DATE ) >= toDate(\"2019-01-01\")) ~> filter1",
				"filter1 select(mapColumn(",
				"          each(match(true()),",
				"               replace($$,'ASSY','') = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 select(mapColumn(",
				"          each(match(true()),",
				"               replace($$,'_',' ') = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 select(mapColumn(",
				"          each(match(true()),",
				"               initCap($$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5 derive({Employee Name1} = split({Employee Name},',')[1],",
				"          {Employee Name2} = split({Employee Name},',')[2],",
				"          {Employee Name3} = split({Employee Name},',')[3]) ~> derivedColumn1",
				"derivedColumn1 derive({Employee Name21} = split({Employee Name2},' ')[1],",
				"          {Employee Name22} = split({Employee Name2},' ')[2],",
				"          {Employee Name23} = split({Employee Name2},' ')[3]) ~> derivedColumn2",
				"derivedColumn2 derive({Employee First Initial Last Name} = iif(isNull({Employee Name}), '', iif(regexMatch({Employee Name1}, 'Nguyen'),left({Employee Name22},1)+'. '\r",
				"+ left({Employee Name23}, 1)+'. '+{Employee Name1}, iif(regexMatch({Employee Name1}, 'Rodriguez'),\r",
				" {Employee Name1}+'. '+left({Employee Name22},1)+'. '+ left({Employee Name23}, 1),left({Employee Name22},1)+'. '+{Employee Name1} ))) ,",
				"          {Employee Last Name First Initial} = iif(isNull({Employee Name}),'', iif(regexMatch({Employee Name1}, 'Nguyen'),left({Employee Name1},1)+'. '\r",
				"+ left({Employee Name22}, 1)+'. '+{Employee Name23}, iif(regexMatch({Employee Name1}, 'Rodriguez'),\r",
				" {Employee Name1}+'. '+left({Employee Name22},1)+'. '+ left({Employee Name23}, 1),{Employee Name1}+'. '+left({Employee Name22},1) ))) ,",
				"          {Transaction Date YYYYMM} = toString(toDate({Transaction Date}),'YYYY-MM')) ~> derivedColumn3",
				"derivedColumn3 select(mapColumn(",
				"          {Assembly$inventory Item Id},",
				"          {Assembly$organization Id},",
				"          {Assembly$sv$part Number},",
				"          {Assembly Description},",
				"          {Assembly Item Type},",
				"          {Assembly Revision},",
				"          {Assm Osp$inventory Item Id},",
				"          {Assm Osp$organization Id},",
				"          {Assm Osp$sv$part Number},",
				"          {Chart Of Accounts Name},",
				"          Department,",
				"          {Department Class},",
				"          {Department Description},",
				"          {Employee Name},",
				"          {Employee Number},",
				"          {Job Name},",
				"          {Job Type},",
				"          {Master Organization Name},",
				"          {Operation Description},",
				"          {Operation Sequence Number},",
				"          {Organization Name},",
				"          {Outside Process Description},",
				"          {Period Close Date},",
				"          {Period Closed Flag},",
				"          {Period Name},",
				"          {Period Scheduled Close Date},",
				"          {Period Start Date},",
				"          {Production Line},",
				"          {Production Line Description},",
				"          {Purchase Order},",
				"          {Repetitive Schedule},",
				"          {Resource Activity},",
				"          {Resource Autocharge},",
				"          {Resource Cost Basis},",
				"          {Resource Cost Per Unit Applied},",
				"          {Resource Description},",
				"          {Resource Name},",
				"          {Resource Sequence Number},",
				"          {Resource Standard Rate Flag},",
				"          {Resource Transaction Quantity},",
				"          {Resource Transaction Reason},",
				"          {Resource Transaction Reference},",
				"          {Resource Type},",
				"          {Resource Unit Of Measure},",
				"          {Resource Units Applied},",
				"          {Resource Usage Rate Or Amount},",
				"          {Resource Value Applied},",
				"          {Source Code},",
				"          {Source Line Id},",
				"          {Transaction Date},",
				"          {Transaction Id},",
				"          {Transaction Type},",
				"          {Project Number},",
				"          {Employee First Initial Last Name},",
				"          {Employee Last Name First Initial},",
				"          {Transaction Date YYYYMM}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"select7 derive({Transaction Date} = toDate({Transaction Date})) ~> derivedColumn4",
				"select14, select8 join({Transaction Date} == Date,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"source3 filter(Date >= toDate('2019-01-01')) ~> filter2",
				"filter2 select(mapColumn(",
				"          Date,",
				"          DayName,",
				"          WeekEndingDate_Friday,",
				"          WeekEndingDate_Saturday",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"select8 filter(Date <= toDate(currentTimestamp())) ~> filter3",
				"union2 derive({Date Published} = toDate(currentTimestamp())) ~> derivedColumn5",
				"source4 aggregate(groupBy(EMPLOYEE_NUMBER,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          SUPERVISOR_FULL_NAME,",
				"          PROJECT_NAME,",
				"          PROJECT_NUMBER,",
				"          TASK_NAME,",
				"          TASK_NUMBER,",
				"          TASK_ID,",
				"          EMPLOYEE_NUMBER2,",
				"          PERSON_ID,",
				"          FULL_NAME,",
				"          UNIT_OF_MEASURE,",
				"          QUANTITY,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_TYPE,",
				"          DATE_RECORD_CREATED),",
				"     each(match(name!='EMPLOYEE_NUMBER'&&name!='FIRST_NAME'&&name!='LAST_NAME'&&name!='SUPERVISOR_FULL_NAME'&&name!='PROJECT_NAME'&&name!='PROJECT_NUMBER'&&name!='TASK_NAME'&&name!='TASK_NUMBER'&&name!='TASK_ID'&&name!='EMPLOYEE_NUMBER2'&&name!='PERSON_ID'&&name!='FULL_NAME'&&name!='UNIT_OF_MEASURE'&&name!='QUANTITY'&&name!='EXPENDITURE_ITEM_DATE'&&name!='EXPENDITURE_TYPE'&&name!='DATE_RECORD_CREATED'), $$ = first($$))) ~> aggregate1",
				"source5 aggregate(groupBy(EMPLOYEE_NUMBER,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          SUPERVISOR_FULL_NAME,",
				"          PROJECT_NAME,",
				"          PROJECT_NUMBER,",
				"          TASK_NAME,",
				"          TASK_NUMBER,",
				"          TASK_ID,",
				"          EMPLOYEE_NUMBER2,",
				"          PERSON_ID,",
				"          FULL_NAME,",
				"          UNIT_OF_MEASURE,",
				"          QUANTITY,",
				"          EXPENDITURE_ITEM_DATE,",
				"          DATE_RECORD_CREATED),",
				"     each(match(name!='EMPLOYEE_NUMBER'&&name!='FIRST_NAME'&&name!='LAST_NAME'&&name!='SUPERVISOR_FULL_NAME'&&name!='PROJECT_NAME'&&name!='PROJECT_NUMBER'&&name!='TASK_NAME'&&name!='TASK_NUMBER'&&name!='TASK_ID'&&name!='EMPLOYEE_NUMBER2'&&name!='PERSON_ID'&&name!='FULL_NAME'&&name!='UNIT_OF_MEASURE'&&name!='QUANTITY'&&name!='EXPENDITURE_ITEM_DATE'&&name!='EXPENDITURE_TYPE'&&name!='DATE_RECORD_CREATED'), $$ = first($$))) ~> aggregate2",
				"source6 aggregate(groupBy(EMPLOYEE_NUMBER,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          SUPERVISOR_FULL_NAME,",
				"          PROJECT_NAME,",
				"          PROJECT_NUMBER,",
				"          TASK_NAME,",
				"          TASK_NUMBER,",
				"          TASK_ID,",
				"          EMPLOYEE_NUMBER2,",
				"          PERSON_ID,",
				"          FULL_NAME,",
				"          UNIT_OF_MEASURE,",
				"          QUANTITY,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_TYPE,",
				"          DATE_RECORD_CREATED),",
				"     each(match(name!='EMPLOYEE_NUMBER'&&name!='FIRST_NAME'&&name!='LAST_NAME'&&name!='SUPERVISOR_FULL_NAME'&&name!='PROJECT_NAME'&&name!='PROJECT_NUMBER'&&name!='TASK_NAME'&&name!='TASK_NUMBER'&&name!='TASK_ID'&&name!='EMPLOYEE_NUMBER2'&&name!='PERSON_ID'&&name!='FULL_NAME'&&name!='UNIT_OF_MEASURE'&&name!='QUANTITY'&&name!='EXPENDITURE_ITEM_DATE'&&name!='EXPENDITURE_TYPE'&&name!='DATE_RECORD_CREATED'), $$ = first($$))) ~> aggregate3",
				"source7 aggregate(groupBy(EMPLOYEE_NUMBER,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          SUPERVISOR_FULL_NAME,",
				"          PROJECT_NAME,",
				"          PROJECT_NUMBER,",
				"          TASK_NAME,",
				"          TASK_NUMBER,",
				"          TASK_ID,",
				"          EMPLOYEE_NUMBER2,",
				"          PERSON_ID,",
				"          FULL_NAME,",
				"          UNIT_OF_MEASURE,",
				"          QUANTITY,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_TYPE,",
				"          DATE_RECORD_CREATED),",
				"     each(match(name!='EMPLOYEE_NUMBER'&&name!='FIRST_NAME'&&name!='LAST_NAME'&&name!='SUPERVISOR_FULL_NAME'&&name!='PROJECT_NAME'&&name!='PROJECT_NUMBER'&&name!='TASK_NAME'&&name!='TASK_NUMBER'&&name!='TASK_ID'&&name!='EMPLOYEE_NUMBER2'&&name!='PERSON_ID'&&name!='FULL_NAME'&&name!='UNIT_OF_MEASURE'&&name!='QUANTITY'&&name!='EXPENDITURE_ITEM_DATE'&&name!='EXPENDITURE_TYPE'&&name!='DATE_RECORD_CREATED'), $$ = first($$))) ~> aggregate4",
				"source8 aggregate(groupBy(EMPLOYEE_NUMBER,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          SUPERVISOR_FULL_NAME,",
				"          PROJECT_NAME,",
				"          PROJECT_NUMBER,",
				"          TASK_NAME,",
				"          TASK_NUMBER,",
				"          TASK_ID,",
				"          EMPLOYEE_NUMBER2,",
				"          PERSON_ID,",
				"          FULL_NAME,",
				"          UNIT_OF_MEASURE,",
				"          QUANTITY,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_TYPE,",
				"          DATE_RECORD_CREATED),",
				"     each(match(name!='EMPLOYEE_NUMBER'&&name!='FIRST_NAME'&&name!='LAST_NAME'&&name!='SUPERVISOR_FULL_NAME'&&name!='PROJECT_NAME'&&name!='PROJECT_NUMBER'&&name!='TASK_NAME'&&name!='TASK_NUMBER'&&name!='TASK_ID'&&name!='EMPLOYEE_NUMBER2'&&name!='PERSON_ID'&&name!='FULL_NAME'&&name!='UNIT_OF_MEASURE'&&name!='QUANTITY'&&name!='EXPENDITURE_ITEM_DATE'&&name!='EXPENDITURE_TYPE'&&name!='DATE_RECORD_CREATED'), $$ = first($$))) ~> aggregate5",
				"aggregate1, aggregate2, aggregate3, aggregate4, aggregate5 union(byName: true)~> union1",
				"union1 filter(EXPENDITURE_ITEM_DATE >= \"2019-01-01\") ~> filter4",
				"filter4 select(mapColumn(",
				"          EMPLOYEE_NUMBER,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          SUPERVISOR_FULL_NAME,",
				"          PROJECT_NAME,",
				"          PROJECT_NUMBER,",
				"          TASK_NAME,",
				"          TASK_NUMBER,",
				"          TASK_ID,",
				"          EMPLOYEE_NUMBER2,",
				"          PERSON_ID,",
				"          FULL_NAME,",
				"          UNIT_OF_MEASURE,",
				"          QUANTITY,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_TYPE,",
				"          DATE_RECORD_CREATED",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select9",
				"select9 derive(EXPENDITURE_ITEM_DATE = toDate(EXPENDITURE_ITEM_DATE),",
				"          DATE_RECORD_CREATED = toDate(DATE_RECORD_CREATED)) ~> derivedColumn6",
				"derivedColumn6 derive(FULL_NAME1 = split(FULL_NAME,',')[1],",
				"          FULL_NAME2 = split(FULL_NAME,',')[2],",
				"          FULL_NAME3 = split(FULL_NAME,',')[3]) ~> derivedColumn7",
				"derivedColumn7 derive(FULL_NAME21 = split(FULL_NAME2,',')[1],",
				"          FULL_NAME22 = split(FULL_NAME2,',')[2],",
				"          FULL_NAME23 = split(FULL_NAME2,',')[3]) ~> derivedColumn8",
				"derivedColumn8 derive(SUPERVISOR_FULL_NAME1 = split(SUPERVISOR_FULL_NAME,',')[1],",
				"          SUPERVISOR_FULL_NAME2 = split(SUPERVISOR_FULL_NAME,',')[2],",
				"          SUPERVISOR_FULL_NAME3 = split(SUPERVISOR_FULL_NAME,',')[3]) ~> derivedColumn9",
				"derivedColumn9 derive(SUPERVISOR_FULL_NAME21 = split(SUPERVISOR_FULL_NAME2,',')[1],",
				"          SUPERVISOR_FULL_NAME22 = split(SUPERVISOR_FULL_NAME2,',')[2]) ~> derivedColumn10",
				"derivedColumn10 derive({Employee First Initial Last Name} = iif(LAST_NAME == 'Nguyen', FIRST_NAME + '.' + LAST_NAME, left(FIRST_NAME, 1)+'.'+LAST_NAME),",
				"          {Supervisor First Initial Last Name} = left(SUPERVISOR_FULL_NAME22, 1) + \".\" + SUPERVISOR_FULL_NAME1,",
				"          {Employee Last Name First Initial} = iif(LAST_NAME == 'Nguyen', LAST_NAME +'.'+ left(FULL_NAME22, 1)+'.'+left(FULL_NAME23,1),LAST_NAME +'.'+left(FIRST_NAME,1)),",
				"          {Tableau Username} = iif(SUPERVISOR_FULL_NAME1 == 'Lloyd', \"splloyd\", lower(left(SUPERVISOR_FULL_NAME2, 2))+lower(SUPERVISOR_FULL_NAME1)),",
				"          {Date Published} = toDate(currentTimestamp())) ~> derivedColumn11",
				"derivedColumn11 derive({EXPENDITURE_ITEM_DATE YYYYMM} = toString(EXPENDITURE_ITEM_DATE,'YYYY-MM')) ~> derivedColumn12",
				"derivedColumn12 select(mapColumn(",
				"          each(match(true()),",
				"               replace($$,'ASSY','') = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"select10 select(mapColumn(",
				"          each(match(true()),",
				"               replace($$,'_',' ') = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select11",
				"select11 select(mapColumn(",
				"          each(match(true()),",
				"               initCap($$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select12",
				"select12 select(mapColumn(",
				"          {Employee Number},",
				"          {Project Name},",
				"          {Project Number},",
				"          {Task Name},",
				"          {Task Number},",
				"          {Task Id},",
				"          {Employee Number2},",
				"          {Person Id},",
				"          {Full Name},",
				"          {Unit Of Measure},",
				"          Quantity,",
				"          {Expenditure Item Date},",
				"          {Expenditure Type},",
				"          {Date Record Created},",
				"          {Full Name1},",
				"          {Full Name2},",
				"          {Full Name3},",
				"          {Full Name21},",
				"          {Full Name22},",
				"          {Full Name23},",
				"          {Employee First Initial Last Name},",
				"          {Supervisor First Initial Last Name},",
				"          {Employee Last Name First Initial},",
				"          {Tableau Username},",
				"          {Date Published},",
				"          {Expenditure Item Date Yyyymm}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select13",
				"derivedColumn4 select(mapColumn(",
				"          {Assembly$inventory Item Id},",
				"          {Assembly$organization Id},",
				"          {Assembly$sv$part Number},",
				"          {Assembly Description},",
				"          {Assembly Item Type},",
				"          {Assembly Revision},",
				"          {Assm Osp$inventory Item Id},",
				"          {Assm Osp$organization Id},",
				"          {Assm Osp$sv$part Number},",
				"          {Chart Of Accounts Name},",
				"          Department,",
				"          {Department Class},",
				"          {Department Description},",
				"          {Employee Name},",
				"          {Employee Number},",
				"          {Job Name},",
				"          {Job Type},",
				"          {Master Organization Name},",
				"          {Operation Description},",
				"          {Operation Sequence Number},",
				"          {Organization Name},",
				"          {Outside Process Description},",
				"          {Period Close Date},",
				"          {Period Closed Flag},",
				"          {Period Name},",
				"          {Period Scheduled Close Date},",
				"          {Period Start Date},",
				"          {Production Line},",
				"          {Production Line Description},",
				"          {Purchase Order},",
				"          {Repetitive Schedule},",
				"          {Resource Activity},",
				"          {Resource Autocharge},",
				"          {Resource Cost Basis},",
				"          {Resource Cost Per Unit Applied},",
				"          {Resource Description},",
				"          {Resource Name},",
				"          {Resource Sequence Number},",
				"          {Resource Standard Rate Flag},",
				"          {Resource Transaction Quantity},",
				"          {Resource Transaction Reason},",
				"          {Resource Transaction Reference},",
				"          {Resource Type},",
				"          {Resource Unit Of Measure},",
				"          {Resource Units Applied},",
				"          {Resource Usage Rate Or Amount},",
				"          {Resource Value Applied},",
				"          {Source Code},",
				"          {Source Line Id},",
				"          {Transaction Date},",
				"          {Transaction Id},",
				"          {Transaction Type},",
				"          {Project Number},",
				"          {Employee First Initial Last Name},",
				"          {Employee Last Name First Initial},",
				"          {Transaction Date YYYYMM}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select14",
				"join2, filter3 union(byName: true)~> union2",
				"select8, select13 join(Date == {Expenditure Item Date},",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, filter3 union(byName: true)~> union3",
				"union3 aggregate(groupBy(Date,",
				"          DayName,",
				"          WeekEndingDate_Friday,",
				"          WeekEndingDate_Saturday,",
				"          {Project Name},",
				"          {Project Number},",
				"          {Task Name},",
				"          {Task Number},",
				"          {Task Id},",
				"          {Unit Of Measure},",
				"          Quantity,",
				"          {Expenditure Item Date},",
				"          {Expenditure Type},",
				"          {Date Record Created},",
				"          {Employee First Initial Last Name},",
				"          {Supervisor First Initial Last Name},",
				"          {Employee Last Name First Initial},",
				"          {Tableau Username}),",
				"     each(match(\r",
				"name != 'Date' && name != 'DayName' && name != 'WeekEndingDate_Friday' && name != 'WeekEndingDate_Saturday' && \r",
				"name != 'Project Name' && name != 'Project Number' && name != 'Task Name' && name != 'Task Number' && \r",
				"name != 'Task Id' && name != 'Unit Of Measure' && name != 'Quantity' && name != 'Expenditure Item Date' && \r",
				"name != 'Expenditure Type' && name != 'Date Record Created' && name != 'Employee First Initial Last Name' &&\r",
				"name != 'Supervisor First Initial Last Name' && name != 'Employee Last Name First Initial' && name != 'Tableau Username'), $$ = first($$))) ~> aggregate6",
				"derivedColumn5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"aggregate6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}