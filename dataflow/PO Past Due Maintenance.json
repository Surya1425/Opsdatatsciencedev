{
	"name": "PO Past Due Maintenance",
	"properties": {
		"folder": {
			"name": "timpildataflow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_Ops_Datascience_5026_dev",
						"type": "LinkedServiceReference"
					},
					"name": "Input",
					"description": "Import data from POPastDueMaintenance"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_csv_output",
						"type": "DatasetReference"
					},
					"name": "output"
				}
			],
			"transformations": [
				{
					"name": "selectcolumns"
				},
				{
					"name": "filter"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "sorted"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Acceptance Count} as short,",
				"          {Account Type} as string,",
				"          {Acknowledge Flag} as boolean,",
				"          {Amount Billed} as double,",
				"          {Authorization Status} as string,",
				"          {Automated PO} as string,",
				"          {Award Class PO} as string,",
				"          {Award Group} as string,",
				"          {Business Segment} as string,",
				"          Buyer as string,",
				"          {Buyer Number} as short,",
				"          {Buyer Org} as string,",
				"          {Buyer Type} as string,",
				"          {Cancel Flag} as string,",
				"          {Closure Status} as string,",
				"          {Commodity Code} as string,",
				"          {Commodity Description} as string,",
				"          {Commodity Group} as string,",
				"          {Commodity Long Description} as string,",
				"          {Commodity Segment} as string,",
				"          {Cost Center} as short,",
				"          {Date Published} as string,",
				"          {Deliver To Person} as string,",
				"          {Delivery to OTD} as string,",
				"          {Delivery to Promise} as string,",
				"          {Destination Org} as short,",
				"          {Distribution #} as short,",
				"          {Expenditure Type} as string,",
				"          {Extended Price} as double,",
				"          {First Acknowledge Date} as date,",
				"          {Hydra Projects} as string,",
				"          {Item #} as string,",
				"          {Item Description} as string,",
				"          {Item Revision} as short,",
				"          {Item Target Cost} as string,",
				"          Justification as string,",
				"          {Last Receipt Date} as date,",
				"          {Last Receipt Fiscal Date} as date,",
				"          {Make/Buy} as string,",
				"          Manager as string,",
				"          {Matching Type} as string,",
				"          {Need By Date} as date,",
				"          {Original OTD} as date,",
				"          {OTD Date} as timestamp,",
				"          {OTD Days} as short,",
				"          {OTD Field Status} as string,",
				"          {OTD Status} as string,",
				"          {Past Due Status code} as string,",
				"          {PO #} as integer,",
				"          {PO Charge Account} as string,",
				"          {PO Creation Date} as date,",
				"          {PO Currency Code} as string,",
				"          {PO Line #} as double,",
				"          {PO Line Creation Date} as date,",
				"          {PO Line Creation Fiscal Date} as date,",
				"          {PO Line Open Flag} as boolean,",
				"          {PO Line Type} as string,",
				"          {PO Type} as string,",
				"          {PO Type 1} as string,",
				"          {Product Line} as string,",
				"          {Product Line Segment} as string,",
				"          {Product Segment} as string,",
				"          {Project Business Area} as string,",
				"          {Project Manager Name} as string,",
				"          {Project Name} as string,",
				"          {Project Number} as string,",
				"          {Promise Days} as short,",
				"          {Promise Fiscal Date} as date,",
				"          {Promise Status} as string,",
				"          {Promised Date} as date,",
				"          {Qty Billed} as short,",
				"          {Qty Cancelled} as short,",
				"          {Qty Delivered} as short,",
				"          {Qty Open} as short,",
				"          {Qty Ordered} as short,",
				"          {Receipt Routing} as string,",
				"          {Receipt Status} as string,",
				"          {Receipt Status (Promise Date)} as string,",
				"          {Receipt/Expected Receipt Date} as date,",
				"          {Release #} as string,",
				"          {Req #} as integer,",
				"          {Req Create Date} as date,",
				"          {Req Line #} as short,",
				"          {Requisition Created By} as string,",
				"          {Right_PO Type} as string,",
				"          {SBR Group} as string,",
				"          {SBR Type} as string,",
				"          {Ship To Location} as string,",
				"          {Shipm$Mrp Pull In Message Root} as string,",
				"          {Shipment #} as short,",
				"          Supplier as string,",
				"          {Supplier Commodity Group} as string,",
				"          {Supplier Commodity Segment} as string,",
				"          {Supplier Group Name} as string,",
				"          {Supplier Item PO} as string,",
				"          {Supplier Item Req} as string,",
				"          {Supplier Segment} as string,",
				"          {Supplier Type} as string,",
				"          {Task Number} as short,",
				"          {TAT Days} as double,",
				"          Terms as string,",
				"          {Unit Price} as double,",
				"          UOM as string,",
				"          {Vend$Require Po Acknowledgemen} as string,",
				"          {Vendor Number} as integer,",
				"          {Total Lead Time} as short",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'ops-datascience-5026-dev',",
				"     folderPath: 'Nmrs/raw',",
				"     fileName: 'All PO Distributions.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> Input",
				"Input select(mapColumn(",
				"          {Authorization Status},",
				"          Buyer,",
				"          {Cancel Flag},",
				"          {Closure Status},",
				"          {Extended Price},",
				"          Manager,",
				"          {Matching Type},",
				"          {PO #},",
				"          {PO Line #},",
				"          {Promised Date},",
				"          {Qty Billed},",
				"          {Qty Cancelled},",
				"          {Qty Delivered},",
				"          {Qty Open},",
				"          {Qty Ordered},",
				"          Supplier,",
				"          {Unit Price}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcolumns",
				"selectcolumns filter({Closure Status}!=\"CLOSED\" && {Closure Status}!=\"FINALLY CLOSED\" && {Authorization Status} !=\"INCOMPLETE\" && {Authorization Status} !=\"REJECTED\" && {Cancel Flag}!=\"Y\") ~> filter",
				"filter derive({PO OPEN AMOUNT} = iif({Matching Type} == '2-Way',({Qty Ordered}-{Qty Cancelled}-{Qty Billed})*{Unit Price},{Qty Open}*{Unit Price}),",
				"          {DAYS PAST DUE} = ceil(((currentDate()-{Promised Date})/7)*5)) ~> derivedColumn1",
				"derivedColumn1 filter({PO OPEN AMOUNT}>= 50000 && {DAYS PAST DUE}>=30) ~> filter1",
				"filter1 sort(asc(Manager, true)) ~> sorted",
				"sorted select(mapColumn(",
				"          {PO #},",
				"          {PO Line #},",
				"          Supplier,",
				"          Buyer,",
				"          Manager,",
				"          {Days Past Due} = {DAYS PAST DUE},",
				"          {Promised Date},",
				"          {Closure Status},",
				"          {Qty Open},",
				"          {Unit Price},",
				"          {PO Open Amount} = {PO OPEN AMOUNT}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['po.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> output"
			]
		}
	}
}