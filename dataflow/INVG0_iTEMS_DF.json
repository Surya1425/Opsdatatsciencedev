{
	"name": "INVG0_iTEMS_DF",
	"properties": {
		"folder": {
			"name": "RAJASHEKAR_DATAFLOWS/invg0_items"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "INGVO_ORACLE_COPY",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "invg0_additional",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "INGV0_items_vsat_output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORGANIZATION_CODE as string,",
				"          ITEM_NUMBER as string,",
				"          ITEM_DESCRIPTION as string,",
				"          ITEM_CREATION_DATE as date,",
				"          PLANNING_MAKE_BUY_CODE as string,",
				"          BUYER_NAME as string,",
				"          PLANNER_CODE as string,",
				"          PREPROCESSING_LEAD_TIME as short,",
				"          PROCESSING_LEAD_TIME as double,",
				"          POSTPROCESSING_LEAD_TIME as short,",
				"          FIXED_LEAD_TIME as double,",
				"          CUM_MANUFACTURING_LEAD_TIME as double,",
				"          CUMULATIVE_TOTAL_LEAD_TIME as double,",
				"          PURCHASE_COMMOD as integer,",
				"          UNIT_OF_MEASURE as string,",
				"          RECEIPT_ROUTING as string,",
				"          ITEM_STATUS_CODE as string,",
				"          ITEM_TYPE as string,",
				"          ITEMCATINV_ITEM_CATEGORY_KFF as string,",
				"          AVERAGE_COST as double,",
				"          MRP_PLANNING_METHOD as string,",
				"          {ITEMS$AGILE_ITEM__PART__CATEGO} as string,",
				"          WIP_SUPPLY_TYPE as string,",
				"          {ITEMS$ITEM_SETUP_VERIFIED} as timestamp,",
				"          {ITEMS$AGILE_ACCESS_RESTRICTION} as string,",
				"          {ITEMS$VMI_ITEM} as string,",
				"          INVENTORY_PLANNING_METHOD_CODE as string,",
				"          ITEMCATPUR_CATEGORY_DESC as string,",
				"          MINIMUM_ORDER_QUANTITY as short,",
				"          TARGET_COST as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          {Item Number} as string,",
				"          {Item Revision Control Flag} as string,",
				"          {Organization Code} as string,",
				"          {Serial Number Control Code} as string,",
				"          {Shrinkage Rate} as double,",
				"          {Shelf Life Code} as string,",
				"          {Track In Installed Base} as string,",
				"          {Lot Control Flag} as string,",
				"          {Items$Comsec} as string,",
				"          {Variable Lead Time} as double,",
				"          {Serial Starting Number} as string,",
				"          {Serial Starting Prefix} as string,",
				"          {List Price Per Unit} as double,",
				"          {Fixed Days Supply} as double,",
				"          {Fixed Order Quantity} as double,",
				"          {Minimum Order Quantity} as double,",
				"          {Workflow Publishing} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1 select(mapColumn(",
				"          {ORGANIZATION CODE} = ORGANIZATION_CODE,",
				"          {ITEM NUMBER} = ITEM_NUMBER,",
				"          {ITEM DESCRIPTION} = ITEM_DESCRIPTION,",
				"          {ITEM CREATION DATE} = ITEM_CREATION_DATE,",
				"          {PLANNING MAKE BUY CODE} = PLANNING_MAKE_BUY_CODE,",
				"          {BUYER NAME} = BUYER_NAME,",
				"          {PLANNER CODE} = PLANNER_CODE,",
				"          {PREPROCESSING LEAD TIME} = PREPROCESSING_LEAD_TIME,",
				"          {PROCESSING LEAD TIME} = PROCESSING_LEAD_TIME,",
				"          {POSTPROCESSING LEAD TIME} = POSTPROCESSING_LEAD_TIME,",
				"          {FIXED LEAD TIME} = FIXED_LEAD_TIME,",
				"          {CUM MANUFACTURING LEAD TIME} = CUM_MANUFACTURING_LEAD_TIME,",
				"          {CUMULATIVE TOTAL LEAD TIME} = CUMULATIVE_TOTAL_LEAD_TIME,",
				"          {PURCHASE COMMOD} = PURCHASE_COMMOD,",
				"          {UNIT OF MEASURE} = UNIT_OF_MEASURE,",
				"          {RECEIPT ROUTING} = RECEIPT_ROUTING,",
				"          {ITEM STATUS CODE} = ITEM_STATUS_CODE,",
				"          {ITEM TYPE} = ITEM_TYPE,",
				"          {ITEMCATINV ITEM CATEGORY KFF} = ITEMCATINV_ITEM_CATEGORY_KFF,",
				"          {AVERAGE COST} = AVERAGE_COST,",
				"          {MRP PLANNING METHOD} = MRP_PLANNING_METHOD,",
				"          {ITEMS$AGILE ITEM PART CATEGO} = {ITEMS$AGILE_ITEM__PART__CATEGO},",
				"          {WIP SUPPLY TYPE} = WIP_SUPPLY_TYPE,",
				"          {ITEMS$ITEM SETUP VERIFIED} = {ITEMS$ITEM_SETUP_VERIFIED},",
				"          {ITEMS$AGILE ACCESS RESTRICTION} = {ITEMS$AGILE_ACCESS_RESTRICTION},",
				"          {ITEMS$VMI ITEM} = {ITEMS$VMI_ITEM},",
				"          {INVENTORY PLANNING METHOD CODE} = INVENTORY_PLANNING_METHOD_CODE,",
				"          {Purchase Commod Description} = ITEMCATPUR_CATEGORY_DESC,",
				"          {MINIMUM ORDER QUANTITY} = MINIMUM_ORDER_QUANTITY,",
				"          {TARGET COST} = TARGET_COST",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, source2 join(select1@{ORGANIZATION CODE} == source2@{Organization Code}",
				"     && select1@{ITEM NUMBER} == source2@{Item Number},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          {ORGANIZATION CODE} = select1@{ORGANIZATION CODE},",
				"          {ITEM NUMBER} = select1@{ITEM NUMBER},",
				"          {ITEM DESCRIPTION},",
				"          {ITEM CREATION DATE},",
				"          {PLANNING MAKE BUY CODE},",
				"          {BUYER NAME},",
				"          {PLANNER CODE},",
				"          {PREPROCESSING LEAD TIME},",
				"          {PROCESSING LEAD TIME},",
				"          {POSTPROCESSING LEAD TIME},",
				"          {FIXED LEAD TIME},",
				"          {CUM MANUFACTURING LEAD TIME},",
				"          {CUMULATIVE TOTAL LEAD TIME},",
				"          {PURCHASE COMMOD},",
				"          {UNIT OF MEASURE},",
				"          {RECEIPT ROUTING},",
				"          {ITEM STATUS CODE},",
				"          {ITEM TYPE},",
				"          {ITEMCATINV ITEM CATEGORY KFF},",
				"          {AVERAGE COST},",
				"          {MRP PLANNING METHOD},",
				"          {ITEMS$AGILE ITEM PART CATEGO},",
				"          {WIP SUPPLY TYPE},",
				"          {ITEMS$ITEM SETUP VERIFIED},",
				"          {ITEMS$AGILE ACCESS RESTRICTION},",
				"          {ITEMS$VMI ITEM},",
				"          {INVENTORY PLANNING METHOD CODE},",
				"          {Purchase Commod Description},",
				"          {MINIMUM ORDER QUANTITY} = select1@{MINIMUM ORDER QUANTITY},",
				"          {TARGET COST},",
				"          {Item Revision Control Flag},",
				"          {Serial Number Control Code},",
				"          {Shrinkage Rate},",
				"          {Shelf Life Code},",
				"          {Track In Installed Base},",
				"          {Lot Control Flag},",
				"          {Items$Comsec},",
				"          {Variable Lead Time},",
				"          {Serial Starting Number},",
				"          {Serial Starting Prefix},",
				"          {List Price Per Unit},",
				"          {Fixed Days Supply},",
				"          {Fixed Order Quantity},",
				"          {Minimum Order Quantity} = source2@{Minimum Order Quantity},",
				"          {Workflow Publishing Data} = {Workflow Publishing}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive({Workflow Publishing Data} = 'INGV0_ITEMS_VSAT') ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['ingv0_item_vsat_MPEARLY.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}