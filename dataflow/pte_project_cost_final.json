{
	"name": "pte_project_cost_final",
	"properties": {
		"folder": {
			"name": "pte-project-cost-final"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "pteprojectcost"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "HRData"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "MonthlyWorkingHours",
					"description": "From 2015 to 2025"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "RequisitionFile1"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "RequisitionFile2"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "GroupByReq"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "dateDimension"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "pteonhandinventory"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "POG0RECEIVINGINSPECTIONVSAT"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "pteBudgetHistory"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "pteOpenSales"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "pteatfjiraepics"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "MRPG0MRPWORKBENCHVSAT"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "WIPG0AllJobs"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_AzSql",
						"type": "DatasetReference"
					},
					"name": "PTEPROJECTLABOUR"
				},
				{
					"dataset": {
						"referenceName": "ds_AzSql",
						"type": "DatasetReference"
					},
					"name": "ONHANDFINALOUTPUT"
				},
				{
					"dataset": {
						"referenceName": "ds_AzSql",
						"type": "DatasetReference"
					},
					"name": "BUDGETHISTORYFINALOUTPUT"
				},
				{
					"dataset": {
						"referenceName": "ds_AzSql",
						"type": "DatasetReference"
					},
					"name": "OPENSALESFINALOUTPUT"
				},
				{
					"dataset": {
						"referenceName": "ds_AzSql",
						"type": "DatasetReference"
					},
					"name": "FinanceOpenCommitmentsforPTE"
				},
				{
					"dataset": {
						"referenceName": "ds_AzSql",
						"type": "DatasetReference"
					},
					"name": "PTEMRPORDERFINALOUTPUT"
				},
				{
					"dataset": {
						"referenceName": "ds_AzSql",
						"type": "DatasetReference"
					},
					"name": "PTEPROJECTCOSTSUMMARY"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "split1"
				},
				{
					"name": "select2"
				},
				{
					"name": "innerjoin1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "union1"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "filter2"
				},
				{
					"name": "filter3"
				},
				{
					"name": "Renamings"
				},
				{
					"name": "Summarise1"
				},
				{
					"name": "leftouterjoin1"
				},
				{
					"name": "select4"
				},
				{
					"name": "union2"
				},
				{
					"name": "select5"
				},
				{
					"name": "Summarise2"
				},
				{
					"name": "leftouterjoin2"
				},
				{
					"name": "select6"
				},
				{
					"name": "leftOuterjoin3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "select7"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "select8"
				},
				{
					"name": "GroupBy"
				},
				{
					"name": "RemovecntCol"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "selectSplit1"
				},
				{
					"name": "filter4"
				},
				{
					"name": "select9"
				},
				{
					"name": "RightOuterjoin1"
				},
				{
					"name": "select10"
				},
				{
					"name": "select11"
				},
				{
					"name": "POOpenCommits"
				},
				{
					"name": "Rightouterjoin2"
				},
				{
					"name": "select12"
				},
				{
					"name": "Rightouterjoin3"
				},
				{
					"name": "select13"
				},
				{
					"name": "groupby2"
				},
				{
					"name": "RemovecntCol2"
				},
				{
					"name": "innerjoin2"
				},
				{
					"name": "select14"
				},
				{
					"name": "derivedColumn7"
				},
				{
					"name": "select15"
				},
				{
					"name": "pivotExpCategory"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "innerjoin4"
				},
				{
					"name": "select16"
				},
				{
					"name": "derivedColumn8"
				},
				{
					"name": "ProjectFilter"
				},
				{
					"name": "filter5"
				},
				{
					"name": "select17"
				},
				{
					"name": "select18"
				},
				{
					"name": "derivedColumn9"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "RenamingCols"
				},
				{
					"name": "uniononhand"
				},
				{
					"name": "innerjoin5"
				},
				{
					"name": "ONHANDFINALSECLECT"
				},
				{
					"name": "selectBudgetHistory"
				},
				{
					"name": "innerjoin6"
				},
				{
					"name": "select19"
				},
				{
					"name": "selectPteOpenSales"
				},
				{
					"name": "innerjoin7"
				},
				{
					"name": "selectPtejiraEpics"
				},
				{
					"name": "LEFTjoin"
				},
				{
					"name": "PTEOPENSALESFINALSELECT"
				},
				{
					"name": "innerjoin8"
				},
				{
					"name": "derivedColumn10"
				},
				{
					"name": "select20"
				},
				{
					"name": "filter6"
				},
				{
					"name": "derivedPteMrpOrders"
				},
				{
					"name": "innerjoin9"
				},
				{
					"name": "select21"
				},
				{
					"name": "leftouterjoin5"
				},
				{
					"name": "PTEMRPORDERSFINALSELECT"
				},
				{
					"name": "Container563GroupBy1"
				},
				{
					"name": "Container563GroupBy2"
				},
				{
					"name": "Container563GroupBy3"
				},
				{
					"name": "unionAllGroupBys"
				},
				{
					"name": "FINALGROUPBY"
				},
				{
					"name": "Rightouterjoin6"
				},
				{
					"name": "select22"
				},
				{
					"name": "leftouterjoin7"
				},
				{
					"name": "FINALSELECT"
				},
				{
					"name": "container659",
					"flowlet": {
						"referenceName": "container659",
						"type": "DataFlowReference"
					}
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost',",
				"     folderPath: 'output',",
				"     fileName: 'pte_project_cost.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> pteprojectcost",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'HRData.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> HRData",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'MonthlyWorkingHours2014To2025.xlsx',",
				"     sheetName: 'Sheet1',",
				"     firstRowAsHeader: true) ~> MonthlyWorkingHours",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'RequisitionNumberFile1.xlsx',",
				"     sheetName: 'Sheet1',",
				"     firstRowAsHeader: true) ~> RequisitionFile1",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'RequisitionNumberFile2.xlsx',",
				"     sheetName: 'Sheet1',",
				"     firstRowAsHeader: true) ~> RequisitionFile2",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'GroupByReq.txt',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> GroupByReq",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'date_dimension.xlsx',",
				"     sheetName: 'Sheet1',",
				"     firstRowAsHeader: true) ~> dateDimension",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost',",
				"     folderPath: 'output',",
				"     fileName: 'pte_onhand_inventory.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> pteonhandinventory",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'POG0_RECEIVING_INSPECTION_VSAT.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> POG0RECEIVINGINSPECTIONVSAT",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost',",
				"     folderPath: 'output',",
				"     fileName: 'pte_Budget_History.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> pteBudgetHistory",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost',",
				"     folderPath: 'output',",
				"     fileName: 'pte_open_sales_orders.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> pteOpenSales",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'pteatf_jira_epics.xlsx',",
				"     sheetName: 'Sheet1',",
				"     firstRowAsHeader: true) ~> pteatfjiraepics",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'MRPG0_MRP_WORKBENCH_VSAT.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> MRPG0MRPWORKBENCHVSAT",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'wipg0_all_jobs.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> WIPG0AllJobs",
				"compose(composition: 'container659') ~> container659@(output1)",
				"pteprojectcost select(mapColumn(",
				"          PROJECT_NUMBER,",
				"          TASK_NUMBER,",
				"          TASK_NAME,",
				"          DIVISION,",
				"          EXPENDITURE_TYPE,",
				"          EXPENDITURE_CATEGORY,",
				"          EXPENDITURE_COMMENT,",
				"          ITEM_NUMBER,",
				"          ITEM_DESCRIPTION,",
				"          QUANTITY,",
				"          EXTERNAL_TRANSACTION_SOURCE,",
				"          SYSTEM_LINKAGE,",
				"          INCURRED_ORG,",
				"          PROVIDER_ORGANIZATION,",
				"          EMPLOYEE_NAME,",
				"          EMPLOYEE_ID,",
				"          PERIOD_NAME,",
				"          {GL Date} = GL_DATE,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          REGULAR_TIME,",
				"          BURDENED_COST_PC,",
				"          PROJECT_DESCRIPTION,",
				"          PROJECT_NAME,",
				"          PROJECT_STATUS,",
				"          UNIT_OF_MEASURE,",
				"          EXP_ITEM_EXTERNAL_SYS_REF,",
				"          BUDGETED_BURDENED_COST,",
				"          SEGMENT,",
				"          PRODUCT_LINE,",
				"          TEMPLATE_NUMBER,",
				"          PROJECT_COMPLETION_DATE,",
				"          PROJECT_START_DATE,",
				"          Last_Refresh",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(Last_Refresh = Last_Refresh-hours(7)) ~> derivedColumn1",
				"derivedColumn1 split(!isNull(EMPLOYEE_ID),",
				"     disjoint: false) ~> split1@(Filtered, Unfiltered)",
				"HRData select(mapColumn(",
				"          EFFECTIVE_START_DATE = ASSIGNMENT_EFFECTIVE_STRT_DATE,",
				"          EFFECTIVE_END_DATE,",
				"          EMPLOYEE_ID,",
				"          SUPERVISOR_FULL_NAME,",
				"          GLC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"split1@Filtered, select2 join(split1@Filtered@EMPLOYEE_ID == select2@EMPLOYEE_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin1",
				"select3 filter(EXPENDITURE_ENDING_DATE >= EFFECTIVE_START_DATE && EXPENDITURE_ENDING_DATE <= EFFECTIVE_END_DATE) ~> filter1",
				"filter1, split1@Unfiltered union(byName: true)~> union1",
				"innerjoin1 select(mapColumn(",
				"          PROJECT_NUMBER,",
				"          TASK_NUMBER,",
				"          TASK_NAME,",
				"          DIVISION,",
				"          EXPENDITURE_TYPE,",
				"          EXPENDITURE_CATEGORY,",
				"          EXPENDITURE_COMMENT,",
				"          ITEM_NUMBER,",
				"          ITEM_DESCRIPTION,",
				"          QUANTITY,",
				"          EXTERNAL_TRANSACTION_SOURCE,",
				"          SYSTEM_LINKAGE,",
				"          INCURRED_ORG,",
				"          PROVIDER_ORGANIZATION,",
				"          EMPLOYEE_NAME,",
				"          EMPLOYEE_ID = split1@Filtered@EMPLOYEE_ID,",
				"          PERIOD_NAME,",
				"          {GL Date},",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          REGULAR_TIME,",
				"          BURDENED_COST_PC,",
				"          PROJECT_DESCRIPTION,",
				"          PROJECT_NAME,",
				"          PROJECT_STATUS,",
				"          UNIT_OF_MEASURE,",
				"          EXP_ITEM_EXTERNAL_SYS_REF,",
				"          BUDGETED_BURDENED_COST,",
				"          SEGMENT,",
				"          PRODUCT_LINE,",
				"          TEMPLATE_NUMBER,",
				"          PROJECT_COMPLETION_DATE,",
				"          PROJECT_START_DATE,",
				"          Last_Refresh,",
				"          EFFECTIVE_START_DATE,",
				"          EFFECTIVE_END_DATE,",
				"          Right_EMPLOYEE_ID = EMPLOYEE_ID,",
				"          SUPERVISOR_FULL_NAME,",
				"          GLC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"union1 derive({GL Year Month} = toString(year(toDate({GL Date})))+'-'+toString(month(toDate({GL Date})))) ~> derivedColumn2",
				"derivedColumn2 derive({Year.Month} = left({GL Year Month}, 7)) ~> derivedColumn3",
				"derivedColumn3 filter(regexMatch(PROJECT_NUMBER,\"C\") || PROJECT_NUMBER=='I700133') ~> filter2",
				"filter2 filter(!in(['C900298','C900299','C900300','C900301'],PROJECT_NUMBER)) ~> filter3",
				"filter3 select(mapColumn(",
				"          {Project Number} = PROJECT_NUMBER,",
				"          {Task Number} = TASK_NUMBER,",
				"          {Task Name} = TASK_NAME,",
				"          Division = DIVISION,",
				"          {Exp Type} = EXPENDITURE_TYPE,",
				"          {Exp Category} = EXPENDITURE_CATEGORY,",
				"          {Exp Comment} = EXPENDITURE_COMMENT,",
				"          {Item Number} = ITEM_NUMBER,",
				"          {Item Description} = ITEM_DESCRIPTION,",
				"          Quantity = QUANTITY,",
				"          {External Transaction Source} = EXTERNAL_TRANSACTION_SOURCE,",
				"          {System Linkage} = SYSTEM_LINKAGE,",
				"          {Incurred Org} = INCURRED_ORG,",
				"          {Provider Org} = PROVIDER_ORGANIZATION,",
				"          {Employee Name} = EMPLOYEE_NAME,",
				"          {Period Name} = PERIOD_NAME,",
				"          {GL Date},",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Regular Time} = REGULAR_TIME,",
				"          {Burdened Cost} = BURDENED_COST_PC,",
				"          {Project Description} = PROJECT_DESCRIPTION,",
				"          {Project Name} = PROJECT_NAME,",
				"          PROJECT_STATUS,",
				"          {Unit of Measure} = UNIT_OF_MEASURE,",
				"          {Exp Item External Sys Ref} = EXP_ITEM_EXTERNAL_SYS_REF,",
				"          {Project Budget Cost} = BUDGETED_BURDENED_COST,",
				"          Segment = SEGMENT,",
				"          PRODUCT_LINE,",
				"          {Template Number} = TEMPLATE_NUMBER,",
				"          {Project Complete Date} = PROJECT_COMPLETION_DATE,",
				"          {Project Start Date} = PROJECT_START_DATE,",
				"          Last_Refresh,",
				"          Right_EMPLOYEE_ID,",
				"          {Supervisor Name} = SUPERVISOR_FULL_NAME,",
				"          GLC,",
				"          {GL Year Month},",
				"          {Year.Month}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Renamings",
				"Renamings aggregate(groupBy({Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name},",
				"          {GL Year Month},",
				"          {Year.Month},",
				"          {Employee Name},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Supervisor Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC),",
				"     {Regular Time} = sum({Regular Time}),",
				"          {Burdened Cost} = sum({Burdened Cost}),",
				"          Last_Refresh = max(Last_Refresh),",
				"          Count = count({Exp Item External Sys Ref})) ~> Summarise1",
				"Summarise1, MonthlyWorkingHours join({Year.Month} == Month,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouterjoin1",
				"leftouterjoin1 select(mapColumn(",
				"          {Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name},",
				"          {GL Year Month},",
				"          {Employee Name},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Supervisor Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC,",
				"          {Regular Time},",
				"          {Burdened Cost},",
				"          Last_Refresh,",
				"          Count,",
				"          {Month Hours}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"RequisitionFile1, RequisitionFile2 union(byName: true)~> union2",
				"union2 select(mapColumn(",
				"          JN,",
				"          REQUISITION_NUMBER = {Req Number}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5 aggregate(groupBy(JN),",
				"     REQUISITION_NUMBER = max(REQUISITION_NUMBER)) ~> Summarise2",
				"select4, Summarise2 join({Project Number} == JN,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouterjoin2",
				"leftouterjoin2 select(mapColumn(",
				"          {Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name},",
				"          {GL Year Month},",
				"          {Employee Name},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Supervisor Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC,",
				"          {Regular Time},",
				"          {Burdened Cost},",
				"          Last_Refresh,",
				"          Count,",
				"          {Month Hours},",
				"          REQUISITION_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select6, GroupByReq join({Project Description} == ITEM_DESCRIPTION,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftOuterjoin3",
				"select7 derive(REQUISITION_NUMBER = iif(isNull(REQ_FROM_ITEM),REQ_FROM_ITEM,REQ_FROM_ITEM),",
				"          REQ_BY_DESCRIPTION = iif(regexMatch(upper({Project Description}),\"REQ-\"),\r",
				"trim(upper(\r",
				"left({Project Description}, instr({Project Description}, \"_\")-1)\r",
				"),\"REQ-\"),toString(null()))) ~> derivedColumn4",
				"leftOuterjoin3 select(mapColumn(",
				"          {Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name},",
				"          {GL Year Month},",
				"          {Employee Name},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Supervisor Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC,",
				"          {Regular Time},",
				"          {Burdened Cost},",
				"          Last_Refresh,",
				"          Count,",
				"          {Month Hours},",
				"          REQ_FROM_ITEM = REQUISITION_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"derivedColumn4 derive(REQUISITION_NUMBER = iif(isNull(REQUISITION_NUMBER),REQ_BY_DESCRIPTION,REQUISITION_NUMBER),",
				"          {PTE Overhead} = iif(in(['I700133'],{Project Number}),'Yes','No'),",
				"          {Risk Accrual} = iif(in(['C203565'],{Project Number}),'Yes','No')) ~> derivedColumn5",
				"dateDimension select(mapColumn(",
				"          MonthName,",
				"          Year,",
				"          FiscalQuarter,",
				"          FiscalYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"select8 aggregate(groupBy(FiscalQuarter,",
				"          MonthName,",
				"          Year,",
				"          FiscalYear),",
				"     cnt = count()) ~> GroupBy",
				"GroupBy select(mapColumn(",
				"          MonthName,",
				"          Year,",
				"          FiscalQuarter,",
				"          FiscalYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemovecntCol",
				"RemovecntCol derive({Period Name} = upper(left(MonthName,3))+'-'+right(toString(Year),2)) ~> derivedColumn6",
				"derivedColumn5 select(mapColumn(",
				"          {Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name},",
				"          {GL Year Month},",
				"          {Employee Name},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Supervisor Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC,",
				"          {Regular Time},",
				"          {Burdened Cost},",
				"          Last_Refresh,",
				"          Count,",
				"          {Month Hours},",
				"          REQUISITION_NUMBER,",
				"          {PTE Overhead},",
				"          {Risk Accrual}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSplit1",
				"selectSplit1 filter(!isNull({Employee Name})) ~> filter4",
				"filter4 select(mapColumn(",
				"          {Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name},",
				"          {GL Year Month},",
				"          {Employee Name},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Supervisor Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC,",
				"          {Regular Time},",
				"          Last_Refresh,",
				"          Count,",
				"          {Month Hours},",
				"          REQUISITION_NUMBER,",
				"          {PTE Overhead},",
				"          {Risk Accrual}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select9",
				"derivedColumn6, select9 join(derivedColumn6@{Period Name} == select9@{Period Name},",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> RightOuterjoin1",
				"RightOuterjoin1 select(mapColumn(",
				"          MonthName,",
				"          Year,",
				"          FiscalQuarter,",
				"          FiscalYear,",
				"          {Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name} = select9@{Period Name},",
				"          {GL Year Month},",
				"          {Employee Name},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Supervisor Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC,",
				"          {Regular Time},",
				"          Last_Refresh,",
				"          Count,",
				"          {Month Hours},",
				"          REQUISITION_NUMBER,",
				"          {PTE Overhead},",
				"          {Risk Accrual}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"selectSplit1 select(mapColumn(",
				"          {Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name},",
				"          {GL Year Month},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC,",
				"          {Regular Time},",
				"          {Burdened Cost},",
				"          Last_Refresh,",
				"          Count,",
				"          {Month Hours},",
				"          REQUISITION_NUMBER,",
				"          {PTE Overhead},",
				"          {Risk Accrual}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select11",
				"container659@output1 aggregate(groupBy(Project),",
				"     {Sum_Billed Amt} = sum({Billed Amt}),",
				"          {Sum_Unbilled Amt} = sum({Unbilled Amt}),",
				"          {Sum_Ordered Amt} = sum({Ordered Amt})) ~> POOpenCommits",
				"POOpenCommits, select11 join(Project == {Project Number},",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Rightouterjoin2",
				"Rightouterjoin2 select(mapColumn(",
				"          {PO Commit Billed Amt} = {Sum_Billed Amt},",
				"          {PO Commit Unbilled Amt} = {Sum_Unbilled Amt},",
				"          {PO Commit Ordered Amt} = {Sum_Ordered Amt},",
				"          {Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name},",
				"          {GL Year Month},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC,",
				"          {Regular Time},",
				"          {Burdened Cost},",
				"          Last_Refresh,",
				"          Count,",
				"          {Month Hours},",
				"          REQUISITION_NUMBER,",
				"          {PTE Overhead},",
				"          {Risk Accrual}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select12",
				"derivedColumn6, select12 join(derivedColumn6@{Period Name} == select12@{Period Name},",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Rightouterjoin3",
				"dateDimension select(mapColumn(",
				"          Date,",
				"          {PC FiscalQuarter} = FiscalQuarter,",
				"          {PC FiscalYear} = FiscalYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select13",
				"select13 aggregate(groupBy(Date,",
				"          {PC FiscalQuarter},",
				"          {PC FiscalYear}),",
				"     cnt = count()) ~> groupby2",
				"groupby2 select(mapColumn(",
				"          Date,",
				"          {PC FiscalQuarter},",
				"          {PC FiscalYear}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemovecntCol2",
				"RemovecntCol2, Rightouterjoin3 join(Date == toDate({Project Complete Date}),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin2",
				"innerjoin2 select(mapColumn(",
				"          {PC FiscalQuarter},",
				"          {PC FiscalYear},",
				"          MonthName,",
				"          Year,",
				"          FiscalQuarter,",
				"          FiscalYear,",
				"          {Period Name} = derivedColumn6@{Period Name},",
				"          {PO Commit Billed Amt},",
				"          {PO Commit Unbilled Amt},",
				"          {PO Commit Ordered Amt},",
				"          {Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name} = select12@{Period Name},",
				"          {GL Year Month},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC,",
				"          {Regular Time},",
				"          {Burdened Cost},",
				"          Last_Refresh,",
				"          Count,",
				"          {Month Hours},",
				"          REQUISITION_NUMBER,",
				"          {PTE Overhead},",
				"          {Risk Accrual}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select14",
				"select14 derive({Regular Time} = iif({System Linkage} !=\"Supplier Invoices\",iif(in([\"Eng Intern Labor\",\"Labor\",\"Temp Labor\"],{Exp Category}),{Regular Time},toDouble(0)),toDouble(0)),",
				"          {Exp Category (new)} = iif({Exp Category} == \"Eng Intern Labor\",\"Labor\",\r",
				"iif({Exp Category}== \"Temp Labor\",\"Labor\",\r",
				"iif({Exp Category}== \"Subcon\",\"Labor\",\r",
				"iif({Exp Category}== \"Fringe\",\"Labor\",\r",
				"iif({Exp Category}== \"Mfg Xfer\",\"Materials\",\r",
				"\r",
				"iif({Exp Category}== \"Burden\",\r",
				"iif({Exp Type}== \"Eng Overhead\",\"Labor\",\r",
				"iif({Exp Type}== \"Eng Ovhd Depr\",\"Labor\", \r",
				"iif({Exp Type}== \"Mfg Overhead\",\"Materials\", \r",
				"iif({Exp Type}==\"Ops Overhead\",\"Labor\", \r",
				"iif({Exp Type}== \"Ops Ovhd Depr\",\"Labor\", \r",
				"iif({Exp Type}== \"Mtl Overhead\",\"Materials\", \r",
				"iif({Exp Type}== \"Mtl Ovhd Depr\",\"Materials\", \r",
				"                    {Exp Type}))))))),\r",
				"iif({Exp Category}== \"Materials\",iif({Exp Type}== \"Capitalized Interest\",\"Capitalized Interest\",\r",
				"                 {Exp Category}),{Exp Category}))))))),",
				"          {Burdened Cost} = iif(!in([\"CIP Accrual\",\"Capitalized Interest\"],{Exp Type}),{Burdened Cost},toDouble(0))) ~> derivedColumn7",
				"derivedColumn7 select(mapColumn(",
				"          {PO Commit Unbilled Amt},",
				"          {Project Number},",
				"          {Project Name},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          {Template Number},",
				"          Segment,",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          {Regular Time},",
				"          {Burdened Cost},",
				"          REQUISITION_NUMBER,",
				"          {PTE Overhead},",
				"          {Risk Accrual},",
				"          {Exp Category (new)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select15",
				"select15 pivot(groupBy({PO Commit Unbilled Amt},",
				"          {Project Number},",
				"          {Project Name},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          {Template Number},",
				"          Segment,",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          {Burdened Cost},",
				"          REQUISITION_NUMBER,",
				"          {PTE Overhead},",
				"          {Risk Accrual}),",
				"     pivotBy({Exp Category (new)}),",
				"     {} = sum({Burdened Cost}),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotExpCategory",
				"MapDrifted1 aggregate(groupBy({Project Number},",
				"          {Project Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          PROJECT_STATUS,",
				"          REQUISITION_NUMBER,",
				"          Segment,",
				"          PRODUCT_LINE,",
				"          {PTE Overhead},",
				"          {Risk Accrual}),",
				"     {Labor Cost} = sum(Labor),",
				"          {Material Cost} = sum(Materials),",
				"          {ODC Cost} = sum(ODC)) ~> aggregate1",
				"select15 aggregate(groupBy({Project Number}),",
				"     {Regular Time} = sum({Regular Time}),",
				"          {Burdened Cost} = max({Burdened Cost}),",
				"          {PO Commit Unbilled Amt} = max({PO Commit Unbilled Amt})) ~> aggregate2",
				"pivotExpCategory derive({Capitalized Interest} = toDouble(byName('Capitalized Interest')),",
				"          Labor = toDouble(byName('Labor')),",
				"          Materials = toDouble(byName('Materials')),",
				"          ODC = toDouble(byName('ODC'))) ~> MapDrifted1",
				"aggregate1, aggregate2 join(aggregate1@{Project Number} == aggregate2@{Project Number},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin4",
				"innerjoin4 select(mapColumn(",
				"          {Project Number} = aggregate1@{Project Number},",
				"          {Project Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          PROJECT_STATUS,",
				"          REQUISITION_NUMBER,",
				"          Segment,",
				"          PRODUCT_LINE,",
				"          {PTE Overhead},",
				"          {Risk Accrual},",
				"          {Labor Cost},",
				"          {Material Cost},",
				"          {ODC Cost},",
				"          {Regular Time},",
				"          {Project Burdened Cost} = {Burdened Cost},",
				"          {PO Commit Unbilled Amt}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select16",
				"select16 derive({Burdened Cost} = {Material Cost}+{ODC Cost}+{Labor Cost}) ~> derivedColumn8",
				"select14 aggregate(groupBy({Project Number}),",
				"     PRODUCT_LINE = max(PRODUCT_LINE),",
				"          PROJECT_STATUS = max(PROJECT_STATUS),",
				"          {Template Number} = max({Template Number}),",
				"          REQUISITION_NUMBER = max(REQUISITION_NUMBER),",
				"          {Project Start Date} = max({Project Start Date}),",
				"          {Project Complete Date} = max({Project Complete Date}),",
				"          Segment = max(Segment),",
				"          {Project Description} = max({Project Description}),",
				"          Division = max(Division),",
				"          {Project Name} = max({Project Name}),",
				"          {PTE Overhead} = max({PTE Overhead})) ~> ProjectFilter",
				"pteonhandinventory filter({PROJECT_NUM} != \"S000143\") ~> filter5",
				"filter5 select(mapColumn(",
				"          PROJECT_NUM,",
				"          ORGANIZATION_CODE,",
				"          SUBINVENTORY_CODE,",
				"          LOCATOR,",
				"          ITEM_NUM,",
				"          ITEM_DESCRIPTION,",
				"          PRIMARY_UNIT_OF_MEASURE,",
				"          ONHAND_QTY,",
				"          ITEM_COST,",
				"          EXTENDED_COST,",
				"          ITEM_STATUS,",
				"          ITEM_STATUS_CODE,",
				"          PROJ_MGR,",
				"          LOT_CREATION_DATE,",
				"          ITEM_TYPE,",
				"          COST_GROUP,",
				"          ORIG_DATE_RECEIVED",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select17",
				"POG0RECEIVINGINSPECTIONVSAT select(mapColumn(",
				"          {Destination Organization Code} = DESTINATION_ORGANIZATION_CODE,",
				"          {Inspection Status Code} = INSPECTION_STATUS_CODE,",
				"          {Item$Sv$Part Number} = {ITEM$SV$PART_NUMBER},",
				"          {Item Description} = ITEM_DESCRIPTION,",
				"          Project = PROJECT,",
				"          Quantity = QUANTITY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select18",
				"select18 derive(LOCATOR = 'Receiving Inspection - ' + {Inspection Status Code}) ~> derivedColumn9",
				"derivedColumn9 aggregate(groupBy(Project,",
				"          {Item$Sv$Part Number},",
				"          {Destination Organization Code},",
				"          {Item Description}),",
				"     ONHAND_QTY = sum(Quantity)) ~> aggregate3",
				"aggregate3 select(mapColumn(",
				"          PROJECT_NUM = Project,",
				"          ITEM_NUM = {Item$Sv$Part Number},",
				"          ORGANIZATION_CODE = {Destination Organization Code},",
				"          ITEM_DESCRIPTION = {Item Description},",
				"          ONHAND_QTY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamingCols",
				"select17, RenamingCols union(byName: true)~> uniononhand",
				"ProjectFilter, uniononhand join({Project Number} == PROJECT_NUM,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin5",
				"innerjoin5 select(mapColumn(",
				"          {Project Number},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          {Template Number},",
				"          REQUISITION_NUMBER,",
				"          {Project Start Date},",
				"          {Project Complete Date},",
				"          Segment,",
				"          {Project Description},",
				"          Division,",
				"          {Project Name},",
				"          {PTE Overhead},",
				"          ORGANIZATION_CODE,",
				"          SUBINVENTORY_CODE,",
				"          LOCATOR,",
				"          ITEM_NUM,",
				"          ITEM_DESCRIPTION,",
				"          PRIMARY_UNIT_OF_MEASURE,",
				"          ONHAND_QTY,",
				"          ITEM_COST,",
				"          EXTENDED_COST,",
				"          ITEM_STATUS,",
				"          ITEM_STATUS_CODE,",
				"          PROJ_MGR,",
				"          LOT_CREATION_DATE,",
				"          ITEM_TYPE,",
				"          COST_GROUP,",
				"          ORIG_DATE_RECEIVED",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ONHANDFINALSECLECT",
				"pteBudgetHistory select(mapColumn(",
				"          PROJECT_NUMBER,",
				"          CURRENT_VERSION_FLAG,",
				"          BUDGET_VERSION_NUMBER,",
				"          BUDGET_VERSION_NAME,",
				"          BUDGETED_BURDENED_COST,",
				"          CURRENT_ORIGINAL_VERSION_FLAG,",
				"          BUDGET_BASELINE_DATE,",
				"          BUDGET_STATUS,",
				"          BUDGET_TYPE,",
				"          BUDGET_VERSION_DESCRIPTION,",
				"          PROJECT_MANAGER_NAME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectBudgetHistory",
				"ProjectFilter, selectBudgetHistory join({Project Number} == PROJECT_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin6",
				"innerjoin6 select(mapColumn(",
				"          {Project Number},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          {Template Number},",
				"          REQUISITION_NUMBER,",
				"          {Project Start Date},",
				"          {Project Complete Date},",
				"          Segment,",
				"          {Project Description},",
				"          Division,",
				"          {Project Name},",
				"          {PTE Overhead},",
				"          CURRENT_VERSION_FLAG,",
				"          BUDGET_VERSION_NUMBER,",
				"          BUDGET_VERSION_NAME,",
				"          BUDGETED_BURDENED_COST,",
				"          CURRENT_ORIGINAL_VERSION_FLAG,",
				"          BUDGET_BASELINE_DATE,",
				"          BUDGET_STATUS,",
				"          BUDGET_TYPE,",
				"          BUDGET_VERSION_DESCRIPTION,",
				"          PROJECT_MANAGER_NAME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select19",
				"pteOpenSales select(mapColumn(",
				"          PROJECT_NUMBER = PROJECT_NUMBEr,",
				"          ORDER_STATUS,",
				"          ITEM_NUMBER,",
				"          ITEM_DESCRIPTION,",
				"          ORDER_NUMBER,",
				"          LINE_NUMBER,",
				"          LINE_QUANTITY,",
				"          OPEN_LINE_QUANTITY,",
				"          CUSTOMER_PO_NUMBER,",
				"          PROMISED_DATE,",
				"          LINE_CATEGORY_CODE,",
				"          HEADER_SHIP_FROM_ORG,",
				"          OM_OR_PC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectPteOpenSales",
				"ProjectFilter, selectPteOpenSales join({Project Number} == PROJECT_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin7",
				"pteatfjiraepics select(mapColumn(",
				"          jn,",
				"          {Epic Link} = key,",
				"          {Jira Status} = status,",
				"          ticket",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectPtejiraEpics",
				"innerjoin7, selectPtejiraEpics join({Project Number} == jn,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LEFTjoin",
				"LEFTjoin select(mapColumn(",
				"          {Project Number},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          {Template Number},",
				"          REQUISITION_NUMBER,",
				"          {Project Start Date},",
				"          {Project Complete Date},",
				"          Segment,",
				"          {Project Description},",
				"          Division,",
				"          {Project Name},",
				"          {PTE Overhead},",
				"          ORDER_STATUS,",
				"          ITEM_NUMBER,",
				"          ITEM_DESCRIPTION,",
				"          ORDER_NUMBER,",
				"          LINE_NUMBER,",
				"          LINE_QUANTITY,",
				"          OPEN_LINE_QUANTITY,",
				"          CUSTOMER_PO_NUMBER,",
				"          PROMISED_DATE,",
				"          LINE_CATEGORY_CODE,",
				"          HEADER_SHIP_FROM_ORG,",
				"          OM_OR_PC,",
				"          {Epic Link},",
				"          {Jira Status},",
				"          ticket",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PTEOPENSALESFINALSELECT",
				"ProjectFilter, container659@output1 join({Project Number} == Project,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin8",
				"innerjoin8 derive({Workflow Publishing Data} = \"pte_project_cost_final\") ~> derivedColumn10",
				"MRPG0MRPWORKBENCHVSAT select(mapColumn(",
				"          {Item Description} = ITEM_DESCRIPTION,",
				"          {Item Number} = ITEM_NUMBER,",
				"          {Make Buy Code} = MAKE_BUY_CODE,",
				"          {Mrp Action} = MRP_ACTION,",
				"          {Order Number} = ORDER_NUMBER,",
				"          {Order Type} = ORDER_TYPE,",
				"          {Oraganization Code} = ORGANIZATION_CODE,",
				"          {Project Num} = PROJECT_NUM,",
				"          {Quantity Rate} = QUANTITY_RATE,",
				"          {Sugg Due Date} = SUGG_DUE_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select20",
				"select20 filter({Mrp Action} == \"Demand\") ~> filter6",
				"filter6 derive(Quantity = abs({Quantity Rate})) ~> derivedPteMrpOrders",
				"ProjectFilter, derivedPteMrpOrders join({Project Number} == {Project Num},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin9",
				"innerjoin9 select(mapColumn(",
				"          {Project Number},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          {Template Number},",
				"          REQUISITION_NUMBER,",
				"          {Project Start Date},",
				"          {Project Complete Date},",
				"          Segment,",
				"          {Project Description},",
				"          Division,",
				"          {Project Name},",
				"          {PTE Overhead},",
				"          {Item Description},",
				"          {Item Number},",
				"          {Make Buy Code},",
				"          {Mrp Action},",
				"          {Order Number},",
				"          {Order Type},",
				"          {Oraganization Code},",
				"          {Quantity Rate},",
				"          {Sugg Due Date},",
				"          Quantity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select21",
				"select21, selectPtejiraEpics join({Project Number} == jn,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouterjoin5",
				"leftouterjoin5 select(mapColumn(",
				"          {Project Number},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          {Template Number},",
				"          REQUISITION_NUMBER,",
				"          {Project Start Date},",
				"          {Project Complete Date},",
				"          Segment,",
				"          {Project Description},",
				"          Division,",
				"          {Project Name},",
				"          {PTE Overhead},",
				"          {Item Description},",
				"          {Item Number},",
				"          {Make Buy Code},",
				"          {Mrp Action},",
				"          {Order Number},",
				"          {Order Type},",
				"          {Oraganization Code},",
				"          {Quantity Rate},",
				"          {Sugg Due Date},",
				"          Quantity,",
				"          {Epic Link},",
				"          {Jira Status},",
				"          ticket",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PTEMRPORDERSFINALSELECT",
				"innerjoin7 aggregate(groupBy({Project Number}),",
				"     {Total Open Sales Orders} = count(ORDER_NUMBER)) ~> Container563GroupBy1",
				"select21 aggregate(groupBy({Project Number}),",
				"     {Total MRP Demand} = sum(Quantity)) ~> Container563GroupBy2",
				"ONHANDFINALSECLECT aggregate(groupBy({Project Number}),",
				"     {Total Onhand Qty} = sum(ONHAND_QTY)) ~> Container563GroupBy3",
				"Container563GroupBy1, Container563GroupBy2, Container563GroupBy3 union(byName: true)~> unionAllGroupBys",
				"unionAllGroupBys aggregate(groupBy({Project Number}),",
				"     {Total Open Sales Orders} = max({Total Open Sales Orders}),",
				"          {Total MRP Demand} = max({Total MRP Demand}),",
				"          {Total Onhand Qty} = max({Total Onhand Qty})) ~> FINALGROUPBY",
				"FINALGROUPBY, derivedColumn8 join(FINALGROUPBY@{Project Number} == select16@{Project Number},",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Rightouterjoin6",
				"Rightouterjoin6 select(mapColumn(",
				"          {Total Open Sales Orders},",
				"          {Total MRP Demand},",
				"          {Total Onhand Qty},",
				"          {Project Number} = select16@{Project Number},",
				"          {Project Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          PROJECT_STATUS,",
				"          REQUISITION_NUMBER,",
				"          Segment,",
				"          PRODUCT_LINE,",
				"          {PTE Overhead},",
				"          {Risk Accrual},",
				"          {Labor Cost},",
				"          {Material Cost},",
				"          {ODC Cost},",
				"          {Regular Time},",
				"          {Project Burdened Cost},",
				"          {PO Commit Unbilled Amt},",
				"          {Burdened Cost}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select22",
				"select22, selectPtejiraEpics join({Project Number} == jn,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouterjoin7",
				"leftouterjoin7 select(mapColumn(",
				"          {Total Open Sales Orders},",
				"          {Total MRP Demand},",
				"          {Total Onhand Qty},",
				"          {Project Number},",
				"          {Project Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          PROJECT_STATUS,",
				"          REQUISITION_NUMBER,",
				"          Segment,",
				"          PRODUCT_LINE,",
				"          {PTE Overhead},",
				"          {Risk Accrual},",
				"          {Labor Cost},",
				"          {Material Cost},",
				"          {ODC Cost},",
				"          {Regular Time},",
				"          {Project Burdened Cost},",
				"          {PO Commit Unbilled Amt},",
				"          {Burdened Cost},",
				"          {Epic Link},",
				"          {Jira Status},",
				"          ticket",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FINALSELECT",
				"select11 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['TableauOutput.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> sink1",
				"select10 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> PTEPROJECTLABOUR",
				"ONHANDFINALSECLECT sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> ONHANDFINALOUTPUT",
				"select19 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> BUDGETHISTORYFINALOUTPUT",
				"PTEOPENSALESFINALSELECT sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> OPENSALESFINALOUTPUT",
				"derivedColumn10 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> FinanceOpenCommitmentsforPTE",
				"PTEMRPORDERSFINALSELECT sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> PTEMRPORDERFINALOUTPUT",
				"FINALSELECT sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> PTEPROJECTCOSTSUMMARY"
			]
		}
	}
}