{
	"name": "DF_MRP_Queries Included",
	"properties": {
		"description": "Queries Included",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source5"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source6"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source7"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source8"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source9"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source10"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source11"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source12"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "SOURCESELECT"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source14"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source13"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "select205"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "select438"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source15"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_csv_output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "union1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "sort1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "window1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "select4"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "select5"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "select6"
				},
				{
					"name": "select7"
				},
				{
					"name": "join1"
				},
				{
					"name": "select8"
				},
				{
					"name": "select9"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "select10"
				},
				{
					"name": "derivedColumn7"
				},
				{
					"name": "select11"
				},
				{
					"name": "derivedColumn8"
				},
				{
					"name": "join2"
				},
				{
					"name": "select12"
				},
				{
					"name": "select14"
				},
				{
					"name": "join3"
				},
				{
					"name": "filter2"
				},
				{
					"name": "select15"
				},
				{
					"name": "join4"
				},
				{
					"name": "select16"
				},
				{
					"name": "window2"
				},
				{
					"name": "filter3"
				},
				{
					"name": "derivedColumn9"
				},
				{
					"name": "sort2"
				},
				{
					"name": "derivedColumn10"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "derivedColumn11"
				},
				{
					"name": "select17"
				},
				{
					"name": "union2"
				},
				{
					"name": "select206"
				},
				{
					"name": "filter4"
				},
				{
					"name": "select207"
				},
				{
					"name": "select208"
				},
				{
					"name": "derivedColumn12"
				},
				{
					"name": "join5"
				},
				{
					"name": "select439"
				},
				{
					"name": "aggregate5"
				},
				{
					"name": "select440"
				},
				{
					"name": "select441"
				},
				{
					"name": "filter5"
				},
				{
					"name": "select442"
				},
				{
					"name": "join6"
				},
				{
					"name": "select443"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source5",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source6",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source7",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source8",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source9",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source10",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source11",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source12",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SOURCESELECT",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source14",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source13",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> select205",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> select438",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source15",
				"source1 select(mapColumn(",
				"          {Org Code},",
				"          Assembly,",
				"          Path,",
				"          Component,",
				"          Level,",
				"          QPA,",
				"          {Extended Quantity}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(!isNull(Assembly)) ~> filter1",
				"filter1 aggregate(groupBy({Org Code}),",
				"     each(match(name!='Org Code'), $$ = first($$))) ~> aggregate1",
				"select3, select2 union(byName: true)~> union1",
				"aggregate1 derive(Component = Assembly,",
				"          Level = 0,",
				"          Path = Component) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          {Org Code},",
				"          Assembly,",
				"          Path,",
				"          Component,",
				"          Level,",
				"          QPA,",
				"          {Extended Quantity}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"filter1 select(mapColumn(",
				"          {Org Code},",
				"          Assembly,",
				"          Path,",
				"          Component,",
				"          Level,",
				"          QPA,",
				"          {Extended Quantity}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"union1 sort(asc(Assembly, true),",
				"     asc(Path, true)) ~> sort1",
				"sort1 derive(Path = concatWS(' ',Assembly, Path)) ~> derivedColumn2",
				"derivedColumn2 window(RecordID = rowNumber()) ~> window1",
				"window1 derive(field1 = '||',",
				"          field2 = '|') ~> derivedColumn3",
				"derivedColumn3 derive(Path = replace(Path,toString(field1),toString(field2))) ~> derivedColumn4",
				"select4 derive(field1 = '|',",
				"          field2 = '|') ~> derivedColumn5",
				"derivedColumn4 select(mapColumn(",
				"          {Org Code},",
				"          Assembly,",
				"          Path,",
				"          Component,",
				"          Level,",
				"          QPA,",
				"          {Extended Quantity},",
				"          RecordID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"derivedColumn5 derive(Path = replace(Path,toString(field1),toString(field2))) ~> derivedColumn6",
				"source2 select(mapColumn(",
				"          Assembly = ASSEMBLY,",
				"          Component = COMPONENT,",
				"          {Hold Attribute} = ATTRIBUTE1,",
				"          ORGANIZATION_CODE,",
				"          {BOM Notes} = COMPONENT_REMARKS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5 aggregate(groupBy(Assembly),",
				"     each(match(name!='Assembly'), $$ = first($$))) ~> aggregate2",
				"source3 select(mapColumn(",
				"          each(match(true()),",
				"               initCap(replace(toString($$),\"_\",\" \")) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select6 select(mapColumn(",
				"          {Organization Code},",
				"          {Item Number},",
				"          {Item Description},",
				"          {Item Creation Date},",
				"          {Planning Make Buy Code},",
				"          {Buyer Name},",
				"          {Planner Code},",
				"          {Preprocessing Lead Time},",
				"          {Processing Lead Time},",
				"          {Postprocessing Lead Time},",
				"          {Fixed Lead Time},",
				"          {Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time},",
				"          {Purchase Commod},",
				"          {Unit Of Measure},",
				"          {Receipt Routing},",
				"          {Item Status Code},",
				"          {Item Type},",
				"          {Itemcatinv Item Category Kff},",
				"          {Average Cost},",
				"          {Mrp Planning Method},",
				"          {Items$agile Item  Part  Catego},",
				"          {Wip Supply Type},",
				"          {Items$item Setup Verified},",
				"          {Items$agile Access Restriction},",
				"          {Items$vmi Item},",
				"          {Inventory Planning Method Code},",
				"          {Purchase Commod Description} = {Itemcatpur Category Desc},",
				"          {Minimum Order Quantity},",
				"          {Items$end Of Life Buy},",
				"          {Target Cost}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"select7, select8 join(ORGANIZATION_CODE == select8@{Organization Code}",
				"     && ITEM_NUMBER == select8@{Item Number},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"source4 select(mapColumn(",
				"          {Item Number},",
				"          {Item Revision Control Flag},",
				"          {Items$Comsec},",
				"          {List Price Per Unit},",
				"          {Lot Control Flag},",
				"          {Organization Code},",
				"          {Serial Number Control Code},",
				"          {Serial Starting Number},",
				"          {Serial Starting Prefix},",
				"          {Shelf Life Code},",
				"          {Shrinkage Rate},",
				"          {Track In Installed Base},",
				"          {Variable Lead Time},",
				"          {Workflow Publishing Data},",
				"          {Fixed Days Supply},",
				"          {Fixed Order Quantity},",
				"          {Minimum Order Quantity}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"join1 select(mapColumn(",
				"          ORGANIZATION_CODE,",
				"          ITEM_NUMBER,",
				"          ITEM_DESCRIPTION,",
				"          ITEM_CREATION_DATE,",
				"          PLANNING_MAKE_BUY_CODE,",
				"          BUYER_NAME,",
				"          PLANNER_CODE,",
				"          PREPROCESSING_LEAD_TIME,",
				"          PROCESSING_LEAD_TIME,",
				"          POSTPROCESSING_LEAD_TIME,",
				"          FIXED_LEAD_TIME,",
				"          CUM_MANUFACTURING_LEAD_TIME,",
				"          CUMULATIVE_TOTAL_LEAD_TIME,",
				"          PURCHASE_COMMOD,",
				"          UNIT_OF_MEASURE,",
				"          RECEIPT_ROUTING,",
				"          ITEM_STATUS_CODE,",
				"          ITEM_TYPE,",
				"          ITEMCATINV_ITEM_CATEGORY_KFF,",
				"          AVERAGE_COST,",
				"          MRP_PLANNING_METHOD,",
				"          {ITEMS$AGILE_ITEM__PART__CATEGO},",
				"          WIP_SUPPLY_TYPE,",
				"          {ITEMS$ITEM_SETUP_VERIFIED},",
				"          {ITEMS$AGILE_ACCESS_RESTRICTION},",
				"          {ITEMS$VMI_ITEM},",
				"          INVENTORY_PLANNING_METHOD_CODE,",
				"          {Purchase Commod Description},",
				"          MINIMUM_ORDER_QUANTITY,",
				"          {ITEMS$END_OF_LIFE_BUY},",
				"          TARGET_COST,",
				"          {Item Number},",
				"          {Item Revision Control Flag},",
				"          {Items$Comsec},",
				"          {List Price Per Unit},",
				"          {Lot Control Flag},",
				"          {Organization Code},",
				"          {Serial Number Control Code},",
				"          {Serial Starting Number},",
				"          {Serial Starting Prefix},",
				"          {Shelf Life Code},",
				"          {Shrinkage Rate},",
				"          {Track In Installed Base},",
				"          {Variable Lead Time},",
				"          {Workflow Publishing Data},",
				"          {Fixed Days Supply},",
				"          {Fixed Order Quantity},",
				"          {Minimum Order Quantity}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select9",
				"select9 aggregate(groupBy({Purchase Commod Description},",
				"          PURCHASE_COMMOD),",
				"     count = count(ORGANIZATION_CODE)) ~> aggregate3",
				"source5 select(mapColumn(",
				"          each(match(true()),",
				"               upper($$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"derivedColumn6 derive(Level1 = split(Path,'|')[1],",
				"          Level2 = split(Path,'|')[2],",
				"          Level3 = split(Path,'|')[3],",
				"          Level4 = split(Path,'|')[4],",
				"          Level5 = split(Path,'|')[5],",
				"          Level6 = split(Path,'|')[6],",
				"          Level7 = split(Path,'|')[7],",
				"          Level8 = split(Path,'|')[8],",
				"          Level9 = split(Path,'|')[9],",
				"          Level10 = split(Path,'|')[10],",
				"          Level11 = split(Path,'|')[11],",
				"          Level12 = split(Path,'|')[12],",
				"          Level13 = split(Path,'|')[13],",
				"          Level14 = split(Path,'|')[14],",
				"          Level15 = split(Path,'|')[15],",
				"          Level16 = split(Path,'|')[16],",
				"          Level17 = split(Path,'|')[17],",
				"          Level18 = split(Path,'|')[18],",
				"          Level19 = split(Path,'|')[19],",
				"          Level20 = split(Path,'|')[20]) ~> derivedColumn7",
				"derivedColumn7 select(mapColumn(",
				"          each(match(true()),",
				"               trim($$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select11",
				"select11 derive({Using Assembly} = iif (Level==0 , Component,\r",
				"iif (Level==1 , Level1,\r",
				"iif (Level==2 , Level2,\r",
				"iif (Level==3 , Level3,\r",
				"iif (Level==4 , Level4,\r",
				"iif (Level==5 , Level5,\r",
				"iif (Level==6 , Level6,\r",
				"iif (Level==7 , Level7,\r",
				"iif (Level==8 , Level8,'-')))))))))) ~> derivedColumn8",
				"derivedColumn8, aggregate2 join({Using Assembly} == aggregate2@Assembly",
				"     && select11@Component == aggregate2@Component",
				"     && {Org Code} == ORGANIZATION_CODE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          {Org Code},",
				"          Assembly = select11@Assembly,",
				"          Path,",
				"          Component,",
				"          Level,",
				"          QPA,",
				"          {Extended Quantity},",
				"          RecordID,",
				"          field1,",
				"          field2,",
				"          Level1,",
				"          Level2,",
				"          Level3,",
				"          Level4,",
				"          Level5,",
				"          Level6,",
				"          Level7,",
				"          Level8,",
				"          Level9,",
				"          Level10,",
				"          Level11,",
				"          Level12,",
				"          Level13,",
				"          Level14,",
				"          Level15,",
				"          Level16,",
				"          Level17,",
				"          Level18,",
				"          Level19,",
				"          Level20,",
				"          {Using Assembly},",
				"          Assembly,",
				"          Component = aggregate2@Component,",
				"          {Hold Attribute},",
				"          ORGANIZATION_CODE,",
				"          {BOM Notes}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select12",
				"select12 select(mapColumn(",
				"          {Org Code},",
				"          Assembly,",
				"          Path,",
				"          Component,",
				"          Level,",
				"          QPA,",
				"          {Extended Quantity},",
				"          RecordID,",
				"          {Using Assembly},",
				"          {Hold Attribute},",
				"          {BOM Notes}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select14",
				"select12, select15 join(Component == {Item Number}",
				"     && {Org Code} == {Org     },",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"select9 filter(regexMatch(ITEM_TYPE,'reference_item')) ~> filter2",
				"filter2 select(mapColumn(",
				"          {Org     } = ORGANIZATION_CODE,",
				"          ITEM_DESCRIPTION,",
				"          ITEM_CREATION_DATE,",
				"          {Make/Buy} = PLANNING_MAKE_BUY_CODE,",
				"          {Item Buyer Name} = BUYER_NAME,",
				"          PLANNER_CODE,",
				"          PREPROCESSING_LEAD_TIME,",
				"          PROCESSING_LEAD_TIME,",
				"          POSTPROCESSING_LEAD_TIME,",
				"          FIXED_LEAD_TIME,",
				"          CUM_MANUFACTURING_LEAD_TIME,",
				"          CUMULATIVE_TOTAL_LEAD_TIME,",
				"          PURCHASE_COMMOD,",
				"          RECEIPT_ROUTING,",
				"          ITEM_TYPE,",
				"          {Item Avg Cost} = AVERAGE_COST,",
				"          MRP_PLANNING_METHOD,",
				"          WIP_SUPPLY_TYPE,",
				"          {ITEMS$END_OF_LIFE_BUY},",
				"          {Item Number},",
				"          {Item Revision Control Flag},",
				"          {Lot Control Flag},",
				"          {Serial Number Control Code},",
				"          {Track In Installed Base}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select15",
				"select16, union2 join(Component == union2@{Item Number}",
				"     && {Org     } == {Org Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join3 select(mapColumn(",
				"          {Right_Org Code} = {Org Code},",
				"          Assembly,",
				"          Path,",
				"          Component,",
				"          Level,",
				"          QPA,",
				"          {Extended Quantity},",
				"          RecordID,",
				"          field1,",
				"          field2,",
				"          Level1,",
				"          Level2,",
				"          Level3,",
				"          Level4,",
				"          Level5,",
				"          Level6,",
				"          Level7,",
				"          Level8,",
				"          Level9,",
				"          Level10,",
				"          Level11,",
				"          Level12,",
				"          Level13,",
				"          Level14,",
				"          Level15,",
				"          Level16,",
				"          Level17,",
				"          Level18,",
				"          Level19,",
				"          Level20,",
				"          {Using Assembly},",
				"          {Hold Attribute},",
				"          {BOM Notes},",
				"          {Org     },",
				"          ITEM_DESCRIPTION,",
				"          ITEM_CREATION_DATE,",
				"          {Make/Buy},",
				"          {Item Buyer Name},",
				"          {Right_Planner Code} = PLANNER_CODE,",
				"          PREPROCESSING_LEAD_TIME,",
				"          PROCESSING_LEAD_TIME,",
				"          POSTPROCESSING_LEAD_TIME,",
				"          FIXED_LEAD_TIME,",
				"          CUM_MANUFACTURING_LEAD_TIME,",
				"          CUMULATIVE_TOTAL_LEAD_TIME,",
				"          PURCHASE_COMMOD,",
				"          RECEIPT_ROUTING,",
				"          ITEM_TYPE,",
				"          {Item Avg Cost},",
				"          MRP_PLANNING_METHOD,",
				"          {ITEMS$END_OF_LIFE_BUY},",
				"          {Item Number},",
				"          {Item Revision Control Flag},",
				"          {Lot Control Flag},",
				"          {Serial Number Control Code},",
				"          {Track In Installed Base}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select16",
				"source6 window(RecordID = rowNumber()) ~> window2",
				"derivedColumn9 filter(startsWith(COLUMN_NAME,'A$')",
				"||",
				"startsWith(COLUMN_NAME,'Z_')",
				"||",
				"startsWith(COLUMN_NAME,'Z$')) ~> filter3",
				"window2 derive(COLUMN_NAME = 'A$NSND',",
				"          DATA_LENGTH = 0,",
				"          View = 'MRPG0_MRP_Workbench_Vsat') ~> derivedColumn9",
				"filter3 sort(asc(RecordID, true)) ~> sort2",
				"sort2 derive(COLUMN_NAME = iif(DATA_LENGTH == 0 , COLUMN_NAME,COLUMN_NAME)) ~> derivedColumn10",
				"derivedColumn10 aggregate(groupBy(View),",
				"     Fields = replace(replace(replace(toString(collect(COLUMN_NAME)),']',''),'[',''),'\"','')) ~> aggregate4",
				"aggregate4 derive(VIEWNAME = View) ~> derivedColumn11",
				"SOURCESELECT select(mapColumn(",
				"          {Wip Supply Type},",
				"          {Using Assembly Item Num},",
				"          {Task Num},",
				"          {Supply Avail Date},",
				"          {Sugg Start Date},",
				"          {Sugg Order Date},",
				"          {Sugg Due Date},",
				"          {Sugg Dock Date},",
				"          Status,",
				"          {Source Vendor Site Code},",
				"          {Source Vendor Name},",
				"          {Source Organization Code},",
				"          {Snapshot Total Onhand Qty},",
				"          {Release Errors},",
				"          Qty = {Quantity Rate},",
				"          {Quantity In Process},",
				"          Project = {Project Num},",
				"          {Po Price},",
				"          {Planning Group Quantity},",
				"          {Planning Group},",
				"          {Planner Code},",
				"          {Org Code} = {Organization Code},",
				"          {Order Type},",
				"          {Order Number},",
				"          {Old Due Date},",
				"          {Old Dock Date},",
				"          {Mrp Action},",
				"          {Make Buy Code},",
				"          {Item Number},",
				"          {Item Mrp Plan Method},",
				"          {Component Revision},",
				"          Buyer = {Buyer Name},",
				"          {Bom Item Type},",
				"          {Avg Item Cost}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select17",
				"select17, select440 union(byName: true)~> union2",
				"select205 select(mapColumn(",
				"          {Allow Reservation},",
				"          {Contract Number},",
				"          {Cost Cat Code},",
				"          {Cost Group},",
				"          {Extended Cost},",
				"          {Include In Atp},",
				"          {Inv Cat Code},",
				"          {Item Cost},",
				"          {Item Description},",
				"          {Item Num},",
				"          {Item Rev},",
				"          {Item Status},",
				"          {Item Status Code},",
				"          {Item Type},",
				"          {Item Warranty Period},",
				"          {Lots$Date Code},",
				"          {Lots$Die Bin Number},",
				"          {Lots$Die Wafer Number},",
				"          {Lots$Mfg Pn},",
				"          {Lots$Packaging},",
				"          {Lots$Prop Desc},",
				"          {Lots$Prop Mfg},",
				"          {Lots$Prop Price},",
				"          {Lots$Prop Sn},",
				"          Locator,",
				"          {Locator Id},",
				"          {Lot Control Code},",
				"          {Lot Creation Date},",
				"          {Lot Date Code},",
				"          {Lot Description},",
				"          {Lot Exp Date},",
				"          {Lot Extended Price},",
				"          {Lot First Txn Source},",
				"          {Lot First Txn Type},",
				"          {Lot Number},",
				"          {Lot Status},",
				"          {Make Buy Code},",
				"          {Material Cost},",
				"          {Material Overhead Cost},",
				"          Nettable,",
				"          {Onhand Qty},",
				"          {Organization Code},",
				"          {Orig Date Received},",
				"          {Outside Processing Cost},",
				"          {Overhead Cost},",
				"          {Planning Cat Code},",
				"          {Planning Group},",
				"          {Primary Unit Of Measure},",
				"          {Prod Line},",
				"          {Prod Type},",
				"          {Proj Mgr},",
				"          {Project Division},",
				"          {Project Name},",
				"          {Project Num},",
				"          {Project Type},",
				"          {Purch Cat Code},",
				"          {Receipt Date},",
				"          {Receipt Number},",
				"          {Resource Cost},",
				"          {Serial Control Code},",
				"          {Service Cat Code},",
				"          {Subinv Custodian},",
				"          {Subinv Room},",
				"          {Subinventory Code},",
				"          {Supplier Lot Number},",
				"          {Task Num}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select206",
				"select206 filter(! regexMatch( Nettable , '')) ~> filter4",
				"filter4 select(mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select207",
				"filter4 select(mapColumn(",
				"          {Item Number} = {Item Num},",
				"          {Component Revision} = {Item Rev},",
				"          Locator,",
				"          Date = {Lot Creation Date},",
				"          Qty = {Onhand Qty},",
				"          Org = {Organization Code},",
				"          Project = {Project Num}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select208",
				"select208 derive({Order Type} = \"On-Hand Inventory\",",
				"          Date = iif(isNull(Date),(substring(toString(Date),1,7)+'-01'),Date),",
				"          {Supply/Demand} = \"Supply\") ~> derivedColumn12",
				"derivedColumn12, aggregate5 join(Project == {Project Number},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"select438 select(mapColumn(",
				"          {Organization Code},",
				"          {Planning Group},",
				"          {Project Number}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select439",
				"select439 aggregate(groupBy({Planning Group}),",
				"     each(match(name!='Planning Group'), $$ = first($$))) ~> aggregate5",
				"join5 select(mapColumn(",
				"          Org",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select440",
				"join4 select(mapColumn(",
				"          Component,",
				"          Level,",
				"          QPA,",
				"          {Extended Quantity},",
				"          RecordID,",
				"          field1,",
				"          field2,",
				"          Level1,",
				"          Level2,",
				"          Level3,",
				"          Level4,",
				"          Level5,",
				"          Level6,",
				"          Level7,",
				"          Level8,",
				"          Level9,",
				"          Level10,",
				"          Level11,",
				"          Level12,",
				"          Level13,",
				"          Level14,",
				"          Level15,",
				"          Level16,",
				"          Level17,",
				"          Level18,",
				"          Level19,",
				"          Level20,",
				"          {Using Assembly},",
				"          {Hold Attribute},",
				"          {BOM Notes},",
				"          {Org     },",
				"          ITEM_DESCRIPTION,",
				"          ITEM_CREATION_DATE,",
				"          {Make/Buy},",
				"          {Item Buyer Name},",
				"          {Right_Planner Code},",
				"          PREPROCESSING_LEAD_TIME,",
				"          PROCESSING_LEAD_TIME,",
				"          POSTPROCESSING_LEAD_TIME,",
				"          FIXED_LEAD_TIME,",
				"          CUM_MANUFACTURING_LEAD_TIME,",
				"          CUMULATIVE_TOTAL_LEAD_TIME,",
				"          PURCHASE_COMMOD,",
				"          RECEIPT_ROUTING,",
				"          ITEM_TYPE,",
				"          {Item Avg Cost},",
				"          MRP_PLANNING_METHOD,",
				"          {ITEMS$END_OF_LIFE_BUY},",
				"          {Item Number} = select16@{Item Number},",
				"          {Item Revision Control Flag},",
				"          {Lot Control Flag},",
				"          {Serial Number Control Code},",
				"          {Track In Installed Base},",
				"          {Wip Supply Type},",
				"          {Using Assembly Item Num},",
				"          {Task Num},",
				"          {Supply Avail Date},",
				"          {Sugg Start Date},",
				"          {Sugg Order Date},",
				"          {Sugg Due Date},",
				"          {Sugg Dock Date},",
				"          Status,",
				"          {Source Vendor Site Code},",
				"          {Source Vendor Name},",
				"          {Source Organization Code},",
				"          {Snapshot Total Onhand Qty},",
				"          {Release Errors},",
				"          Qty,",
				"          {Quantity In Process},",
				"          Project,",
				"          {Po Price},",
				"          {Planning Group Quantity},",
				"          {Planning Group},",
				"          {Right_Planner Code} = {Planner Code},",
				"          {Org Code},",
				"          {Order Type},",
				"          {Order Number},",
				"          {Old Due Date},",
				"          {Old Dock Date},",
				"          {Mrp Action},",
				"          {Make Buy Code},",
				"          {Item Number},",
				"          {Item Mrp Plan Method},",
				"          {Component Revision},",
				"          Buyer,",
				"          {Bom Item Type},",
				"          {Avg Item Cost},",
				"          Org",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select441",
				"select7 filter(regexMatch({Item Type},'reference item')) ~> filter5",
				"filter5 select(mapColumn(",
				"          Org = {Organization Code},",
				"          {Item Number},",
				"          {Item Description},",
				"          {Item Creation Date},",
				"          {Make/Buy} = {Planning Make Buy Code},",
				"          {Item Buyer Name} = {Buyer Name},",
				"          {Preprocessing Lead Time},",
				"          {Processing Lead Time},",
				"          {Postprocessing Lead Time},",
				"          {Fixed LT} = {Fixed Lead Time},",
				"          {Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time},",
				"          {Purchase Commod},",
				"          UOM = {Unit Of Measure},",
				"          {Receipt Routing},",
				"          {Item Type},",
				"          {Item Avg Cost} = {Average Cost},",
				"          {Mrp Planning Method},",
				"          {Wip Supply Type}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select442",
				"select14, select443 join(Assembly == {Item Number}",
				"     && {Org Code} == {Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"select7 select(mapColumn(",
				"          {Organization Code},",
				"          {Item Number},",
				"          {Assembly Description} = {Item Description}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select443",
				"select9 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['INVG0_Items_Vsat_MRPearl'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}