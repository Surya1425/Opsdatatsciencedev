{
	"name": "Project Estimate to Completion",
	"properties": {
		"folder": {
			"name": "timpildataflow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "activeMRP",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "POG0_Req_Dist_POs_Vsat",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "invg0itemsvsat",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "invoicediscrepancydata",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "problemshelfdata",
						"type": "DatasetReference"
					},
					"name": "source5"
				},
				{
					"dataset": {
						"referenceName": "POG0_All_Distribution_Vsat",
						"type": "DatasetReference"
					},
					"name": "source6"
				},
				{
					"dataset": {
						"referenceName": "exp_po",
						"type": "DatasetReference"
					},
					"name": "source7"
				},
				{
					"dataset": {
						"referenceName": "exp_lbrr",
						"type": "DatasetReference"
					},
					"name": "source8"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText12",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "Unique"
				},
				{
					"name": "join1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select3"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select4"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select5"
				},
				{
					"name": "select7"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "select6"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "union1"
				},
				{
					"name": "aggregate5"
				},
				{
					"name": "join5"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "derivedColumn7"
				},
				{
					"name": "derivedColumn8"
				},
				{
					"name": "filter3"
				},
				{
					"name": "aggregate6"
				},
				{
					"name": "select8"
				},
				{
					"name": "filter4"
				},
				{
					"name": "join6"
				},
				{
					"name": "derivedColumn9"
				},
				{
					"name": "derivedColumn10"
				},
				{
					"name": "union2"
				},
				{
					"name": "select9"
				},
				{
					"name": "aggregate7"
				},
				{
					"name": "join7"
				},
				{
					"name": "derivedColumn11"
				},
				{
					"name": "select10"
				},
				{
					"name": "derivedColumn12"
				},
				{
					"name": "select11"
				},
				{
					"name": "derivedColumn14"
				},
				{
					"name": "select12"
				},
				{
					"name": "filter5"
				},
				{
					"name": "derivedColumn15"
				},
				{
					"name": "derivedColumn16"
				},
				{
					"name": "derivedColumn17"
				},
				{
					"name": "select13"
				},
				{
					"name": "union3"
				},
				{
					"name": "derivedColumn18"
				},
				{
					"name": "union4"
				},
				{
					"name": "select14"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Project Num} as string,",
				"          {Organization Code} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          AUTHORIZATION_STATUS as string,",
				"          AWARD_CLASS_CURRENT_CONTRACT as string,",
				"          AWARD_CLASS_REQ as string,",
				"          BASE_CURRENCY_CODE as string,",
				"          BUYER_NAME as string,",
				"          CANCEL_REASON as string,",
				"          CHART_OF_ACCOUNTS_NAME as string,",
				"          CLOSED_CODE as string,",
				"          CREATION_DATE as string,",
				"          CURRENCY_CODE as string,",
				"          DESCRIPTION as string,",
				"          DISTRIBUTION_AMOUNT as boolean,",
				"          DISTRIBUTION_LINE_NUMBER as boolean,",
				"          DISTRIBUTION_QUANTITY as double,",
				"          DOCUMENT_TYPE as string,",
				"          EXPENDITURE_ITEM_DATE as string,",
				"          EXPENDITURE_ORGANIZATION as string,",
				"          EXPENDITURE_TYPE as string,",
				"          FIXED_LEAD_TIME as short,",
				"          GL_DATE as string,",
				"          GL_CLOSED_DATE as string,",
				"          {ITEM$SV$PART_NUMBER} as string,",
				"          ITEM_DESCRIPTION as string,",
				"          ITEM_REVISION as short,",
				"          LAST_UPDATE_DATE_RQDLIN as string,",
				"          LAST_UPDATE_DATE_RQDST as string,",
				"          LEDGER_NAME as string,",
				"          LAST_UPDATE_DATE_RQHDR as string,",
				"          LINE_NUMBER as short,",
				"          LINE_TYPE as string,",
				"          MODIFIED_BY_AGENT_FLAG as boolean,",
				"          NEED_BY_DATE as string,",
				"          OPEN_FLAG as boolean,",
				"          PO_NUMBER as string,",
				"          POSTPROCESSING_LEAD_TIME as short,",
				"          PREPARER_NAME as string,",
				"          PREPARER_NUMBER as short,",
				"          PREPROCESSING_LEAD_TIME as short,",
				"          PROCESSING_LEAD_TIME as short,",
				"          PROJECT_NAME as string,",
				"          PROJECT_NUMBER as string,",
				"          REQ_ITEMCATPUR_KFF as string,",
				"          RATE as double,",
				"          RATE_DATE as string,",
				"          RATE_TYPE as string,",
				"          REQ_DELIVER_TO_LOCATION as string,",
				"          REQ_DESTINATION_ORG_CODE as string,",
				"          REQ_LINE_CANCEL_DATE as string,",
				"          REQ_LINE_CANCEL_FLAG as boolean,",
				"          REQ_LINE_CANCELLED_QUANTITY as double,",
				"          REQ_LINE_CLOSED_DATE as string,",
				"          REQ_LINE_ID as integer,",
				"          REQ_LINE_QTY_DELIVERED as short,",
				"          REQ_LINE_QUANTITY as double,",
				"          REQUESTOR_NAME as string,",
				"          REQUESTOR_NUMBER as string,",
				"          REQUISITION_APPROVAL_DATE as string,",
				"          REQUISITION_CREATION_DATE as string,",
				"          SUGGESTED_BUYER_NAME as string,",
				"          REQUISITION_NUMBER as integer,",
				"          SUGGESTED_VENDOR_NAME as string,",
				"          SUPPLIER_ITEM_PO as string,",
				"          SUPPLIER_ITEM_REQ as string,",
				"          TASK_NAME as string,",
				"          TASK_NUMBER as string,",
				"          UNIT_PRICE as double,",
				"          UNIT_OF_MEASURE as string,",
				"          UNIT_PRICE_BASE as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          {A$CHART_OF_ACCOUNTS_NAME} as string,",
				"          {A$MASTER_ORGANIZATION_NAME} as string,",
				"          {A$ORGANIZATION_NAME} as string,",
				"          {A$ZZ__________________________} as string,",
				"          AVERAGE_COST as double,",
				"          BUILD_IN_WIP_FLAG as boolean,",
				"          BUYER_NAME as string,",
				"          CHART_OF_ACCOUNTS_NAME as string,",
				"          CHILD_LOT_CONTROL_FLAG as boolean,",
				"          CONVERSIONS_TYPE as string,",
				"          CRITICAL_COMPONENT_FLAG as boolean,",
				"          CUM_MANUFACTURING_LEAD_TIME as double,",
				"          CUMULATIVE_TOTAL_LEAD_TIME as double,",
				"          DEFAULT_GRADE_CODE as string,",
				"          DEFAULT_LOT_STATUS_CODE as string,",
				"          DEVIATION_FACTOR_HIGH as boolean,",
				"          DEVIATION_FACTOR_LOW as boolean,",
				"          DUAL_UOM as string,",
				"          END_ASSEMBLY_PEGGING_FLAG as string,",
				"          EXPERIMENTAL_ITEM_FLAG as boolean,",
				"          EXPIRATION_ACTION_INTERVAL as string,",
				"          FIXED_DAYS_SUPPLY as short,",
				"          FIXED_LEAD_TIME as double,",
				"          FIXED_ORDER_QUANTITY as short,",
				"          FORECAST_CONTROL as string,",
				"          GRADE_CONTROL_FLAG as boolean,",
				"          HAZARD_CLASS as string,",
				"          HAZARD_CLASS_DESCRIPTION as string,",
				"          HAZARDOUS_MATERIAL_FLAG as boolean,",
				"          INV_CAT_EXISTS as boolean,",
				"          INVENTORY_ITEM_FLAG as boolean,",
				"          INVENTORY_ITEM_ID as integer,",
				"          INVENTORY_PLANNING_METHOD_CODE as string,",
				"          {ITEM$INVENTORY_ITEM_ID} as integer,",
				"          {ITEM$LEAD_TIME_UPDATED} as string,",
				"          {ITEM$NON_MRP_ACTIONABLE} as string,",
				"          {ITEM$ORGANIZATION_ID} as short,",
				"          {ITEM$REPLENISHMENT_TYPE} as string,",
				"          ITEM_CREATION_DATE as string,",
				"          ITEM_DESCRIPTION as string,",
				"          ITEM_EXPIRATION_ACTION_CODE as string,",
				"          ITEM_LONG_DESCRIPTION as string,",
				"          ITEM_NUMBER as string,",
				"          ITEM_REPLENISHMENT_TYPE as string,",
				"          ITEM_REVISION_CONTROL_FLAG as boolean,",
				"          ITEM_STATUS as string,",
				"          ITEM_STATUS_CODE as string,",
				"          ITEM_TYPE as string,",
				"          ITEMCATASSET_INVENTORY_CLASS as string,",
				"          ITEMCATASSET_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATASSET_PRODUCT_LINE as string,",
				"          ITEMCATASSET_PRODUCT_TYPE as string,",
				"          ITEMCATCONT_INVENTORY_CLASS as string,",
				"          ITEMCATCONT_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATCONT_PRODUCT_LINE as string,",
				"          ITEMCATCONT_PRODUCT_TYPE as string,",
				"          ITEMCATCOST_INVENTORY_CLASS as string,",
				"          ITEMCATCOST_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATCOST_PRODUCT_LINE as string,",
				"          ITEMCATCOST_PRODUCT_TYPE as string,",
				"          ITEMCATENG_INVENTORY_CLASS as string,",
				"          ITEMCATENG_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATENG_PRODUCT_LINE as string,",
				"          ITEMCATENG_PRODUCT_TYPE as string,",
				"          ITEMCATGDSN_INVENTORY_CLASS as string,",
				"          ITEMCATGDSN_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATGDSN_PRODUCT_LINE as string,",
				"          ITEMCATGDSN_PRODUCT_TYPE as string,",
				"          ITEMCATGDSNG_INVENTORY_CLASS as string,",
				"          ITEMCATGDSNG_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATGDSNG_PRODUCT_LINE as string,",
				"          ITEMCATGDSNG_PRODUCT_TYPE as string,",
				"          ITEMCATINV_INVENTORY_CLASS as string,",
				"          ITEMCATINV_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATINV_PRODUCT_LINE as string,",
				"          ITEMCATINV_PRODUCT_TYPE as string,",
				"          ITEMCATOE_INVENTORY_CLASS as string,",
				"          ITEMCATOE_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATOE_PRODUCT_LINE as string,",
				"          ITEMCATOE_PRODUCT_TYPE as string,",
				"          ITEMCATPAC_INVENTORY_CLASS as string,",
				"          ITEMCATPAC_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATPAC_PRODUCT_LINE as string,",
				"          ITEMCATPAC_PRODUCT_TYPE as string,",
				"          ITEMCATPCC_INVENTORY_CLASS as string,",
				"          ITEMCATPCC_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATPCC_PRODUCT_LINE as string,",
				"          ITEMCATPCC_PRODUCT_TYPE as string,",
				"          ITEMCATPGBC_INVENTORY_CLASS as string,",
				"          ITEMCATPGBC_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATPGBC_PRODUCT_LINE as string,",
				"          ITEMCATPGBC_PRODUCT_TYPE as string,",
				"          ITEMCATPGC_INVENTORY_CLASS as string,",
				"          ITEMCATPGC_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATPGC_PRODUCT_LINE as string,",
				"          ITEMCATPGC_PRODUCT_TYPE as string,",
				"          ITEMCATPLA_INVENTORY_CLASS as string,",
				"          ITEMCATPLA_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATPLA_PRODUCT_LINE as string,",
				"          ITEMCATPLA_PRODUCT_TYPE as string,",
				"          ITEMCATPLAN_INVENTORY_CLASS as string,",
				"          ITEMCATPLAN_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATPLAN_PRODUCT_LINE as string,",
				"          ITEMCATPLAN_PRODUCT_TYPE as string,",
				"          ITEMCATPPL_INVENTORY_CLASS as string,",
				"          ITEMCATPPL_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATPPL_PRODUCT_LINE as string,",
				"          ITEMCATPPL_PRODUCT_TYPE as string,",
				"          ITEMCATPROR_INVENTORY_CLASS as string,",
				"          ITEMCATPROR_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATPROR_PRODUCT_LINE as string,",
				"          ITEMCATPROR_PRODUCT_TYPE as string,",
				"          ITEMCATPSDC_INVENTORY_CLASS as string,",
				"          ITEMCATPSDC_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATPSDC_PRODUCT_LINE as string,",
				"          ITEMCATPSDC_PRODUCT_TYPE as string,",
				"          ITEMCATPSIC_INVENTORY_CLASS as string,",
				"          ITEMCATPSIC_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATPSIC_PRODUCT_LINE as string,",
				"          ITEMCATPSIC_PRODUCT_TYPE as string,",
				"          ITEMCATPTC_INVENTORY_CLASS as string,",
				"          ITEMCATPTC_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATPTC_PRODUCT_LINE as string,",
				"          ITEMCATPTC_PRODUCT_TYPE as string,",
				"          ITEMCATPUR_CATEGORY_DESC as string,",
				"          ITEMCATPUR_INVENTORY_CLASS as string,",
				"          ITEMCATPUR_ITEM_CATEGORY_KFF as double,",
				"          ITEMCATPUR_PRODUCT_LINE as string,",
				"          ITEMCATPUR_PRODUCT_TYPE as string,",
				"          ITEMCATSERV_INVENTORY_CLASS as string,",
				"          ITEMCATSERV_ITEM_CATEGORY_KFF as string,",
				"          ITEMCATSERV_PRODUCT_LINE as string,",
				"          ITEMCATSERV_PRODUCT_TYPE as string,",
				"          {ITEMS$AGILE_ACCESS_RESTRICTION} as string,",
				"          {ITEMS$AGILE_ITEM__PART__CATEGO} as string,",
				"          {ITEMS$ASSET_NAME} as string,",
				"          {ITEMS$ASSET_NOMENCLATURE} as string,",
				"          {ITEMS$ASSET_VARIANT} as string,",
				"          {ITEMS$BIN_QTY} as short,",
				"          {ITEMS$BUILD_IN_SOLUMINA_DATE} as string,",
				"          {ITEMS$COMSEC} as boolean,",
				"          {ITEMS$CUI} as string,",
				"          {ITEMS$COUNTRY_OF_ORIGIN} as string,",
				"          {ITEMS$ESD_HANDLING} as string,",
				"          {ITEMS$EXCLUDE_FROM_LEAD_TIME_U} as string,",
				"          {ITEMS$EXTERNAL_SYSTEMS} as string,",
				"          {ITEMS$INVOICE_UOM} as string,",
				"          {ITEMS$ITEM_NET_WEIGHT__LBS} as string,",
				"          {ITEMS$ITEM_SETUP_VERIFIED} as timestamp,",
				"          {ITEMS$LEAD_TIME_UPDATED} as string,",
				"          {ITEMS$LEGACY_SYSTEM_ITEM_NUMBE} as string,",
				"          {ITEMS$MATERIAL_EXPIRATION_VALU} as string,",
				"          {ITEMS$MOISTURE_SENSITIVITY_LEV} as string,",
				"          {ITEMS$NON_MRP_ACTIONABLE} as string,",
				"          {ITEMS$REPLENISHMENT_TYPE} as string,",
				"          {ITEMS$RESERVED_PN} as boolean,",
				"          {ITEMS$ST_APPLIES} as boolean,",
				"          {ITEMS$SPACE_FLIGHT_DELIVERABLE} as boolean,",
				"          {ITEMS$STORAGE_CONDITION} as string,",
				"          {ITEMS$TARGET_COST} as double,",
				"          {ITEMS$USE_AS_REQUIRED} as string,",
				"          {ITEMS$VMI_ITEM} as string,",
				"          {ITEMS$WARRANTY_PERIOD} as string,",
				"          LAST_UPDATE_DATE as string,",
				"          LAST_UPDATED_BY as string,",
				"          LIST_PRICE_PER_UNIT as double,",
				"          LOCATION_CONTROL as string,",
				"          LOT_CONTROL_FLAG as boolean,",
				"          LOT_DIVISIBLE_FLAG as boolean,",
				"          LOT_STATUS_ENABLED_FLAG as boolean,",
				"          MASTER_ORGANIZATION_NAME as string,",
				"          MAX_MINMAX_QUANTITY as boolean,",
				"          MAXIMUM_ORDER_QUANTITY as boolean,",
				"          MIN_MINMAX_QUANTITY as boolean,",
				"          MINIMUM_ORDER_QUANTITY as short,",
				"          MRP_PLANNING_METHOD as string,",
				"          MTL_TRANSACTIONS_ENABLED_FLAG as boolean,",
				"          ORDER_COST as boolean,",
				"          ORGANIZATION as string,",
				"          ORGANIZATION_CODE as string,",
				"          ORGANIZATION_ID as short,",
				"          ORGANIZATION_NAME as string,",
				"          PLANNER_CODE as string,",
				"          PLANNING_EXCEPTION_SET as string,",
				"          PLANNING_MAKE_BUY_CODE as string,",
				"          POSTPROCESSING_LEAD_TIME as short,",
				"          PREPROCESSING_LEAD_TIME as short,",
				"          PRICING_SOURCE as string,",
				"          PROCESSING_LEAD_TIME as double,",
				"          PURCHASE_COMMOD as integer,",
				"          RECEIPT_ROUTING as string,",
				"          RECEIVING_ROUTING_ID as short,",
				"          REPLENTISHMENT_SOURCE_TYPE as string,",
				"          RETEST_INTERVAL_DAYS as string,",
				"          SERIAL_NUMBER_CONTROL_CODE as string,",
				"          SERIAL_STARTING_NUMBER as string,",
				"          SERIAL_STARTING_PREFIX as string,",
				"          SHELF_LIFE_CODE as string,",
				"          SHELF_LIFE_DAYS as boolean,",
				"          SHRINKAGE_RATE as boolean,",
				"          SOLUMINA_SECURITY_GROUP as string,",
				"          SOURCE_ORGANIZATION_CODE as string,",
				"          STOCK_ENABLED_FLAG as boolean,",
				"          TRACK_IN_INSTALLED_BASE as boolean,",
				"          UNIT_OF_MEASURE as string,",
				"          VARIABLE_LEAD_TIME as double,",
				"          WIP_SUPPLY_TYPE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          {Vendor #} as string,",
				"          Supplier as string,",
				"          Buyer as string,",
				"          {Invoice Number} as string,",
				"          Amount as string,",
				"          {AP Notes} as string,",
				"          {Buyer Notes} as string,",
				"          {Problem Category} as string,",
				"          {Problem Description} as string,",
				"          {PO Number} as string,",
				"          Status as string,",
				"          {Date Updated} as string,",
				"          Created as string,",
				"          {Date Added to List} as string,",
				"          {Invoice Date} as string,",
				"          {Small Business Flag} as string,",
				"          Manager as string,",
				"          Name as string,",
				"          {Buyer Type} as string,",
				"          {Buyer Org} as string,",
				"          {Current Owner} as string,",
				"          {Owner Org} as string,",
				"          {Owner Type} as string,",
				"          {Owner Manager} as string,",
				"          {Buyer Manager} as string,",
				"          {Workflow Generating Data} as string,",
				"          Problem as string,",
				"          {Problem Comments} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source(output(",
				"          {Assigned To} as string,",
				"          {Buyer Org} as string,",
				"          {Buyer Type} as string,",
				"          {PO Buyer} as string,",
				"          {Buyer/CSR Comments} as string,",
				"          Created as string,",
				"          {Created By} as string,",
				"          {Date Closed} as string,",
				"          {Date Reported} as string,",
				"          {Date Updated} as string,",
				"          {Days Aged} as string,",
				"          ID as string,",
				"          {Issue Status} as string,",
				"          Manager as string,",
				"          Modified as string,",
				"          {Modified By} as string,",
				"          MPN as string,",
				"          Name as string,",
				"          {Packing Slip Number} as string,",
				"          {Problem Category} as string,",
				"          {Problem Description} as string,",
				"          {Qty Shipped} as double,",
				"          {Receipt Type} as string,",
				"          Resolution as string,",
				"          Site as string,",
				"          {Supplier/Customer} as string,",
				"          {Tracking Number} as string,",
				"          Version as string,",
				"          VPN as string,",
				"          Found as string,",
				"          F12 as string,",
				"          SN as string,",
				"          {Supplier Name} as string,",
				"          {Content Type} as string,",
				"          {Buyer/CSR} as string,",
				"          {Workflow Generating Data} as string,",
				"          {PO/RMA Number} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source5",
				"source(output(",
				"          Org as string,",
				"          {Quantity Ordered} as double,",
				"          {Buyer Name} as string,",
				"          {Vendor Number} as string,",
				"          {Vendor Name} as string,",
				"          {Quantity Billed} as double,",
				"          {Destination Org Code} as string,",
				"          {Unit Price} as double,",
				"          {Item Description} as string,",
				"          {Promised Date} as date,",
				"          {Open Value} as double,",
				"          {Project Number} as string,",
				"          {Item Number} as string,",
				"          {Quantity Cancelled} as double,",
				"          {Po Line Open Flag} as string,",
				"          {Po Line Type} as string,",
				"          {Po Number} as string,",
				"          {Closure Status} as string,",
				"          {Authorization status} as string,",
				"          {Matching Type} as string,",
				"          {Quantity Delivered} as double,",
				"          {Cancel Flag} as string,",
				"          {Shipment Number} as string,",
				"          {Task Number} as string,",
				"          {Po Line Number} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source6",
				"source(output(",
				"          external_transaction_source as string,",
				"          project_number as string,",
				"          task_name as string,",
				"          task_number as string,",
				"          employee_number as string,",
				"          vendor_name as string,",
				"          expenditure_type as string,",
				"          expenditure_item_date as string,",
				"          incurred_org as string,",
				"          expenditure_category as string,",
				"          exp_item_external_sys_ref as string,",
				"          system_linkage as string,",
				"          expenditure_description as string,",
				"          invoice_number as string,",
				"          po_number as string,",
				"          transaction_id as string,",
				"          cost as string,",
				"          quantity as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source7",
				"source(output(",
				"          external_transaction_source as string,",
				"          project_number as string,",
				"          task_number as string,",
				"          incurred_by_organization_id as string,",
				"          expenditure_type as string,",
				"          expenditure_item_date as string,",
				"          expenditure_category as string,",
				"          system_linkage as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          business_title as string,",
				"          line_of_business as string,",
				"          overtime_flag as string,",
				"          quantity as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false) ~> source8",
				"source1 select(mapColumn(",
				"          {Project Number} = {Project Num},",
				"          {Organization Code}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source2 select(mapColumn(",
				"          {Authorization status} = AUTHORIZATION_STATUS,",
				"          {Unit price} = UNIT_PRICE,",
				"          {Task number} = TASK_NUMBER,",
				"          {Vendor Name} = SUGGESTED_VENDOR_NAME,",
				"          {Requestor number} = REQUESTOR_NUMBER,",
				"          {Req line quantity} = REQ_LINE_QUANTITY,",
				"          {Req line cancelled quantity} = REQ_LINE_CANCELLED_QUANTITY,",
				"          {Project number} = PROJECT_NUMBER,",
				"          {Po Number} = PO_NUMBER,",
				"          {Need By Date} = NEED_BY_DATE,",
				"          {Line Number} = LINE_NUMBER,",
				"          {Item description} = ITEM_DESCRIPTION,",
				"          {Item Number} = {ITEM$SV$PART_NUMBER},",
				"          Org = EXPENDITURE_ORGANIZATION,",
				"          {Closed code} = CLOSED_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 aggregate(groupBy({Project Number},",
				"          {Organization Code}),",
				"     each(match(name!=\"Project Number\"&&name!=\"Organization Code\"), $$ = first($$))) ~> Unique",
				"select2, Unique join(select2@{Project number} == Unique@{Project Number},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 filter({Authorization status} == \"APPROVED\" && {Closed code} == \"OPEN\" && isNull({Po Number})) ~> filter1",
				"filter1 derive({Quantity Open} = {Req line quantity} - {Req line cancelled quantity}) ~> derivedColumn1",
				"derivedColumn18 aggregate(groupBy({Unit price},",
				"          {Task number},",
				"          {Vendor Name},",
				"          {Requestor number},",
				"          Unique@{Project Number},",
				"          {Item Number},",
				"          Org,",
				"          Date,",
				"          {Item description}),",
				"     {Quantity Open} = sum(Amount),",
				"          Amount = sum(Amount)) ~> aggregate1",
				"aggregate1, aggregate2 join(aggregate1@{Item Number} == aggregate2@{Item Number}",
				"     && Org == {Organization Code},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"source3 select(mapColumn(",
				"          {Average Cost} = AVERAGE_COST,",
				"          {Item Number} = ITEM_NUMBER,",
				"          {Organization Code} = ORGANIZATION_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 aggregate(groupBy({Item Number},",
				"          {Organization Code}),",
				"     {Average Cost} = avg({Average Cost})) ~> aggregate2",
				"join2 derive(Amount = iif(!isNull({Average Cost}) && {Average Cost} > 0, {Quantity Open} * {Average Cost}, Amount),",
				"          {Date Published} = toDate(currentTimestamp() -hours(8)),",
				"          {Item Cost} = iif(!isNull({Average Cost}) && {Average Cost} > 0, {Average Cost}, {Unit price})) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          {Task number},",
				"          {Vendor Name},",
				"          {Req Number} = {Requestor number},",
				"          {Project Number},",
				"          {Item Number} = aggregate1@{Item Number},",
				"          Org,",
				"          Date,",
				"          {Item description},",
				"          Quantity = {Quantity Open},",
				"          Amount,",
				"          {Item Number} = aggregate2@{Item Number},",
				"          {Organization Code},",
				"          {Date Published},",
				"          {Item Cost}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 derive(Data = \"PV Requisitions\") ~> derivedColumn3",
				"source4 select(mapColumn(",
				"          {Vendor #},",
				"          Supplier,",
				"          Buyer,",
				"          {Invoice Number},",
				"          Amount,",
				"          {AP Notes},",
				"          {Buyer Notes},",
				"          {Problem Category},",
				"          {Problem Description},",
				"          {PO Number},",
				"          Status,",
				"          {Date Updated},",
				"          Created,",
				"          {Date Added to List},",
				"          {Invoice Date},",
				"          {Small Business Flag},",
				"          Manager,",
				"          Name,",
				"          {Buyer Type},",
				"          {Buyer Org},",
				"          {Current Owner},",
				"          {Owner Org},",
				"          {Owner Type},",
				"          {Owner Manager},",
				"          {Buyer Manager},",
				"          {Workflow Generating Data},",
				"          Problem,",
				"          {Problem Comments}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"source6 select(mapColumn(",
				"          Org,",
				"          {Quantity Ordered},",
				"          {Buyer Name},",
				"          {Vendor Number},",
				"          {Vendor Name},",
				"          {Quantity Billed},",
				"          {Destination Org Code},",
				"          {Unit Price},",
				"          {Item Description},",
				"          {Promised Date},",
				"          {Open Value},",
				"          {Project Number},",
				"          {Item Number},",
				"          {Quantity Cancelled},",
				"          {Po Line Open Flag},",
				"          {Po Line Type},",
				"          {Po Number},",
				"          {Closure Status},",
				"          {Authorization status},",
				"          {Matching Type},",
				"          {Quantity Delivered},",
				"          {Cancel Flag},",
				"          {Shipment Number},",
				"          {Task Number},",
				"          {Po Line Number}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"select7, select5 join(select7@{Po Number} == select5@{PO Number},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"select7, select6 join({Po Number} == {PO/RMA Number},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"source5 select(mapColumn(",
				"          {Assigned To},",
				"          {Buyer Org},",
				"          {Buyer Type},",
				"          {PO Buyer},",
				"          {Buyer/CSR Comments},",
				"          Created,",
				"          {Created By},",
				"          {Date Closed},",
				"          {Date Reported},",
				"          {Date Updated},",
				"          {Days Aged},",
				"          ID,",
				"          {Issue Status},",
				"          Manager,",
				"          Modified,",
				"          {Modified By},",
				"          MPN,",
				"          Name,",
				"          {Packing Slip Number},",
				"          {Problem Category},",
				"          {Problem Description},",
				"          {Qty Shipped},",
				"          {Receipt Type},",
				"          Resolution,",
				"          Site,",
				"          {Supplier/Customer},",
				"          {Tracking Number},",
				"          Version,",
				"          VPN,",
				"          Found,",
				"          F12,",
				"          SN,",
				"          {Supplier Name},",
				"          {Content Type},",
				"          {Buyer/CSR},",
				"          {Workflow Generating Data},",
				"          {PO/RMA Number}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"join3 aggregate(groupBy({Project Number},",
				"          select5@{PO Number},",
				"          {Vendor Name},",
				"          {Date Added to List},",
				"          Org,",
				"          {Task Number}),",
				"     Amount = sum(Amount),",
				"          {Unit Price} = sum({Unit Price})) ~> aggregate3",
				"join4 aggregate(groupBy(Org,",
				"          {Project Number},",
				"          {Po Number},",
				"          {Vendor Name},",
				"          Created,",
				"          {Task Number}),",
				"     {Unit Price} = sum({Unit Price}),",
				"          {Qty Shipped} = sum({Qty Shipped})) ~> aggregate4",
				"aggregate3 derive(Amount = trim(\" \",\"0\"),",
				"          {Unit Price} = trim(\" \",\"0\")) ~> derivedColumn4",
				"aggregate4 derive({Unit Price} = trim(\" \",\"0\"),",
				"          {Qty Shipped} = trim(\" \",\"0\")) ~> derivedColumn5",
				"derivedColumn4, derivedColumn5 union(byName: true)~> union1",
				"union1 aggregate(groupBy(Org,",
				"          {Project Number},",
				"          {Task Number},",
				"          union1@{PO Number},",
				"          {Vendor Name}),",
				"     Amount = count()) ~> aggregate5",
				"select7, Unique join(select7@{Project Number} == Unique@{Project Number}",
				"     && Org == {Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5 filter({Cancel Flag} == \"N\" && {Authorization status} != \"REJECTED\") ~> filter2",
				"filter2 derive({Quantity Open} = iif({Matching Type} == \"2-Way\",\r",
				"{Quantity Ordered}-{Quantity Cancelled}-{Quantity Billed},\r",
				"{Quantity Ordered}-{Quantity Cancelled}-{Quantity Delivered}),",
				"          {PO On Time to Promise Flag} = iif({Closure Status}=='Open' && {Promised Date} < toDate(currentTimestamp()), 'N', 'Y')) ~> derivedColumn6",
				"derivedColumn6 derive({Promised Date} = iif({PO On Time to Promise Flag}== 'N' ,addMonths(toDate(currentTimestamp()), 1),{Promised Date})) ~> derivedColumn7",
				"derivedColumn7 derive({Promised Date} = iif(dayOfMonth({Promised Date}) >=24, addMonths({Promised Date}, 1), {Promised Date}),",
				"          Date = toString(month({Promised Date})) + '-' + toString(year({Promised Date}))) ~> derivedColumn8",
				"derivedColumn8 filter(({Closure Status} != \"CLOSED\" && {Closure Status} != 'CLOSED FOR INVOICE' && {Closure Status} != 'FINALLY CLOSED') && {Quantity Open} > 0) ~> filter3",
				"select8 aggregate(groupBy(Org,",
				"          {Project Number},",
				"          {Task Number},",
				"          {Po Number},",
				"          {Vendor Name},",
				"          {Item Number},",
				"          {Item Description},",
				"          {Po Line Type},",
				"          Date,",
				"          {PO On Time to Promise Flag},",
				"          {Unit Price}),",
				"     Amount = sum({Open Value}),",
				"          {Quantity Open} = sum({Quantity Open})) ~> aggregate6",
				"filter3 select(mapColumn(",
				"          Org,",
				"          {Quantity Ordered},",
				"          {Buyer Name},",
				"          {Vendor Number},",
				"          {Vendor Name},",
				"          {Quantity Billed},",
				"          {Destination Org Code},",
				"          {Unit Price},",
				"          {Item Description},",
				"          {Promised Date},",
				"          {Open Value},",
				"          {Project Number} = select7@{Project Number},",
				"          {Item Number},",
				"          {Quantity Cancelled},",
				"          {Po Line Open Flag},",
				"          {Po Line Type},",
				"          {Po Number},",
				"          {Closure Status},",
				"          {Authorization status},",
				"          {Matching Type},",
				"          {Quantity Delivered},",
				"          {Cancel Flag},",
				"          {Shipment Number},",
				"          {Task Number},",
				"          {Po Line Number},",
				"          {Project Number} = Unique@{Project Number},",
				"          {Organization Code},",
				"          {Quantity Open},",
				"          {PO On Time to Promise Flag},",
				"          Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"aggregate6 filter(Amount > 0) ~> filter4",
				"filter4, aggregate5 join(aggregate6@{Po Number} == aggregate5@{PO Number}",
				"     && aggregate6@{Project Number} == aggregate5@{Project Number}",
				"     && aggregate6@Org == aggregate5@Org",
				"     && aggregate6@{Task Number} == aggregate5@{Task Number},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"filter4 derive({Invoice Discr/Problem Shelf Flag} = \"N\") ~> derivedColumn9",
				"select9 derive({Invoice Discr/Problem Shelf Flag} = \"Y\") ~> derivedColumn10",
				"derivedColumn9, derivedColumn10 union(byName: true)~> union2",
				"join6 select(mapColumn(",
				"          Org = aggregate6@Org,",
				"          {Project Number} = aggregate6@{Project Number},",
				"          {Task Number} = aggregate6@{Task Number},",
				"          {Po Number} = aggregate6@{Po Number},",
				"          {Vendor Name} = aggregate6@{Vendor Name},",
				"          {Item Number},",
				"          {Item Description},",
				"          {Po Line Type},",
				"          Date,",
				"          {PO On Time to Promise Flag},",
				"          {Unit Price},",
				"          Amount = aggregate6@Amount,",
				"          {Quantity Open},",
				"          Org = aggregate5@Org,",
				"          {Project Number} = aggregate5@{Project Number},",
				"          {Task Number} = aggregate5@{Task Number},",
				"          {PO Number} = aggregate5@{PO Number},",
				"          {Vendor Name} = aggregate5@{Vendor Name},",
				"          Amount = aggregate5@Amount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select9",
				"union2 aggregate(groupBy(Org,",
				"          {Project Number},",
				"          {Task Number},",
				"          union2@{Po Number},",
				"          {Vendor Name},",
				"          {Item Number},",
				"          {Item Description},",
				"          {Po Line Type},",
				"          Date,",
				"          {PO On Time to Promise Flag},",
				"          {Invoice Discr/Problem Shelf Flag},",
				"          {Unit Price}),",
				"     Amount = sum(Amount),",
				"          {Quantity } = sum({Quantity Open})) ~> aggregate7",
				"aggregate7, aggregate2 join(aggregate7@{Item Number} == aggregate2@{Item Number}",
				"     && Org == {Organization Code},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join7",
				"join7 derive(Amount = iif(!isNull({Average Cost}) && {Average Cost} > 0, {Quantity } * {Average Cost}, Amount),",
				"          {Date Published} = toDate(currentTimestamp() - hours(8)),",
				"          {Item Cost} = iif(!isNull({Average Cost}) && {Average Cost} > 0,{Average Cost},{Unit Price})) ~> derivedColumn11",
				"derivedColumn11 select(mapColumn(",
				"          Org,",
				"          {Project Number},",
				"          {Task Number},",
				"          {Po Number},",
				"          {Vendor Name},",
				"          {Item Number} = aggregate7@{Item Number},",
				"          {Item Description},",
				"          {Po Line Type},",
				"          Date,",
				"          {PO On Time to Promise Flag},",
				"          {Invoice Discr/Problem Shelf Flag},",
				"          Amount,",
				"          {Quantity },",
				"          {Item Number} = aggregate2@{Item Number},",
				"          {Organization Code},",
				"          {Date Published},",
				"          {Item Cost}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"select10 derive(Data = 'PV Purchase Orders') ~> derivedColumn12",
				"source7 select(mapColumn(",
				"          {Project Number} = project_number,",
				"          {Task Number} = task_number,",
				"          {External Transaction Source} = external_transaction_source,",
				"          {Vendor Name} = vendor_name,",
				"          {Expenditure Type} = expenditure_type,",
				"          {Expenditure Category} = expenditure_category,",
				"          {External Sys Ref} = exp_item_external_sys_ref,",
				"          {System Linkage} = system_linkage,",
				"          {Expenditure Description} = expenditure_description,",
				"          {Invoice Number} = invoice_number,",
				"          {Po Number} = po_number,",
				"          Date = expenditure_item_date,",
				"          Amount = cost,",
				"          Quantity = quantity,",
				"          {Transaction Id} = transaction_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select11",
				"select11 derive(Date = Date,",
				"          Data = 'EV PO Details') ~> derivedColumn14",
				"source8 select(mapColumn(",
				"          {External Transaction Source} = external_transaction_source,",
				"          {Project Number} = project_number,",
				"          {Task Number} = task_number,",
				"          incurred_by_organization_id,",
				"          {Expenditure Type} = expenditure_type,",
				"          Date = expenditure_item_date,",
				"          {Expenditure Category} = expenditure_category,",
				"          {System Linkage} = system_linkage,",
				"          {First Name} = first_name,",
				"          {Last Name} = last_name,",
				"          business_title,",
				"          line_of_business,",
				"          {Overtime Flag} = overtime_flag,",
				"          Quantity = quantity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select12",
				"select12 filter(Quantity > 0) ~> filter5",
				"filter5 derive(Date = toString(toDate(Date),'E-dd')) ~> derivedColumn15",
				"derivedColumn15 derive(Date = Date,",
				"          {First Name} = left({First Name},1)+\".\",",
				"          Data = 'EV Labor Details') ~> derivedColumn16",
				"derivedColumn16 derive({Employee Name} = {First Name} + {Last Name}) ~> derivedColumn17",
				"derivedColumn17 select(mapColumn(",
				"          {External Transaction Source},",
				"          {Project Number},",
				"          {Task Number},",
				"          incurred_by_organization_id,",
				"          {Expenditure Type},",
				"          Date,",
				"          {Expenditure Category},",
				"          {System Linkage},",
				"          business_title,",
				"          line_of_business,",
				"          {Overtime Flag},",
				"          Quantity,",
				"          Data,",
				"          {Employee Name}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select13",
				"derivedColumn14, select13 union(byName: true)~> union3",
				"derivedColumn1 derive(Amount = {Quantity Open} * {Unit price},",
				"          Date = toString(month(toDate({Po Number}))) + '-' + toString(year(toDate({Po Number})))) ~> derivedColumn18",
				"union3, derivedColumn3, derivedColumn12 union(byName: true)~> union4",
				"union4 select(mapColumn(",
				"          {Project Number},",
				"          {Task Number} = union4@{Task Number},",
				"          {External Transaction Source},",
				"          {Vendor Name},",
				"          {Expenditure Type},",
				"          {Expenditure Category},",
				"          {External Sys Ref},",
				"          {System Linkage},",
				"          {Expenditure Description},",
				"          {Invoice Number},",
				"          {Po Number},",
				"          Date,",
				"          Amount,",
				"          Quantity,",
				"          {Transaction Id},",
				"          Data,",
				"          incurred_by_organization_id,",
				"          business_title,",
				"          line_of_business,",
				"          {Overtime Flag},",
				"          {Employee Name},",
				"          {Task number} = union4@{Task number},",
				"          {Req Number},",
				"          {Item Number},",
				"          Org,",
				"          {Item description} = union4@{Item description},",
				"          {Organization Code},",
				"          {Date Published},",
				"          {Item Cost},",
				"          {Item Description} = union4@{Item Description},",
				"          {Po Line Type},",
				"          {PO On Time to Promise Flag},",
				"          {Invoice Discr/Problem Shelf Flag},",
				"          {Quantity }",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select14",
				"select14 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}