{
	"name": "pte_project_cost_final_copy1",
	"properties": {
		"folder": {
			"name": "pte-project-cost-final"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "csvLS1",
						"type": "LinkedServiceReference"
					},
					"name": "pteprojectcost"
				},
				{
					"linkedService": {
						"referenceName": "csvLS1",
						"type": "LinkedServiceReference"
					},
					"name": "HRData"
				},
				{
					"linkedService": {
						"referenceName": "csvLS1",
						"type": "LinkedServiceReference"
					},
					"name": "MonthlyWorkingHours",
					"description": "From 2015 to 2025"
				},
				{
					"linkedService": {
						"referenceName": "csvLS1",
						"type": "LinkedServiceReference"
					},
					"name": "RequisitionFile1"
				},
				{
					"linkedService": {
						"referenceName": "csvLS1",
						"type": "LinkedServiceReference"
					},
					"name": "RequisitionFile2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pte_project_cost_final_tableauout",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "split1"
				},
				{
					"name": "select2"
				},
				{
					"name": "innerjoin1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "union1"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "filter2"
				},
				{
					"name": "filter3"
				},
				{
					"name": "Renamings"
				},
				{
					"name": "Summarise1"
				},
				{
					"name": "leftouterjoin1"
				},
				{
					"name": "select4"
				},
				{
					"name": "union2"
				},
				{
					"name": "select5"
				},
				{
					"name": "Summarise2"
				},
				{
					"name": "leftouterjoin2"
				},
				{
					"name": "select6"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PROJECT_NUMBER as string,",
				"          TASK_NUMBER as string,",
				"          TASK_NAME as string,",
				"          DIVISION as double,",
				"          EXPENDITURE_TYPE as string,",
				"          EXPENDITURE_CATEGORY as string,",
				"          EXPENDITURE_COMMENT as string,",
				"          ITEM_NUMBER as string,",
				"          ITEM_DESCRIPTION as string,",
				"          QUANTITY as string,",
				"          EXTERNAL_TRANSACTION_SOURCE as string,",
				"          SYSTEM_LINKAGE as string,",
				"          INCURRED_ORG as string,",
				"          PROVIDER_ORGANIZATION as string,",
				"          EMPLOYEE_NAME as string,",
				"          EMPLOYEE_FULL_NAME as string,",
				"          EMPLOYEE_ID as string,",
				"          PERIOD_NAME as string,",
				"          GL_DATE as string,",
				"          EXPENDITURE_ITEM_DATE as string,",
				"          EXPENDITURE_ENDING_DATE as string,",
				"          REGULAR_TIME as double,",
				"          BURDENED_COST_PC as double,",
				"          PROJECT_DESCRIPTION as string,",
				"          PROJECT_NAME as string,",
				"          PROJECT_STATUS as string,",
				"          UNIT_OF_MEASURE as string,",
				"          EXP_ITEM_EXTERNAL_SYS_REF as string,",
				"          BUDGETED_BURDENED_COST as double,",
				"          SEGMENT as string,",
				"          PRODUCT_LINE as string,",
				"          TEMPLATE_NUMBER as string,",
				"          PROJECT_COMPLETION_DATE as timestamp,",
				"          PROJECT_CLOSED_DATE as timestamp,",
				"          PROJECT_START_DATE as timestamp,",
				"          Last_Refresh as timestamp",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'pte-project-cost',",
				"     folderPath: 'output',",
				"     fileName: 'pte_project_cost.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> pteprojectcost",
				"source(output(",
				"          ASSIGNMENT_EFFECTIVE_STRT_DATE as string,",
				"          EFFECTIVE_END_DATE as string,",
				"          ASSIGNMENT_NUMBER as short,",
				"          BUSINESS_TITLE as string,",
				"          EMPLOYEE_ID as string,",
				"          EMPLOYEE_NUMBER as short,",
				"          FIRST_NAME as string,",
				"          FULL_NAME as string,",
				"          LAST_NAME as string,",
				"          SUPERVISOR_EMAIL_ADDRESS as string,",
				"          SUPERVISOR_EMPLOYEE_NUMBER as integer,",
				"          SUPERVISOR_FIRST_NAME as string,",
				"          SUPERVISOR_FULL_NAME as string,",
				"          SUPERVISOR_LAST_NAME as string,",
				"          GLC as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'HRData.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> HRData",
				"source(output(",
				"          Month as string,",
				"          {Month Hours} as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'excel',",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'MonthlyWorkingHours2014To2025.xlsx',",
				"     sheetName: 'Sheet1',",
				"     firstRowAsHeader: true) ~> MonthlyWorkingHours",
				"source(output(",
				"          JN as string,",
				"          {Req Number} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'excel',",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'RequisitionNumberFile1.xlsx',",
				"     sheetName: 'Sheet1',",
				"     firstRowAsHeader: true) ~> RequisitionFile1",
				"source(output(",
				"          JN as string,",
				"          {Req Number} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'excel',",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'RequisitionNumberFile2.xlsx',",
				"     sheetName: 'Sheet1',",
				"     firstRowAsHeader: true) ~> RequisitionFile2",
				"pteprojectcost select(mapColumn(",
				"          PROJECT_NUMBER,",
				"          TASK_NUMBER,",
				"          TASK_NAME,",
				"          DIVISION,",
				"          EXPENDITURE_TYPE,",
				"          EXPENDITURE_CATEGORY,",
				"          EXPENDITURE_COMMENT,",
				"          ITEM_NUMBER,",
				"          ITEM_DESCRIPTION,",
				"          QUANTITY,",
				"          EXTERNAL_TRANSACTION_SOURCE,",
				"          SYSTEM_LINKAGE,",
				"          INCURRED_ORG,",
				"          PROVIDER_ORGANIZATION,",
				"          EMPLOYEE_NAME,",
				"          EMPLOYEE_ID,",
				"          PERIOD_NAME,",
				"          {GL Date} = GL_DATE,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          REGULAR_TIME,",
				"          BURDENED_COST_PC,",
				"          PROJECT_DESCRIPTION,",
				"          PROJECT_NAME,",
				"          PROJECT_STATUS,",
				"          UNIT_OF_MEASURE,",
				"          EXP_ITEM_EXTERNAL_SYS_REF,",
				"          BUDGETED_BURDENED_COST,",
				"          SEGMENT,",
				"          PRODUCT_LINE,",
				"          TEMPLATE_NUMBER,",
				"          PROJECT_COMPLETION_DATE,",
				"          PROJECT_START_DATE,",
				"          Last_Refresh",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(Last_Refresh = Last_Refresh-hours(7)) ~> derivedColumn1",
				"derivedColumn1 split(!isNull(EMPLOYEE_ID),",
				"     disjoint: false) ~> split1@(Filtered, Unfiltered)",
				"HRData select(mapColumn(",
				"          EFFECTIVE_START_DATE = ASSIGNMENT_EFFECTIVE_STRT_DATE,",
				"          EFFECTIVE_END_DATE,",
				"          EMPLOYEE_ID,",
				"          SUPERVISOR_FULL_NAME,",
				"          GLC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"split1@Filtered, select2 join(split1@Filtered@EMPLOYEE_ID == select2@EMPLOYEE_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin1",
				"select3 filter(EXPENDITURE_ENDING_DATE >= EFFECTIVE_START_DATE && EXPENDITURE_ENDING_DATE <= EFFECTIVE_END_DATE) ~> filter1",
				"filter1, split1@Unfiltered union(byName: true)~> union1",
				"innerjoin1 select(mapColumn(",
				"          PROJECT_NUMBER,",
				"          TASK_NUMBER,",
				"          TASK_NAME,",
				"          DIVISION,",
				"          EXPENDITURE_TYPE,",
				"          EXPENDITURE_CATEGORY,",
				"          EXPENDITURE_COMMENT,",
				"          ITEM_NUMBER,",
				"          ITEM_DESCRIPTION,",
				"          QUANTITY,",
				"          EXTERNAL_TRANSACTION_SOURCE,",
				"          SYSTEM_LINKAGE,",
				"          INCURRED_ORG,",
				"          PROVIDER_ORGANIZATION,",
				"          EMPLOYEE_NAME,",
				"          EMPLOYEE_ID = split1@Filtered@EMPLOYEE_ID,",
				"          PERIOD_NAME,",
				"          {GL Date},",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          REGULAR_TIME,",
				"          BURDENED_COST_PC,",
				"          PROJECT_DESCRIPTION,",
				"          PROJECT_NAME,",
				"          PROJECT_STATUS,",
				"          UNIT_OF_MEASURE,",
				"          EXP_ITEM_EXTERNAL_SYS_REF,",
				"          BUDGETED_BURDENED_COST,",
				"          SEGMENT,",
				"          PRODUCT_LINE,",
				"          TEMPLATE_NUMBER,",
				"          PROJECT_COMPLETION_DATE,",
				"          PROJECT_START_DATE,",
				"          Last_Refresh,",
				"          EFFECTIVE_START_DATE,",
				"          EFFECTIVE_END_DATE,",
				"          Right_EMPLOYEE_ID = select2@EMPLOYEE_ID,",
				"          SUPERVISOR_FULL_NAME,",
				"          GLC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"union1 derive({GL Year Month} = toString(year(toDate({GL Date})))+'-'+toString(month(toDate({GL Date})))) ~> derivedColumn2",
				"derivedColumn2 derive({Year.Month} = left({GL Year Month}, 7)) ~> derivedColumn3",
				"derivedColumn3 filter(regexMatch(PROJECT_NUMBER,\"C\") || PROJECT_NUMBER=='I700133') ~> filter2",
				"filter2 filter(!in(['C900298','C900299','C900300','C900301'],PROJECT_NUMBER)) ~> filter3",
				"filter3 select(mapColumn(",
				"          {Project Number} = PROJECT_NUMBER,",
				"          {Task Number} = TASK_NUMBER,",
				"          {Task Name} = TASK_NAME,",
				"          Division = DIVISION,",
				"          {Exp Type} = EXPENDITURE_TYPE,",
				"          {Exp Category} = EXPENDITURE_CATEGORY,",
				"          {Exp Comment} = EXPENDITURE_COMMENT,",
				"          {Item Number} = ITEM_NUMBER,",
				"          {Item Description} = ITEM_DESCRIPTION,",
				"          Quantity = QUANTITY,",
				"          {External Transaction Source} = EXTERNAL_TRANSACTION_SOURCE,",
				"          {System Linkage} = SYSTEM_LINKAGE,",
				"          {Incurred Org} = INCURRED_ORG,",
				"          {Provider Org} = PROVIDER_ORGANIZATION,",
				"          {Employee Name} = EMPLOYEE_NAME,",
				"          {Period Name} = PERIOD_NAME,",
				"          {GL Date},",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Regular Time} = REGULAR_TIME,",
				"          {Burdened Cost} = BURDENED_COST_PC,",
				"          {Project Description} = PROJECT_DESCRIPTION,",
				"          {Project Name} = PROJECT_NAME,",
				"          PROJECT_STATUS,",
				"          {Unit of Measure} = UNIT_OF_MEASURE,",
				"          {Exp Item External Sys Ref} = EXP_ITEM_EXTERNAL_SYS_REF,",
				"          {Project Budget Cost} = BUDGETED_BURDENED_COST,",
				"          Segment = SEGMENT,",
				"          PRODUCT_LINE,",
				"          {Template Number} = TEMPLATE_NUMBER,",
				"          {Project Complete Date} = PROJECT_COMPLETION_DATE,",
				"          {Project Start Date} = PROJECT_START_DATE,",
				"          Last_Refresh,",
				"          Right_EMPLOYEE_ID,",
				"          {Supervisor Name} = SUPERVISOR_FULL_NAME,",
				"          GLC,",
				"          {GL Year Month},",
				"          {Year.Month}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Renamings",
				"Renamings aggregate(groupBy({Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name},",
				"          {GL Year Month},",
				"          {Year.Month},",
				"          {Employee Name},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Supervisor Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC),",
				"     {Regular Time} = sum({Regular Time}),",
				"          {Burdened Cost} = sum({Burdened Cost}),",
				"          Last_Refresh = max(Last_Refresh),",
				"          Count = count({Exp Item External Sys Ref})) ~> Summarise1",
				"Summarise1, MonthlyWorkingHours join({Year.Month} == Month,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouterjoin1",
				"leftouterjoin1 select(mapColumn(",
				"          {Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name},",
				"          {GL Year Month},",
				"          {Employee Name},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Supervisor Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC,",
				"          {Regular Time},",
				"          {Burdened Cost},",
				"          Last_Refresh,",
				"          Count,",
				"          {Month Hours}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"RequisitionFile1, RequisitionFile2 union(byName: true)~> union2",
				"union2 select(mapColumn(",
				"          JN,",
				"          REQUISITION_NUMBER = {Req Number}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5 aggregate(groupBy(JN),",
				"     REQUISITION_NUMBER = max(REQUISITION_NUMBER)) ~> Summarise2",
				"select4, Summarise2 join({Project Number} == JN,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouterjoin2",
				"leftouterjoin2 select(mapColumn(",
				"          {Project Number},",
				"          {Project Name},",
				"          {Task Number},",
				"          {Task Name},",
				"          {Exp Type},",
				"          {Exp Category},",
				"          {Exp Comment},",
				"          {Period Name},",
				"          {GL Year Month},",
				"          {Employee Name},",
				"          {Project Description},",
				"          {GL Date},",
				"          PRODUCT_LINE,",
				"          PROJECT_STATUS,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_ENDING_DATE,",
				"          {Template Number},",
				"          {Unit of Measure},",
				"          {Item Number},",
				"          {Item Description},",
				"          Quantity,",
				"          {External Transaction Source},",
				"          {System Linkage},",
				"          {Incurred Org},",
				"          {Provider Org},",
				"          {Exp Item External Sys Ref},",
				"          Segment,",
				"          Division,",
				"          {Supervisor Name},",
				"          {Project Complete Date},",
				"          {Project Start Date},",
				"          GLC,",
				"          {Regular Time},",
				"          {Burdened Cost},",
				"          Last_Refresh,",
				"          Count,",
				"          {Month Hours},",
				"          REQUISITION_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['TableauOutput.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}