{
	"name": "Charged time 5009 Cost center",
	"properties": {
		"folder": {
			"name": "timpildataflow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "chargedtimeinput1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "datadimcharged5009",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "charged5009output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "select6"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select7"
				},
				{
					"name": "join1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "aggregate2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPLOYEE_NUMBER as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          SUPERVISOR_FULL_NAME as string,",
				"          COST_CENTER as string,",
				"          PROJECT_NAME as string,",
				"          PROJECT_NUMBER as string,",
				"          TASK_NAME as string,",
				"          TASK_NUMBER as string,",
				"          TASK_ID as integer,",
				"          EMPLOYEE_NUMBER2 as string,",
				"          PERSON_ID as integer,",
				"          FULL_NAME as string,",
				"          UNIT_OF_MEASURE as string,",
				"          QUANTITY as double,",
				"          EXPENDITURE_ITEM_DATE as date,",
				"          EXPENDITURE_TYPE as string,",
				"          DATE_RECORD_CREATED as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          DateKey as string,",
				"          DateText as string,",
				"          Date as date,",
				"          DayOfMonth as string,",
				"          DayName as string,",
				"          DayOfWeek as string,",
				"          WeekOfMonth as string,",
				"          WeekOfQuarter as string,",
				"          MonthName as string,",
				"          Month as string,",
				"          Quarter as string,",
				"          Year as string,",
				"          MonthYear as string,",
				"          YearMonth as string,",
				"          MonthYearName as string,",
				"          QuarterYear as string,",
				"          FirstDayOfMonth as string,",
				"          LastDayOfMonth as string,",
				"          FirstDayOfQuarter as string,",
				"          LastDayOfQuarter as string,",
				"          FiscalFirstDayOfYear as string,",
				"          FiscalLastDayOfYear as string,",
				"          FiscalDayOfYear as string,",
				"          FiscalWeekOfYear as string,",
				"          FiscalQuarter as string,",
				"          FiscalQuarterYear as string,",
				"          FiscalYearQuarter as string,",
				"          FiscalYear as string,",
				"          FiscalYearName as string,",
				"          IsBusinessDay as string,",
				"          IsHoliday as string,",
				"          HolidayName as string,",
				"          WeekEndingDate_Monday as string,",
				"          WeekEndingDate_Tuesday as string,",
				"          WeekEndingDate_Wednesday as string,",
				"          WeekEndingDate_Thursday as string,",
				"          WeekEndingDate_Friday as string,",
				"          WeekEndingDate_Saturday as string,",
				"          WeekEndingDate_Sunday as string,",
				"          IsStandardTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1 aggregate(groupBy(EMPLOYEE_NUMBER,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          SUPERVISOR_FULL_NAME,",
				"          COST_CENTER,",
				"          PROJECT_NAME,",
				"          PROJECT_NUMBER,",
				"          TASK_NAME,",
				"          TASK_NUMBER,",
				"          TASK_ID,",
				"          EMPLOYEE_NUMBER2,",
				"          PERSON_ID,",
				"          FULL_NAME,",
				"          UNIT_OF_MEASURE,",
				"          QUANTITY,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_TYPE,",
				"          DATE_RECORD_CREATED),",
				"     each(match(name!='EMPLOYEE_NUMBER'&&name!='FIRST_NAME'&&name!='LAST_NAME'&&name!='SUPERVISOR_FULL_NAME'&&name!='COST_CENTER'&&name!='PROJECT_NAME'&&name!='PROJECT_NUMBER'&&name!='TASK_NAME'&&name!='TASK_NUMBER'&&name!='TASK_ID'&&name!='EMPLOYEE_NUMBER2'&&name!='FULL_NAME'&&name!='UNIT_OF_MEASURE'&&name!='QUANTITY'&&name!='EXPENDITURE_ITEM_DATE'&&name!='EXPENDITURE_TYPE'&&name!='PERSON_ID'&&name!='DATE_RECORD_CREATED'), $$ = first($$))) ~> aggregate1",
				"aggregate1 select(mapColumn(",
				"          EMPLOYEE_NUMBER,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          SUPERVISOR_FULL_NAME,",
				"          COST_CENTER,",
				"          PROJECT_NAME,",
				"          PROJECT_NUMBER,",
				"          TASK_NAME,",
				"          TASK_NUMBER,",
				"          TASK_ID,",
				"          EMPLOYEE_NUMBER2,",
				"          PERSON_ID,",
				"          FULL_NAME,",
				"          UNIT_OF_MEASURE,",
				"          QUANTITY,",
				"          EXPENDITURE_ITEM_DATE,",
				"          EXPENDITURE_TYPE,",
				"          DATE_RECORD_CREATED",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(FULL_NAME_1 = split(FULL_NAME,',')[1],",
				"          FULL_NAME_2 = split(FULL_NAME,',')[2],",
				"          FULL_NAME_3 = split(FULL_NAME,',')[3]) ~> derivedColumn1",
				"derivedColumn1 derive(FULL_NAME21 = split(FULL_NAME_2,' ')[1],",
				"          FULL_NAME22 = split(FULL_NAME_2,' ')[2],",
				"          FULL_NAME23 = split(FULL_NAME_2,' ')[3],",
				"          SUPERVISOR_FULL_NAME1 = split(SUPERVISOR_FULL_NAME,',')[1],",
				"          SUPERVISOR_FULL_NAME2 = split(SUPERVISOR_FULL_NAME,',')[2],",
				"          SUPERVISOR_FULL_NAME3 = split(SUPERVISOR_FULL_NAME,',')[3]) ~> derivedColumn2",
				"derivedColumn2 derive(SUPERVISOR_FULL_NAME21 = split( SUPERVISOR_FULL_NAME2,' ')[1],",
				"          SUPERVISOR_FULL_NAME22 = split( SUPERVISOR_FULL_NAME2,' ')[2]) ~> derivedColumn3",
				"derivedColumn3 derive({Employee First Initial Last Name} = iif(LAST_NAME == 'Nguyen', FIRST_NAME+'. '+LAST_NAME, left(FIRST_NAME,1)+'. '+LAST_NAME),",
				"          {Supervisor First Initial Last Name} = left(SUPERVISOR_FULL_NAME22,1) +'. '+SUPERVISOR_FULL_NAME1,",
				"          {Employee Last Name First Initial} = iif(LAST_NAME == 'Nguyen',LAST_NAME+'. '+left(FULL_NAME22,1)+'. '+left(FULL_NAME23,1),LAST_NAME+'. '+left(FIRST_NAME,1)),",
				"          {Tableau Username} = iif( SUPERVISOR_FULL_NAME1 == 'Lloyd',\"splloyd\", lower(left(SUPERVISOR_FULL_NAME22,1))+lower(SUPERVISOR_FULL_NAME1)),",
				"          {Date Published} = toDate(currentTimestamp())) ~> derivedColumn4",
				"derivedColumn4 derive({EXPENDITURE_ITEM_DATE YYYYMM} = toString(EXPENDITURE_ITEM_DATE,'YYYY-MM')) ~> derivedColumn5",
				"derivedColumn5 select(mapColumn(",
				"          each(match(true()),",
				"               replace($$,'ASSY','') = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 select(mapColumn(",
				"          each(match(true()),",
				"               replace($$,'_',' ') = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 select(mapColumn(",
				"          each(match(true()),",
				"               initCap($$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5 select(mapColumn(",
				"          {Employee Number},",
				"          {Cost Center},",
				"          {Project Name},",
				"          {Project Number},",
				"          {Task Name},",
				"          {Task Number},",
				"          {Task Id},",
				"          {Employee Number2},",
				"          {Person Id},",
				"          {Full Name},",
				"          {Unit Of Measure},",
				"          Quantity,",
				"          {Expenditure Item Date},",
				"          {Expenditure Type},",
				"          {Date Record Created},",
				"          {Full Name 1},",
				"          {Full Name 2},",
				"          {Full Name 3},",
				"          {Full Name21},",
				"          {Full Name22},",
				"          {Full Name23},",
				"          {Employee First Initial Last Name},",
				"          {Supervisor First Initial Last Name},",
				"          {Employee Last Name First Initial},",
				"          {Tableau Username},",
				"          {Date Published},",
				"          {Expenditure Item Date Yyyymm}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"source2 filter(Date >= toDate(\"2019-01-01\")) ~> filter1",
				"filter1 select(mapColumn(",
				"          Date,",
				"          DayName,",
				"          WeekEndingDate_Friday,",
				"          WeekEndingDate_Saturday",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"select7, select6 join(Date == {Expenditure Item Date},",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select7 filter(Date <=   toDate('2020-03-26')) ~> filter2",
				"join1 aggregate(groupBy(Date,",
				"          DayName,",
				"          WeekEndingDate_Friday,",
				"          WeekEndingDate_Saturday,",
				"          {Project Name},",
				"          {Project Number},",
				"          {Task Name},",
				"          {Task Number},",
				"          {Task Id},",
				"          {Unit Of Measure},",
				"          Quantity,",
				"          {Expenditure Item Date},",
				"          {Expenditure Type},",
				"          {Date Record Created},",
				"          {Employee First Initial Last Name},",
				"          {Supervisor First Initial Last Name},",
				"          {Employee Last Name First Initial},",
				"          {Tableau Username},",
				"          {Expenditure Item Date Yyyymm}),",
				"     each(match(name!='Date'&&name!='DayName'&&name!='WeekEndingDate_Friday'&&name!='WeekEndingDate_Saturday'&&name!='Project Name'&&name!='Project Number'&&name!='Task Name'&&name!='Task Number'&&name!='Task Id'&&name!='Unit Of Measure'&&name!='Quantity'&&name!='Expenditure Item Date'&&name!='Expenditure Type'&&name!='Date Record Created'&&name!='Employee First Initial Last Name'&&name!='Supervisor First Initial Last Name'&&name!='Employee Last Name First Initial'&&name!='Tableau Username'&&name!='Expenditure Item Date Yyyymm'), $$ = first($$))) ~> aggregate2",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EMPLOYEE_NUMBER as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          SUPERVISOR_FULL_NAME as string,",
				"          COST_CENTER as string,",
				"          PROJECT_NAME as string,",
				"          PROJECT_NUMBER as string,",
				"          TASK_NAME as string,",
				"          TASK_NUMBER as string,",
				"          TASK_ID as string,",
				"          EMPLOYEE_NUMBER2 as string,",
				"          PERSON_ID as string,",
				"          FULL_NAME as string,",
				"          UNIT_OF_MEASURE as string,",
				"          QUANTITY as string,",
				"          EXPENDITURE_ITEM_DATE as string,",
				"          EXPENDITURE_TYPE as string,",
				"          DATE_RECORD_CREATED as string",
				"     ),",
				"     partitionFileNames:['Charged Labor Hrs 5009.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}