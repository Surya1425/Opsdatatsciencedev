{
	"name": "DF_MRP_Component Impact Analysis_Autosave",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "source5"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_csv_output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "select6"
				},
				{
					"name": "select7"
				},
				{
					"name": "join3"
				},
				{
					"name": "select8"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "join4"
				},
				{
					"name": "filter3"
				},
				{
					"name": "filter4"
				},
				{
					"name": "sort2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "join5"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "union1"
				},
				{
					"name": "union2"
				},
				{
					"name": "join6"
				},
				{
					"name": "filter5"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "select10"
				},
				{
					"name": "select11"
				},
				{
					"name": "sort3"
				},
				{
					"name": "select12"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source5",
				"source1 select(mapColumn(",
				"          Assembly,",
				"          BuyParentLevel,",
				"          {Child of Buy},",
				"          Component,",
				"          {Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time},",
				"          {Engineering Change Order},",
				"          {Extended Quantity},",
				"          {Implementation Date},",
				"          {Item Avg Cost},",
				"          {Item Buyer Name},",
				"          {Item Description},",
				"          {Item Revision (MAS)},",
				"          {Item Type},",
				"          Level,",
				"          {Make/Buy},",
				"          {Org Code     } = Org,",
				"          Path,",
				"          {Postprocessing Lead Time},",
				"          {Preprocessing Lead Time},",
				"          {Processing Lead Time},",
				"          {Purchase Commod},",
				"          {Receipt Routing},",
				"          RecordID,",
				"          {Hold Attribute},",
				"          {Assembly Description}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source2 select(mapColumn(",
				"          each(match(true()),",
				"               initCap(replace($$,'_',' ')) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"source3 select(mapColumn(",
				"          Action,",
				"          {Avg Item Cost},",
				"          {BOM Item Type},",
				"          Buyer,",
				"          {Buyer Org},",
				"          {Buyer Type},",
				"          {Component Revision},",
				"          Date,",
				"          {Extended Cost},",
				"          {Extended Cost (ABS)},",
				"          {Firm Planned Type},",
				"          {Fixed Lead Time},",
				"          {Item Avg Cost},",
				"          {Item Description},",
				"          {Item MRP Plan},",
				"          {Item Number},",
				"          {Item Rev},",
				"          {Item Type},",
				"          {List Price},",
				"          {Make Buy},",
				"          {Mrp Planning Method},",
				"          Nettable,",
				"          {Old Dock Date},",
				"          {Old Due Date},",
				"          {Old Order Quantity},",
				"          {On Hand Qty},",
				"          {Order Number},",
				"          {Order Type},",
				"          Org,",
				"          {Organization Id},",
				"          {Planning Group},",
				"          {PO Price},",
				"          {Postprocessing Lead Time},",
				"          {Preprocessing Lead Time},",
				"          {Process Days},",
				"          {Processing Lead Time},",
				"          {Product Segment},",
				"          Project,",
				"          {Project Business Area},",
				"          {Project Name},",
				"          {Project Number},",
				"          Qty,",
				"          {Sugg Dock Date},",
				"          {Sugg Due Date},",
				"          {Sugg Order Date},",
				"          {Sugg Start Date},",
				"          Supplier,",
				"          {Supply/Demand},",
				"          {Task Number},",
				"          {Using Assembly},",
				"          {Wip Supply Type},",
				"          {Left_Purchase Commod},",
				"          {Left_Purchase Commod Description},",
				"          {Items$End Of Life Buy},",
				"          {Minimum Order Quantity},",
				"          {Target Cost}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"source4 select(mapColumn(",
				"          {Organization Code},",
				"          {Business Area} = {Prod Line Class Code Bus Unit},",
				"          {Product Line} = {Prod Line Class Code Desc},",
				"          {Project Number}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"source5 select(mapColumn(",
				"          {MPN Description} = {MFGPT$MFR_PART_DESCRIPTION},",
				"          {MPN Status} = {MFGPT$STATUS},",
				"          {Manufacturer Description} = MANUFACTURER_DESCRIPTION,",
				"          {Manufacturer Name} = MANUFACTURER_NAME,",
				"          MPN = MANUFACTURER_PART_NUMBER,",
				"          {Organization Code} = ORGANIZATION_CODE,",
				"          VPN = {ITEM$SV$PART_NUMBER},",
				"          {Item Description} = {A$ITEM_DESCRIPTION},",
				"          {Item Status} = ITEM_STATUS,",
				"          {VPN Status} = ITEM_STATUS_CODE,",
				"          {Supplier Name} = {MFG$SUPPLIER_NAME},",
				"          {MPN Last Time Buy} = {Mfgpt$Last Time Buy}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select1, select2 join({Org Code     } == {Organization Code}",
				"     && Assembly == {Item Number},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select3, select4 join(Org == {Organization Code}",
				"     && select3@{Project Number} == select4@{Project Number},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 derive(Supply = iif( toInteger(Qty) > 0 ,toInteger(Qty),0),",
				"          Demand = iif( toInteger(Qty) <0,toInteger(Qty),0),",
				"          Date = iif( toInteger( dayOfMonth(toDate(Date)) ) < toInteger(dayOfMonth(currentDate())), '' , toString(Date)  )) ~> derivedColumn1",
				"derivedColumn1 derive({Order Type} = iif( Demand != 0, 'Demand', {Order Type} )) ~> derivedColumn2",
				"derivedColumn2 filter((toInteger(Supply) > 0 || Demand!=0 ) && {Order Type} != 'Project Inventory') ~> filter1",
				"sort1 aggregate(groupBy({Make Buy},",
				"          Org,",
				"          Supplier,",
				"          Date,",
				"          {Order Type},",
				"          Buyer,",
				"          {Planning Group},",
				"          {Project Business Area},",
				"          {Product Segment},",
				"          {Avg Item Cost},",
				"          {Product Line},",
				"          {Item Number}),",
				"     Demand = sum(toInteger(Demand)),",
				"          Supply = sum(toInteger(Supply))) ~> aggregate1",
				"filter1 sort(asc({Make Buy}, true),",
				"     asc(Org, true),",
				"     asc(Supplier, true),",
				"     asc(Date, true),",
				"     asc({Order Type}, true),",
				"     asc(Buyer, true),",
				"     asc({Planning Group}, true),",
				"     asc({Project Business Area}, true),",
				"     asc({Product Segment}, true),",
				"     asc({Avg Item Cost}, true),",
				"     asc({Product Line}, true),",
				"     asc({Item Number}, true)) ~> sort1",
				"aggregate1 select(mapColumn(",
				"          {Item Make Buy} = {Make Buy},",
				"          Org,",
				"          Supplier,",
				"          Date,",
				"          {Order Type},",
				"          {Buyer Name} = Buyer,",
				"          {Planning Group},",
				"          {Business Area} = {Project Business Area},",
				"          Segment = {Product Segment},",
				"          {Avg Item Cost},",
				"          {Product Line},",
				"          {Item Number},",
				"          Demand,",
				"          Supply",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"join1 select(mapColumn(",
				"          Assembly,",
				"          BuyParentLevel,",
				"          {Child of Buy},",
				"          Component,",
				"          {Cum Manufacturing Lead Time} = select1@{Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time} = select1@{Cumulative Total Lead Time},",
				"          {Engineering Change Order},",
				"          {Extended Quantity},",
				"          {Implementation Date},",
				"          {Item Avg Cost},",
				"          {Item Buyer Name},",
				"          {Item Description} = select1@{Item Description},",
				"          {Item Revision (MAS)},",
				"          {Item Type} = select1@{Item Type},",
				"          Level,",
				"          {Make/Buy},",
				"          {Org Code     },",
				"          Path,",
				"          {Postprocessing Lead Time} = select1@{Postprocessing Lead Time},",
				"          {Preprocessing Lead Time} = select1@{Preprocessing Lead Time},",
				"          {Processing Lead Time} = select1@{Processing Lead Time},",
				"          {Purchase Commod} = select1@{Purchase Commod},",
				"          {Receipt Routing} = select1@{Receipt Routing},",
				"          RecordID,",
				"          {Hold Attribute},",
				"          {Assembly Description},",
				"          {Organization Code},",
				"          {Item Number},",
				"          {Item Description},",
				"          {Item Creation Date},",
				"          {Planning Make Buy Code},",
				"          {Buyer Name},",
				"          {Planner Code},",
				"          {Preprocessing Lead Time},",
				"          {Processing Lead Time},",
				"          {Postprocessing Lead Time},",
				"          {Fixed Lead Time},",
				"          {Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time},",
				"          {Purchase Commod},",
				"          {Unit Of Measure},",
				"          {Receipt Routing},",
				"          {Item Status Code},",
				"          {Item Type},",
				"          {Itemcatinv Item Category Kff},",
				"          {Average Cost},",
				"          {Mrp Planning Method},",
				"          {Items$agile Item  Part  Catego},",
				"          {Wip Supply Type},",
				"          {Items$item Setup Verified}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"select7, select6 join({Org Code     } == Org",
				"     && Assembly == select6@{Item Number},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          Assembly,",
				"          BuyParentLevel,",
				"          {Child of Buy},",
				"          Component,",
				"          {Extended Quantity},",
				"          {Item Avg Cost},",
				"          {Item Revision (MAS)},",
				"          Level,",
				"          {Org Code     },",
				"          Path,",
				"          {Assembly Status Code},",
				"          {Assembly Description},",
				"          {Assembly Commodity Code},",
				"          {Assembly Planner Code},",
				"          {Assembly Make Buy},",
				"          {Item Make Buy},",
				"          Org,",
				"          Supplier,",
				"          Date,",
				"          {Order Type},",
				"          {Buyer Name},",
				"          {Planning Group},",
				"          {Business Area},",
				"          Segment,",
				"          {Avg Item Cost},",
				"          {Product Line},",
				"          {Item Number},",
				"          Demand,",
				"          Supply",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"sort2 aggregate(groupBy(Component,",
				"          {Item Avg Cost},",
				"          {Org Code     }),",
				"     count = count(Assembly)) ~> aggregate2",
				"select7, select6 join({Org Code     } == Org",
				"     && Assembly == select6@{Item Number},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4 filter(isNull(Org) && isNull(select6@{Item Number})) ~> filter3",
				"filter3 filter((({Org Code     })=='10' || ({Org Code     })=='30' || ({Org Code     })=='75') && ",
				"(({Assembly Status Code}) == 'Pre-Prod' || ({Assembly Status Code})=='Prototype')) ~> filter4",
				"select8 sort(asc(Component, true),",
				"     asc({Item Avg Cost}, true),",
				"     asc({Org Code     }, true)) ~> sort2",
				"select7 derive({Order Source} = 'Assy MRP') ~> derivedColumn3",
				"filter4 derive({Order Source} = 'No MRP Activity') ~> derivedColumn4",
				"aggregate2, select6 join({Org Code     } == Org",
				"     && Component == {Item Number},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5 derive({Order Source} = 'Comp MRP',",
				"          Assembly = 'Direct Comp') ~> derivedColumn5",
				"derivedColumn5, derivedColumn4 union(byName: true)~> union1",
				"union1, derivedColumn3 union(byName: true)~> union2",
				"union2, select10 join(Component == VPN,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"select5 filter(iif( instr({Manufacturer Name}, 'VIASAT') == 0,true(),false())) ~> filter5",
				"sort3 aggregate(groupBy(MPN,",
				"          VPN),",
				"     each(match(name!='{Manufacturer Name}'&&name!='MPN'&&name!='VPN'), $$ = first($$))) ~> aggregate3",
				"select11 aggregate(groupBy({Manufacturer Name},",
				"          VPN),",
				"     MPN = toString(collect(MPN))) ~> aggregate4",
				"aggregate4 derive(MPN = replace(replace(replace(MPN,'[',''),']'),'\"',''),",
				"          Manufacturer = upper({Manufacturer Name})) ~> derivedColumn6",
				"derivedColumn6 select(mapColumn(",
				"          {Manufacturer Name},",
				"          VPN,",
				"          MPN,",
				"          Manufacturer",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"aggregate3 select(mapColumn(",
				"          MPN,",
				"          VPN,",
				"          {MPN Description},",
				"          {MPN Status},",
				"          {Manufacturer Description},",
				"          {Manufacturer Name},",
				"          {Organization Code},",
				"          {Item Description},",
				"          {Item Status},",
				"          {VPN Status},",
				"          {Supplier Name},",
				"          {MPN Last Time Buy}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select11",
				"filter5 sort(asc({Manufacturer Name}, true),",
				"     asc(MPN, true),",
				"     asc(VPN, true)) ~> sort3",
				"join6 select(mapColumn(",
				"          Component,",
				"          {Item Avg Cost},",
				"          {Org Code     },",
				"          count,",
				"          {Item Make Buy},",
				"          Org,",
				"          Supplier,",
				"          Date,",
				"          {Order Type},",
				"          {Buyer Name},",
				"          {Planning Group},",
				"          {Business Area},",
				"          Segment,",
				"          {Avg Item Cost},",
				"          {Product Line},",
				"          {Item Number},",
				"          Demand,",
				"          Supply,",
				"          {Order Source},",
				"          Assembly,",
				"          BuyParentLevel,",
				"          {Child of Buy},",
				"          {Extended Quantity},",
				"          {Item Revision (MAS)},",
				"          Level,",
				"          Path,",
				"          {Assembly Status Code},",
				"          {Assembly Description},",
				"          {Assembly Commodity Code},",
				"          {Assembly Planner Code},",
				"          {Assembly Make Buy},",
				"          {Manufacturer Name},",
				"          VPN,",
				"          MPN,",
				"          Manufacturer",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select12",
				"select12 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['mrpcomponent'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}