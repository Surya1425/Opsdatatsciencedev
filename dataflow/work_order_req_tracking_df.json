{
	"name": "work_order_req_tracking_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "incsv1wipgo"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "incsv2wipjob"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "incsv3indented"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "incsv4invegoitems"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_AzSql",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filteringthedate"
				},
				{
					"name": "filteringstatus"
				},
				{
					"name": "joiningwipgowipjob"
				},
				{
					"name": "selectingindentclums"
				},
				{
					"name": "selectingjoinclums"
				},
				{
					"name": "aggregatein3"
				},
				{
					"name": "selectfilterclums"
				},
				{
					"name": "in2selectingclums"
				},
				{
					"name": "aggregateselectfilterclumsin2"
				},
				{
					"name": "joiningaggregatesinput32"
				},
				{
					"name": "selectingjoin32"
				},
				{
					"name": "sortingjoin32"
				},
				{
					"name": "selectingclumsfromsort"
				},
				{
					"name": "filteringclums"
				},
				{
					"name": "ifelseendifforfilterclums"
				},
				{
					"name": "filteringformulaclums"
				},
				{
					"name": "selectingclumsfromfilter"
				},
				{
					"name": "joiningselect3andinputcsv4"
				},
				{
					"name": "selectingclumsfromfilter34"
				},
				{
					"name": "ifelseifelsecondition"
				},
				{
					"name": "aggregatingselectingclum"
				},
				{
					"name": "joiningifelseifelseendifandaggregating"
				},
				{
					"name": "selectingclumsfromjoin"
				},
				{
					"name": "ifelseifendforselect"
				},
				{
					"name": "selectingclumsfilter"
				},
				{
					"name": "joining31"
				},
				{
					"name": "ifelseifendclums"
				},
				{
					"name": "joinderivedclumaggregateinput1"
				},
				{
					"name": "aggregatinginput1"
				},
				{
					"name": "aggregatinginputin3"
				},
				{
					"name": "joiningderivedandaggregateclums"
				},
				{
					"name": "select1"
				},
				{
					"name": "filtering3"
				},
				{
					"name": "selectingclumnsfromjoining"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select3"
				},
				{
					"name": "Finalformula"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> incsv1wipgo",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> incsv2wipjob",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> incsv3indented",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> incsv4invegoitems",
				"incsv2wipjob filter(toDate({Job Creation Date})>=toDate(addMonths(currentTimestamp(),-36))) ~> filteringthedate",
				"filteringthedate filter(Status != 'Cancelled') ~> filteringstatus",
				"incsv1wipgo, in2selectingclums join({Job Name} == {Job #},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningwipgowipjob",
				"incsv3indented select(mapColumn(",
				"          Assembly,",
				"          BuyParentLevel,",
				"          {Child of Buy},",
				"          {Item Number} = Component,",
				"          {Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time},",
				"          {Engineering Change Order},",
				"          {Extended Quantity},",
				"          {Implementation Date},",
				"          {Item Avg Cost},",
				"          {Item Buyer Name},",
				"          {Item Description},",
				"          {Item Revision (MAS)},",
				"          {Item Type},",
				"          Level,",
				"          {Make/Buy},",
				"          Org,",
				"          Path,",
				"          {Postprocessing Lead Time},",
				"          {Preprocessing Lead Time},",
				"          {Processing Lead Time},",
				"          {Purchase Commod},",
				"          QPA,",
				"          {Receipt Routing},",
				"          RecordID,",
				"          {Using Assembly},",
				"          {Hold Attribute}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingindentclums",
				"joiningwipgowipjob select(mapColumn(",
				"          {Assembly Planner Description},",
				"          {Assembly Planner Code},",
				"          Assembly = {Assembly$Sv$Part Number},",
				"          {Assembly Description},",
				"          {Item Number} = {Assmcomp$Sv$Part Number},",
				"          {Assy Comp Avg Cost},",
				"          {Item Description} = {Component Description},",
				"          {Component Planner Code},",
				"          {Component Planner Description},",
				"          {Component Qty Per Assembly},",
				"          {Component Quantity Issued},",
				"          {Component Quantity Open},",
				"          {Component Quantity Required},",
				"          {Component Required Date},",
				"          {Component Uom Code},",
				"          {Component Comments},",
				"          {Component Unit Cost},",
				"          {Component Revision},",
				"          {Job Created By},",
				"          {Job Creation Date},",
				"          {Job Flex Delivery Kit To},",
				"          {Job Name},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Released Date},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date},",
				"          {Job Status},",
				"          {Job Type},",
				"          {Job Description},",
				"          {Organization Code},",
				"          {Project Number},",
				"          {Routing Exist},",
				"          {Task Number},",
				"          {Wip Supply Type},",
				"          {WO Rev},",
				"          {Operation Sequence Number},",
				"          {Job Start Qty} = {ob Start Qty}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingjoinclums",
				"selectingindentclums aggregate(groupBy(Org,",
				"          Path),",
				"     each(match(name!='Org'&&name!='Path'), $$ = first($$))) ~> aggregatein3",
				"filteringstatus select(mapColumn(",
				"          {Item Number},",
				"          {Org Code}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectfilterclums",
				"filteringstatus select(mapColumn(",
				"          {WO Rev} = {Bill Revision},",
				"          {Job #},",
				"          {Job Type},",
				"          {ob Start Qty} = {Start Qty}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> in2selectingclums",
				"selectfilterclums aggregate(groupBy({Item Number},",
				"          {Org Code}),",
				"     each(match(name!='Item Number'&&name!='Org Code'), $$ = first($$))) ~> aggregateselectfilterclumsin2",
				"aggregatein3, aggregateselectfilterclumsin2 join(Assembly == aggregateselectfilterclumsin2@{Item Number}",
				"     && Org == {Org Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningaggregatesinput32",
				"joiningaggregatesinput32 select(mapColumn(",
				"          Path,",
				"          Assembly,",
				"          BuyParentLevel,",
				"          {Item Number} = {aggregatein3@Item Number},",
				"          {Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time},",
				"          {Extended Quantity},",
				"          {Item Avg Cost},",
				"          {Item Buyer Name},",
				"          {Item Description},",
				"          {Item Revision (MAS)},",
				"          {Item Type},",
				"          Level,",
				"          {Make/Buy},",
				"          {Postprocessing Lead Time},",
				"          {Preprocessing Lead Time},",
				"          {Processing Lead Time},",
				"          {Purchase Commod},",
				"          QPA,",
				"          {Receipt Routing},",
				"          RecordID,",
				"          {Using Assembly},",
				"          {Hold Attribute},",
				"          {Org } = {Org Code},",
				"          {Child of Buy}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingjoin32",
				"selectingjoin32 sort(desc(Path, false)) ~> sortingjoin32",
				"sortingjoin32 select(mapColumn(",
				"          Path,",
				"          Assembly,",
				"          BuyParentLevel,",
				"          {Item Number},",
				"          {Child of Buy},",
				"          {Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time},",
				"          {Extended Quantity},",
				"          {Item Avg Cost},",
				"          {Item Buyer Name},",
				"          {Item Description},",
				"          {Item Revision (MAS)},",
				"          {Item Type},",
				"          Level,",
				"          {Make/Buy},",
				"          {Postprocessing Lead Time},",
				"          {Preprocessing Lead Time},",
				"          {Processing Lead Time},",
				"          QPA,",
				"          {Receipt Routing},",
				"          {Using Assembly},",
				"          {Hold Attribute},",
				"          {Org }",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingclumsfromsort",
				"selectingclumsfromsort filter(isNull(BuyParentLevel)) ~> filteringclums",
				"filteringclums derive(Path = iif({Level}==0,{Assembly},Path)) ~> ifelseendifforfilterclums",
				"ifelseendifforfilterclums filter({QPA}!=0) ~> filteringformulaclums",
				"filteringformulaclums select(mapColumn(",
				"          Path,",
				"          Assembly,",
				"          BuyParentLevel,",
				"          {Item Number},",
				"          {Child of Buy},",
				"          {Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time},",
				"          {Extended Quantity},",
				"          {Item Avg Cost},",
				"          {Item Buyer Name},",
				"          {Item Description},",
				"          {Item Revision (MAS)},",
				"          {Item Type},",
				"          Level,",
				"          QPA,",
				"          {Receipt Routing},",
				"          {Using Assembly},",
				"          {Hold Attribute},",
				"          {Org }",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingclumsfromfilter",
				"selectingclumsfromfilter, incsv4invegoitems join({Using Assembly} == incsv4invegoitems@{Item Number}",
				"     && {Org } == {Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningselect3andinputcsv4",
				"joiningselect3andinputcsv4 select(mapColumn(",
				"          Path,",
				"          Assembly,",
				"          BuyParentLevel,",
				"          {Item Number} = {selectingclumsfromfilter@Item Number},",
				"          {Child of Buy},",
				"          {Cum Manufacturing Lead Time} = {selectingclumsfromfilter@Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time} = {selectingclumsfromfilter@Cumulative Total Lead Time},",
				"          {Extended Quantity},",
				"          {Item Avg Cost},",
				"          {Item Buyer Name},",
				"          {Item Description} = {selectingclumsfromfilter@Item Description},",
				"          {Item Revision (MAS)},",
				"          {Item Type} = {selectingclumsfromfilter@Item Type},",
				"          Level,",
				"          QPA,",
				"          {Receipt Routing} = {selectingclumsfromfilter@Receipt Routing},",
				"          {Using Assembly},",
				"          {Hold Attribute},",
				"          {Org },",
				"          {Inventory Planning Method Code},",
				"          {Items$Agile Access Restriction},",
				"          {Items$Vmi Item},",
				"          {UA WIPSUPPLYTYPE} = {Wip Supply Type}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingclumsfromfilter34",
				"selectingclumsfromfilter34 derive({UA Path} = iif({Level}==0,{Item Number},iif({Level}==1,{Using Assembly},left(Path,length(Path)-length({Item Number})+2)))) ~> ifelseifelsecondition",
				"selectingclumsfromfilter34 aggregate(groupBy(Path),",
				"     each(match(name!='Path'), $$ = first($$))) ~> aggregatingselectingclum",
				"ifelseifelsecondition, aggregatingselectingclum join({UA Path} == aggregatingselectingclum@Path,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningifelseifelseendifandaggregating",
				"joiningifelseifelseendifandaggregating select(mapColumn(",
				"          Path = selectingclumsfromfilter34@Path,",
				"          Assembly = {selectingclumsfromfilter34@Assembly},",
				"          BuyParentLevel = {selectingclumsfromfilter34@BuyParentLevel},",
				"          {Item Number} = {selectingclumsfromfilter34@Item Number},",
				"          {Child of Buy} = {selectingclumsfromfilter34@Child of Buy},",
				"          {Cum Manufacturing Lead Time} = {selectingclumsfromfilter34@Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time} = {selectingclumsfromfilter34@Cumulative Total Lead Time},",
				"          {Extended Quantity} = {selectingclumsfromfilter34@Extended Quantity},",
				"          {Item Avg Cost} = {selectingclumsfromfilter34@Item Avg Cost},",
				"          {Item Buyer Name} = {selectingclumsfromfilter34@Item Buyer Name},",
				"          {Item Description} = {selectingclumsfromfilter34@Item Description},",
				"          {Item Revision (MAS)} = {selectingclumsfromfilter34@Item Revision (MAS)},",
				"          {Item Type} = {selectingclumsfromfilter34@Item Type},",
				"          Level = {selectingclumsfromfilter34@Level},",
				"          QPA = {selectingclumsfromfilter34@QPA},",
				"          {Receipt Routing} = {selectingclumsfromfilter34@Receipt Routing},",
				"          {Using Assembly} = {selectingclumsfromfilter34@Using Assembly},",
				"          {Hold Attribute} = {selectingclumsfromfilter34@Hold Attribute},",
				"          {Org } = selectingclumsfromfilter34@{Org },",
				"          {Inventory Planning Method Code} = {selectingclumsfromfilter34@Inventory Planning Method Code},",
				"          {Items$Agile Access Restriction} = {selectingclumsfromfilter34@Items$Agile Access Restriction},",
				"          {Items$Vmi Item} = {selectingclumsfromfilter34@Items$Vmi Item},",
				"          {UA WIPSUPPLYTYPE} = {selectingclumsfromfilter34@UA WIPSUPPLYTYPE},",
				"          {UA Path},",
				"          Right_Level = {aggregatingselectingclum@Level},",
				"          {Right_Using Assembly} = {aggregatingselectingclum@Using Assembly},",
				"          {Right_Inventory Planning Method Code} = {aggregatingselectingclum@Inventory Planning Method Code},",
				"          {Right_Items$Agile Access Restriction} = {aggregatingselectingclum@Items$Agile Access Restriction},",
				"          {Right_Items$Vmi Item} = {aggregatingselectingclum@Items$Vmi Item}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingclumsfromjoin",
				"selectingclumsfromjoin derive({Using Assembly} = iif({UA WIPSUPPLYTYPE}=='Phantom',{Right_Using Assembly},{Using Assembly}),",
				"          {Using Assembly (Phantom)} = iif({UA WIPSUPPLYTYPE}=='Phantom',{Using Assembly}+\"\"+{UA WIPSUPPLYTYPE},{Using Assembly}),",
				"          Level = iif({UA WIPSUPPLYTYPE}=='Phantom',{Right_Level},{Level})) ~> ifelseifendforselect",
				"filtering3 select(mapColumn(",
				"          Assembly,",
				"          {Item Number},",
				"          {Child of Buy},",
				"          {Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time},",
				"          {Extended Quantity},",
				"          {Item Avg Cost},",
				"          {Item Buyer Name},",
				"          {Item Description},",
				"          {Item Type},",
				"          Level,",
				"          QPA,",
				"          {Receipt Routing},",
				"          {Using Assembly},",
				"          {Hold Attribute},",
				"          {Org },",
				"          {Inventory Planning Method Code},",
				"          {Items$Agile Access Restriction},",
				"          {Items$Vmi Item},",
				"          {Right_Inventory Planning Method Code},",
				"          {Right_Items$Agile Access Restriction},",
				"          {Right_Items$Vmi Item},",
				"          {Using Assembly (Phantom)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingclumsfilter",
				"selectingjoinclums, selectingclumsfilter join(selectingjoinclums@{Item Number} == selectingclumsfilter@{Item Number}",
				"     && {Organization Code} == {Org }",
				"     && selectingjoinclums@Assembly == selectingclumsfilter@Assembly,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joining31",
				"selectingclumnsfromjoining derive({Item Number} = iifNull({Item Number},{Right_Item Number},{Item Number}),",
				"          {Adjusted QPA} = toDouble({Job Start Qty})*QPA,",
				"          {Using Assembly} = iifNull({Using Assembly},Assembly,{Using Assembly}),",
				"          {Using Assembly (Phantom)} = iifNull({Using Assembly (Phantom)},Assembly,{Using Assembly (Phantom)})) ~> ifelseifendclums",
				"ifelseifendclums, aggregatinginput1 join(selectingclumnsfromjoining@{Job Name} == aggregatinginput1@{Job Name},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinderivedclumaggregateinput1",
				"selectingjoinclums aggregate(groupBy({Organization Code},",
				"          {Job Name}),",
				"     each(match(name!='Organization Code'&&name!='Job Name'), $$ = first($$))) ~> aggregatinginput1",
				"aggregatein3 aggregate(groupBy({Item Number},",
				"          Org),",
				"     each(match(name!='Item Number'&&name!='Org'), $$ = first($$))) ~> aggregatinginputin3",
				"select2, aggregatinginputin3 join(select2@Assembly == aggregatinginputin3@{Item Number}",
				"     && select2@Org == aggregatinginputin3@Org,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningderivedandaggregateclums",
				"select3 select(mapColumn(",
				"          {Assembly Planner Description},",
				"          {Assembly Planner Code},",
				"          {Assembly Description},",
				"          {Assy Comp Avg Cost},",
				"          {Item Description},",
				"          {Component Planner Code},",
				"          {Component Planner Description},",
				"          {Component Qty Per Assembly},",
				"          {Component Quantity Issued},",
				"          {Component Quantity Open},",
				"          {Component Quantity Required},",
				"          {Component Required Date},",
				"          {Component Uom Code},",
				"          {Job Created By},",
				"          {Job Creation Date},",
				"          {Job Flex Delivery Kit To},",
				"          {Job Name},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Released Date},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date},",
				"          {Organization Code},",
				"          {Project Number},",
				"          {Routing Exist},",
				"          {Task Number},",
				"          {Wip Supply Type},",
				"          {WO Rev},",
				"          {Job Start Qty},",
				"          Assembly,",
				"          {Child of Buy},",
				"          {Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time},",
				"          {Extended Quantity},",
				"          {Item Avg Cost},",
				"          {Item Buyer Name},",
				"          {Item Type},",
				"          Level,",
				"          QPA,",
				"          {Receipt Routing},",
				"          {Using Assembly},",
				"          {Hold Attribute},",
				"          {BOM Revision} = {BOM Revision },",
				"          {Adjusted QPA},",
				"          {Item Number},",
				"          Org,",
				"          {Right_Job Status},",
				"          {Right_Job Type},",
				"          {Using Assembly (Phantom)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1 filter(Level==1) ~> filtering3",
				"joining31 select(mapColumn(",
				"          {Assembly Planner Description},",
				"          {Assembly Planner Code},",
				"          Assembly = {selectingjoinclums@Assembly},",
				"          {Assembly Description},",
				"          {Assy Comp Avg Cost},",
				"          {Item Description} = {selectingjoinclums@Item Description},",
				"          {Component Planner Code},",
				"          {Component Planner Description},",
				"          {Component Qty Per Assembly},",
				"          {Component Quantity Issued},",
				"          {Component Quantity Open},",
				"          {Component Quantity Required},",
				"          {Component Required Date},",
				"          {Component Uom Code},",
				"          {Job Created By},",
				"          {Job Creation Date},",
				"          {Job Flex Delivery Kit To},",
				"          {Job Name},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Released Date},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date},",
				"          {Job Status},",
				"          {Job Type},",
				"          Org = {Organization Code},",
				"          {Project Number},",
				"          {Routing Exist},",
				"          {Task Number},",
				"          {Wip Supply Type},",
				"          {WO Rev},",
				"          {Job Start Qty},",
				"          {Child of Buy},",
				"          {Right_Item Number} = {Item Number},",
				"          {Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time},",
				"          {Extended Quantity},",
				"          {Item Avg Cost},",
				"          {Item Buyer Name},",
				"          {Right_Item Description} = {Item Description},",
				"          {Item Type},",
				"          QPA,",
				"          {Receipt Routing},",
				"          {Using Assembly},",
				"          {Hold Attribute},",
				"          {Right_Org } = {Org },",
				"          {Inventory Planning Method Code},",
				"          {Items$Agile Access Restriction},",
				"          {Items$Vmi Item},",
				"          {Right_Inventory Planning Method Code},",
				"          {Right_Items$Agile Access Restriction},",
				"          {Right_Items$Vmi Item},",
				"          {Using Assembly (Phantom)},",
				"          Level,",
				"          {Item Number} = {selectingjoinclums@Item Number}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingclumnsfromjoining",
				"joinderivedclumaggregateinput1 select(mapColumn(",
				"          {Assembly Planner Description} = {selectingclumnsfromjoining@Assembly Planner Description},",
				"          {Assembly Planner Code} = {selectingclumnsfromjoining@Assembly Planner Code},",
				"          {Item Number},",
				"          {Assembly Description} = {selectingclumnsfromjoining@Assembly Description},",
				"          {Assy Comp Avg Cost} = {selectingclumnsfromjoining@Assy Comp Avg Cost},",
				"          {Item Description} = {selectingclumnsfromjoining@Item Description},",
				"          {Component Planner Code} = {selectingclumnsfromjoining@Component Planner Code},",
				"          {Component Planner Description} = {selectingclumnsfromjoining@Component Planner Description},",
				"          {Component Qty Per Assembly} = {selectingclumnsfromjoining@Component Qty Per Assembly},",
				"          {Component Quantity Issued} = {selectingclumnsfromjoining@Component Quantity Issued},",
				"          {Component Quantity Open} = {selectingclumnsfromjoining@Component Quantity Open},",
				"          {Component Quantity Required} = {selectingclumnsfromjoining@Component Quantity Required},",
				"          {Component Required Date} = {selectingclumnsfromjoining@Component Required Date},",
				"          {Component Uom Code} = {selectingclumnsfromjoining@Component Uom Code},",
				"          {Job Created By} = {selectingclumnsfromjoining@Job Created By},",
				"          {Job Creation Date} = {selectingclumnsfromjoining@Job Creation Date},",
				"          {Job Flex Delivery Kit To} = {selectingclumnsfromjoining@Job Flex Delivery Kit To},",
				"          {Job Name} = {selectingclumnsfromjoining@Job Name},",
				"          {Job Quantity Completed} = {selectingclumnsfromjoining@Job Quantity Completed},",
				"          {Job Quantity Scheduled} = {selectingclumnsfromjoining@Job Quantity Scheduled},",
				"          {Job Released Date} = {selectingclumnsfromjoining@Job Released Date},",
				"          {Job Scheduled Completion Dt} = {selectingclumnsfromjoining@Job Scheduled Completion Dt},",
				"          {Job Start Date} = {selectingclumnsfromjoining@Job Start Date},",
				"          {Project Number} = {selectingclumnsfromjoining@Project Number},",
				"          {Routing Exist} = {selectingclumnsfromjoining@Routing Exist},",
				"          {Task Number} = {selectingclumnsfromjoining@Task Number},",
				"          {Wip Supply Type} = {selectingclumnsfromjoining@Wip Supply Type},",
				"          {WO Rev} = {selectingclumnsfromjoining@WO Rev},",
				"          {Job Start Qty} = {selectingclumnsfromjoining@Job Start Qty},",
				"          {Child of Buy},",
				"          {Right_Item Number},",
				"          {Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time},",
				"          {Extended Quantity},",
				"          {Item Avg Cost},",
				"          {Item Buyer Name},",
				"          {Right_Item Description},",
				"          {Item Type},",
				"          QPA,",
				"          {Receipt Routing},",
				"          {Using Assembly},",
				"          {Hold Attribute},",
				"          {Right_Org },",
				"          {Inventory Planning Method Code},",
				"          {Adjusted QPA},",
				"          {Items$Agile Access Restriction},",
				"          {Items$Vmi Item},",
				"          {Right_Inventory Planning Method Code},",
				"          {Right_Items$Agile Access Restriction},",
				"          {Right_Items$Vmi Item},",
				"          {Using Assembly (Phantom)},",
				"          {Organization Code},",
				"          {Right_Job Status} = {aggregatinginput1@Job Status},",
				"          {Right_Job Type} = {aggregatinginput1@Job Type},",
				"          {Right_WO Rev} = {aggregatinginput1@WO Rev},",
				"          Assembly = {selectingclumnsfromjoining@Assembly},",
				"          Org = {selectingclumnsfromjoining@Org},",
				"          Level",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"ifelseifendforselect derive({Using Assembly} = iif({Item Number}=='1268802','1268802',{Using Assembly})) ~> derivedColumn1",
				"joiningderivedandaggregateclums select(mapColumn(",
				"          {Assembly Planner Description},",
				"          {Assembly Planner Code},",
				"          {Item Number} = select2@{Item Number},",
				"          {Assembly Description},",
				"          {Assy Comp Avg Cost},",
				"          {Item Description} = {select2@Item Description},",
				"          {Component Planner Code},",
				"          {Component Planner Description},",
				"          {Component Qty Per Assembly},",
				"          {Component Quantity Issued},",
				"          {Component Quantity Open},",
				"          {Component Quantity Required},",
				"          {Component Required Date},",
				"          {Component Uom Code},",
				"          {Job Created By},",
				"          {Job Creation Date},",
				"          {Job Flex Delivery Kit To},",
				"          {Job Name},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Released Date},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date},",
				"          {Project Number},",
				"          {Routing Exist},",
				"          {Task Number},",
				"          {Wip Supply Type},",
				"          {WO Rev},",
				"          {Job Start Qty},",
				"          {Child of Buy} = {select2@Child of Buy},",
				"          {Left_Right_Item Number} = {Right_Item Number},",
				"          {Cum Manufacturing Lead Time} = {select2@Cum Manufacturing Lead Time},",
				"          {Cumulative Total Lead Time} = {select2@Cumulative Total Lead Time},",
				"          {Extended Quantity} = {select2@Extended Quantity},",
				"          {Item Avg Cost} = {select2@Item Avg Cost},",
				"          {Item Buyer Name} = {select2@Item Buyer Name},",
				"          {Right_Item Description},",
				"          {Item Type} = {select2@Item Type},",
				"          QPA = {select2@QPA},",
				"          {Receipt Routing} = {select2@Receipt Routing},",
				"          {Using Assembly},",
				"          {Hold Attribute} = {select2@Hold Attribute},",
				"          {Right_Org },",
				"          {Inventory Planning Method Code},",
				"          {Items$Agile Access Restriction},",
				"          {Items$Vmi Item},",
				"          {Right_Inventory Planning Method Code},",
				"          {Right_Items$Agile Access Restriction},",
				"          {Right_Items$Vmi Item},",
				"          {Using Assembly (Phantom)},",
				"          {Organization Code},",
				"          {Right_Job Status},",
				"          {Right_Job Type},",
				"          {Right_WO Rev},",
				"          Assembly = {select2@Assembly},",
				"          Org = {select2@Org},",
				"          Level,",
				"          {BOM Revision } = {Item Revision (MAS)},",
				"          {Adjusted QPA}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select1 derive({Outstanding Status} = iif(toInteger({Component Quantity Issued})>{Adjusted QPA},'Overissued',iif(toInteger({Component Quantity Issued})=={Adjusted QPA},'Fulfilled',iif(toInteger({Component Quantity Issued})<{Adjusted QPA},'Open',\r",
				"iif(isNull({Adjusted QPA}),'No Requirement','unknown')))),",
				"          {Date Published} = currentDate()) ~> Finalformula",
				"Finalformula sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> sink1"
			]
		}
	}
}