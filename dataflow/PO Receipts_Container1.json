{
	"name": "PO Receipts_Container1",
	"properties": {
		"type": "Flowlet",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "csvLS1",
						"type": "LinkedServiceReference"
					},
					"name": "POG0ReceiptsVsat"
				},
				{
					"linkedService": {
						"referenceName": "csvLS1",
						"type": "LinkedServiceReference"
					},
					"name": "POReceipts2015onward"
				},
				{
					"linkedService": {
						"referenceName": "csvLS1",
						"type": "LinkedServiceReference"
					},
					"name": "VendorData"
				},
				{
					"linkedService": {
						"referenceName": "csvLS1",
						"type": "LinkedServiceReference"
					},
					"name": "PR001196CommodityCode"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "unioningReceipts"
				},
				{
					"name": "UniqueRows"
				},
				{
					"name": "filter1"
				},
				{
					"name": "RenamingColumns"
				},
				{
					"name": "selectingVendors"
				},
				{
					"name": "Formulae"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "FormulaNewCommodityCode"
				},
				{
					"name": "LeftOuterJoin"
				},
				{
					"name": "sortingTDate"
				},
				{
					"name": "UniqueRows2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "lookupVendorData"
				},
				{
					"name": "selectingReq"
				},
				{
					"name": "output1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Vendor Number} as string,",
				"          {Vendor Site Country} as string,",
				"          {Viasat Receiving Site} as string,",
				"          {Waybill Airbill Number} as string,",
				"          {Buyer Name} as string,",
				"          {Commodity Code} as string,",
				"          {Created By} as string,",
				"          {Currency Code} as string,",
				"          {Del To Location Code} as string,",
				"          {Del To Location Description} as string,",
				"          {Destination Type Code} as string,",
				"          {Distribution Id} as string,",
				"          {Distribution Num} as string,",
				"          {Fob Lookup Code} as string,",
				"          {Header Id} as string,",
				"          {Inspection Status Code} as string,",
				"          {Intangible Type} as string,",
				"          {Item Description} as string,",
				"          {Item Number} as string,",
				"          {Last Updated By} as string,",
				"          {Line Id} as string,",
				"          {Line Location Id} as string,",
				"          {Line Num} as string,",
				"          {Line Type} as string,",
				"          {Mobile Txn} as string,",
				"          {Organization Code} as string,",
				"          {Organization Id} as short,",
				"          {Organization Name} as string,",
				"          {Packing Slip} as string,",
				"          {Po Line Location Id} as string,",
				"          {Po Number} as string,",
				"          {Po Type} as string,",
				"          {Po Unit Price} as string,",
				"          {Project Number} as string,",
				"          {Quantity Received} as string,",
				"          {Receipt Creation Date} as string,",
				"          {Receipt Num} as string,",
				"          {Release Num} as string,",
				"          {Repair Line Id} as string,",
				"          {Routing Name} as string,",
				"          {Ship From Location Code} as string,",
				"          {Ship To Location Code} as string,",
				"          {Ship To Location Description} as string,",
				"          {Ship To Org Code} as string,",
				"          {Shipment Num} as string,",
				"          {Shipped Date} as string,",
				"          {Task Number} as string,",
				"          {Transaction Date} as string,",
				"          {Transaction Id} as string,",
				"          {Transaction Type} as string,",
				"          {Vendor Name} as string,",
				"          {Repo Load Dttm} as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'qbsc-supplier-quality',",
				"     folderPath: 'input',",
				"     fileName: 'POG0_Receipts_Vsat.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> POG0ReceiptsVsat",
				"source(output(",
				"          {Commodity Code} as string,",
				"          {Created By} as string,",
				"          {Currency Code} as string,",
				"          {Del To Location Code} as string,",
				"          {Del To Location Description} as string,",
				"          {Destination Type Code} as string,",
				"          {Distribution Id} as string,",
				"          {Distribution Num} as string,",
				"          {Fob Lookup Code} as string,",
				"          {Header Id} as string,",
				"          {Intangible Type} as string,",
				"          {Item Description} as string,",
				"          {Item Number} as string,",
				"          {Last Updated By} as string,",
				"          {Line Id} as string,",
				"          {Line Location Id} as string,",
				"          {Line Num} as string,",
				"          {Line Type} as string,",
				"          {Mobile Txn} as string,",
				"          {Organization Code} as string,",
				"          {Organization Name} as string,",
				"          {Packing Slip} as string,",
				"          {Po Number} as string,",
				"          {Po Type} as string,",
				"          {Po Unit Price} as string,",
				"          {Project Number} as string,",
				"          {Quantity Received} as string,",
				"          {Receipt Num} as string,",
				"          {Receiving Transaction Type} as string,",
				"          {Release Num} as string,",
				"          {Repair Line ID} as string,",
				"          {Routing Name} as string,",
				"          {Ship To Location Code} as string,",
				"          {Ship To Location Description} as string,",
				"          {Shipment Num} as string,",
				"          {Shipped Date} as string,",
				"          {Task Number} as string,",
				"          {Transaction Date} as string,",
				"          {Transaction Type} as string,",
				"          {Vendor Name} as string,",
				"          {Vendor Number} as string,",
				"          {Waybill Airbill Number} as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'qbsc-supplier-quality',",
				"     folderPath: 'input',",
				"     fileName: 'PO Receipts_2015 onward.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> POReceipts2015onward",
				"source(output(",
				"          {Vendor Name} as string,",
				"          {Supplier Group Name} as string,",
				"          {Supplier Segment} as string,",
				"          {SBR Type} as string,",
				"          {SBR Group} as string,",
				"          {Supplier Contract} as string,",
				"          {Supplier Type} as string,",
				"          {Supplier Commodity Group} as string,",
				"          {Supplier Commodity Segment} as string,",
				"          {Vendor Number} as integer,",
				"          {Vendor Type Code} as string,",
				"          {Small Business Flag} as boolean,",
				"          {Certified 8 a  SB} as boolean,",
				"          {D B D U N S Number} as integer,",
				"          {Disabled Veteran} as boolean,",
				"          {Foreign Business} as boolean,",
				"          Disadvantaged as boolean,",
				"          HUBzone as boolean,",
				"          {Historically Black Instit} as boolean,",
				"          {ITAR Compliant} as boolean,",
				"          {Minority Institutions} as boolean,",
				"          {Reps Certs on File} as string,",
				"          {Veteran Owned} as boolean,",
				"          {Women Owned Flag} as boolean,",
				"          {Inactive Flag} as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'excel',",
				"     fileSystem: 'qbsc-supplier-quality',",
				"     folderPath: 'input',",
				"     fileName: 'Vendor Data.xlsx',",
				"     sheetName: 'All Vendors',",
				"     firstRowAsHeader: true) ~> VendorData",
				"source(output(",
				"          {Commodity Code} as string,",
				"          {Business Rules for GEMS see GEM Rules tab} as string,",
				"          Description as string,",
				"          {Custom (Oracle ASL)} as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'nmrs',",
				"     folderPath: 'input',",
				"     fileName: 'PR001196 - Commodity Code.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> PR001196CommodityCode",
				"POG0ReceiptsVsat, POReceipts2015onward union(byName: true)~> unioningReceipts",
				"RenamingColumns aggregate(groupBy({Commodity Code},",
				"          {Created By},",
				"          {Currency Code},",
				"          {Del To Location Code},",
				"          {Del To Location Description},",
				"          {Destination Type Code},",
				"          {Distribution Id},",
				"          {Distribution Num},",
				"          {Fob Lookup Code},",
				"          {Header Id},",
				"          {Intangible Type},",
				"          {Item Description},",
				"          {Item Number},",
				"          {Last Updated By},",
				"          {Line Id},",
				"          {Line Location Id},",
				"          {Line Num},",
				"          {Line Type},",
				"          {Mobile Txn},",
				"          {Organization Code},",
				"          {Organization Name},",
				"          {Packing Slip},",
				"          {Po Number},",
				"          {Po Type},",
				"          {Po Unit Price},",
				"          {Project Number},",
				"          {Quantity Received},",
				"          {Receipt Num},",
				"          {Release Num},",
				"          RenamingColumns@{Repair Line ID},",
				"          {Routing Name},",
				"          {Ship To Location Code},",
				"          {Ship To Location Description},",
				"          {Shipment Num},",
				"          {Shipped Date},",
				"          {Task Number},",
				"          {Transaction Date},",
				"          {Transaction Type},",
				"          Supplier,",
				"          {Supplier Number},",
				"          {Waybill Airbill Number},",
				"          {Receiving Transaction Type}),",
				"     each(match(name=='Vendor Site Country'||name=='Viasat Receiving Site'||name=='Buyer Name'||name=='Inspection Status Code'||name=='Oraganization Id'||name=='Po Line Location Id'||name=='Receipt Creation Date'||name=='Ship From Location Code'||name=='Ship To Org Code'||name=='Transaction Id'||name=='Repo Load Dttm'), $$ = first($$))) ~> UniqueRows",
				"UniqueRows filter({Transaction Date} >= toString(subMonths(toTimestamp(substring(toString(currentTimestamp()),1,8)+'01'+' '+'00:00:00'),28)) &&\r",
				"in([\"08\",\"10\",\"14\",\"30\",\"75\",\"8\"],{Organization Code}) &&\r",
				"not(isNull({Item Number})) &&\r",
				"{Quantity Received} != '0' &&\r",
				"not(isNull({Quantity Received})) &&\r",
				"{Po Unit Price} != '0' &&\r",
				"{Destination Type Code} == \"RECEIVING\" &&\r",
				"{Transaction Type} == \"RECEIVE\") ~> filter1",
				"unioningReceipts select(mapColumn(",
				"          {Supplier Number} = {Vendor Number},",
				"          {Vendor Site Country},",
				"          {Viasat Receiving Site},",
				"          {Waybill Airbill Number},",
				"          {Buyer Name},",
				"          {Commodity Code},",
				"          {Created By},",
				"          {Currency Code},",
				"          {Del To Location Code},",
				"          {Del To Location Description},",
				"          {Destination Type Code},",
				"          {Distribution Id},",
				"          {Distribution Num},",
				"          {Fob Lookup Code},",
				"          {Header Id},",
				"          {Inspection Status Code},",
				"          {Intangible Type},",
				"          {Item Description},",
				"          {Item Number},",
				"          {Last Updated By},",
				"          {Line Id},",
				"          {Line Location Id},",
				"          {Line Num},",
				"          {Line Type},",
				"          {Mobile Txn},",
				"          {Organization Code},",
				"          {Organization Id},",
				"          {Organization Name},",
				"          {Packing Slip},",
				"          {Po Line Location Id},",
				"          {Po Number},",
				"          {Po Type},",
				"          {Po Unit Price},",
				"          {Project Number},",
				"          {Quantity Received},",
				"          {Receipt Creation Date},",
				"          {Receipt Num},",
				"          {Release Num},",
				"          {Repair Line Id} = unioningReceipts@{Repair Line Id},",
				"          {Routing Name},",
				"          {Ship From Location Code},",
				"          {Ship To Location Code},",
				"          {Ship To Location Description},",
				"          {Ship To Org Code},",
				"          {Shipment Num},",
				"          {Shipped Date},",
				"          {Task Number},",
				"          {Transaction Date},",
				"          {Transaction Id},",
				"          {Transaction Type},",
				"          Supplier = {Vendor Name},",
				"          {Repo Load Dttm},",
				"          {Receiving Transaction Type},",
				"          {Repair Line ID} = unioningReceipts@{Repair Line ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamingColumns",
				"VendorData select(mapColumn(",
				"          VN = {Vendor Name},",
				"          SGN = {Supplier Group Name}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingVendors",
				"lookupVendorData derive(Supplier = iif(isNull(SGN),Supplier,SGN),",
				"          Period = iif(\r",
				"month(toTimestamp({Transaction Date}))==1 ||\r",
				"month(toTimestamp({Transaction Date}))==2 || \r",
				"month(toTimestamp({Transaction Date}))==3,\r",
				"toString(year(toTimestamp({Transaction Date})))+'Q4',\r",
				"iif(\r",
				"month(toTimestamp({Transaction Date}))==4 ||\r",
				"month(toTimestamp({Transaction Date}))==5 ||\r",
				"month(toTimestamp({Transaction Date}))==6,\r",
				"toString(year(addMonths(toTimestamp({Transaction Date}),12)))+'Q1',\r",
				"iif(\r",
				"month(toTimestamp({Transaction Date}))==7 ||\r",
				"month(toTimestamp({Transaction Date}))==8 ||\r",
				"month(toTimestamp({Transaction Date}))==9,\r",
				"toString(year(addMonths(toTimestamp({Transaction Date}),12)))+'Q2',\r",
				"iif(month(toTimestamp({Transaction Date}))==12 || \r",
				"month(toTimestamp({Transaction Date}))==10 || \r",
				"month(toTimestamp({Transaction Date}))==11,\r",
				"toString(year(addMonths(toTimestamp({Transaction Date}),12)))+'Q3',\r",
				"'ERROR')))),",
				"          Month = case(month(toTimestamp({Transaction Date})) == 1,\"JAN\",\r",
				"month(toTimestamp({Transaction Date})) == 2,\"FEB\",\r",
				"month(toTimestamp({Transaction Date})) == 3,\"MAR\",\r",
				"month(toTimestamp({Transaction Date})) == 4,\"APR\",\r",
				"month(toTimestamp({Transaction Date})) == 5,\"MAY\",\r",
				"month(toTimestamp({Transaction Date})) == 6,\"JUN\",\r",
				"month(toTimestamp({Transaction Date})) == 7,\"JUL\",\r",
				"month(toTimestamp({Transaction Date})) == 8,\"AUG\",\r",
				"month(toTimestamp({Transaction Date})) == 9,\"SEP\",\r",
				"month(toTimestamp({Transaction Date})) == 10,\"OCT\",\r",
				"month(toTimestamp({Transaction Date})) == 11,\"NOV\",\r",
				"\"DEC\"),",
				"          Year = year(toTimestamp({Transaction Date}))) ~> Formulae",
				"Formulae derive({Calender Peiod} = iif(toInteger(right(Period, 1)) == 4,left(Period, 4)+'-01-01',\r",
				"iif(toInteger(right(Period, 1)) == 1,toString(toInteger(left(Period,4))-1)+'-04-01',\r",
				"iif(toInteger(right(Period, 1)) == 2,toString(toInteger(left(Period,4))-1)+'-07-01',\r",
				"iif(toInteger(right(Period, 1)) == 3,toString(toInteger(left(Period,4))-1)+'-10-01',\r",
				"'error'))))) ~> derivedColumn1",
				"PR001196CommodityCode derive({New Commodity Code} = left({Commodity Code},2)+\".\"+{Commodity Code}) ~> FormulaNewCommodityCode",
				"derivedColumn1, FormulaNewCommodityCode join(UniqueRows@{Commodity Code} == {New Commodity Code},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftOuterJoin",
				"selectingReq sort(asc({Transaction Date}, false)) ~> sortingTDate",
				"sortingTDate aggregate(groupBy({Commodity Code},",
				"          {Created By},",
				"          {Currency Code},",
				"          {Del To Location Code},",
				"          {Del To Location Description},",
				"          {Destination Type Code},",
				"          {Distribution Id},",
				"          {Distribution Num},",
				"          {Header Id},",
				"          {Item Description},",
				"          {Item Number},",
				"          {Line Id},",
				"          {Line Location Id},",
				"          {Line Num},",
				"          {Line Type},",
				"          {Organization Code},",
				"          {Organization Name},",
				"          {Po Number},",
				"          {Po Type},",
				"          {Po Unit Price},",
				"          {Project Number},",
				"          {Quantity Rcvd},",
				"          {Receipt Num},",
				"          {Receiving Transaction Type},",
				"          {Release Num},",
				"          {Repair Line ID},",
				"          {Routing Name},",
				"          {Shipment Num},",
				"          {Task Number},",
				"          {Transaction Date},",
				"          {Transaction Type},",
				"          Supplier,",
				"          {Supplier Number},",
				"          {Waybill Airbill Number},",
				"          Period,",
				"          Month,",
				"          Year),",
				"     each(match(name=='Vendor Site Country'||name=='Viasat Receiving Site'||name=='Buyer Name'||name=='Inspection Status Code'||name=='Organization Id'||name=='Po Line Location Id'||name=='Receipt Creation Date'||name=='Ship From Location Code'||name=='Ship To Org Code'||name=='Transaction Id'||name=='Repo Load Dttm'||name=='Calender Period'||name=='Commodity Code Description'||name=='Custom Commodity'||name=='Last Updated By'), $$ = first($$))) ~> UniqueRows2",
				"UniqueRows2 derive({Last Ran - Generate Data} = currentTimestamp(),",
				"          {Workflow Generating Data} = 'QBSC - Supplier Quality Scoring-Inspection Calculation_PI') ~> derivedColumn2",
				"filter1, selectingVendors lookup(Supplier == VN,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupVendorData",
				"LeftOuterJoin select(mapColumn(",
				"          {Commodity Code} = UniqueRows@{Commodity Code},",
				"          {Created By},",
				"          {Currency Code},",
				"          {Del To Location Code},",
				"          {Del To Location Description},",
				"          {Destination Type Code},",
				"          {Distribution Id},",
				"          {Distribution Num},",
				"          {Header Id},",
				"          {Item Description},",
				"          {Item Number},",
				"          {Last Updated By},",
				"          {Line Id},",
				"          {Line Location Id},",
				"          {Line Num},",
				"          {Line Type},",
				"          {Organization Code},",
				"          {Organization Name},",
				"          {Po Number},",
				"          {Po Type},",
				"          {Po Unit Price},",
				"          {Project Number},",
				"          {Quantity Rcvd} = {Quantity Received},",
				"          {Receipt Num},",
				"          {Release Num},",
				"          {Repair Line ID},",
				"          {Routing Name},",
				"          {Shipment Num},",
				"          {Task Number},",
				"          {Transaction Date},",
				"          {Transaction Type},",
				"          Supplier,",
				"          {Supplier Number},",
				"          {Waybill Airbill Number},",
				"          {Receiving Transaction Type},",
				"          {Vendor Site Country},",
				"          {Viasat Receiving Site},",
				"          {Buyer Name},",
				"          {Inspection Status Code},",
				"          {Po Line Location Id},",
				"          {Receipt Creation Date},",
				"          {Ship From Location Code},",
				"          {Ship To Org Code},",
				"          {Transaction Id},",
				"          {Repo Load Dttm},",
				"          Period,",
				"          Month,",
				"          Year,",
				"          {Calender Peiod},",
				"          {Commodity Code} = PR001196CommodityCode@{Commodity Code},",
				"          {Business Rules for GEMS see GEM Rules tab},",
				"          Description,",
				"          {Custom (Oracle ASL)},",
				"          {New Commodity Code}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingReq",
				"derivedColumn2 output() ~> output1"
			]
		}
	}
}