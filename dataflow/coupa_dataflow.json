{
	"name": "coupa_dataflow",
	"properties": {
		"folder": {
			"name": "RAJASHEKAR_DATAFLOWS/coupa"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "INVOICES_CSV",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "INVOICE_LINES_CSV",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "coupa_oracle_outpur",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "DATE_DIMENSIONS",
						"type": "DatasetReference"
					},
					"name": "source4"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "coupa_invoices_output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "filter3"
				},
				{
					"name": "union1"
				},
				{
					"name": "select6"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          created_at as string,",
				"          updated_at as string,",
				"          comments as string,",
				"          compliant as string,",
				"          handling_amount as string,",
				"          internal_note as string,",
				"          invoice_date as string,",
				"          delivery_number as string,",
				"          delivery_date as string,",
				"          invoice_number as string,",
				"          line_level_taxation as string,",
				"          misc_amount as string,",
				"          shipping_amount as string,",
				"          status as string,",
				"          total_with_taxes as string,",
				"          gross_total as string,",
				"          supplier_total as string,",
				"          supplier_note as string,",
				"          discount_due_date as string,",
				"          net_due_date as string,",
				"          discount_amount as string,",
				"          tax_code as string,",
				"          tax_rate as string,",
				"          tax_amount as string,",
				"          tolerance_failures as string,",
				"          paid as string,",
				"          payment_date as string,",
				"          payment_notes as string,",
				"          exported as string,",
				"          canceled as string,",
				"          tax_amount_engine as string,",
				"          tax_code_engine as string,",
				"          tax_rate_engine as string,",
				"          last_exported_at as string,",
				"          image_scan as string,",
				"          image_scan_url as string,",
				"          supplier_created as string,",
				"          early_payment_provisions as string,",
				"          margin_scheme as string,",
				"          cash_accounting_scheme_reference as string,",
				"          exchange_rate as string,",
				"          late_payment_penalties as string,",
				"          credit_reason as string,",
				"          origin_currency_net as string,",
				"          taxes_in_origin_country_currency as string,",
				"          origin_currency_gross as string,",
				"          pre_payment_date as string,",
				"          self_billing_reference as string,",
				"          reverse_charge_reference as string,",
				"          discount_percent as string,",
				"          credit_note_differences_with_original_invoice as string,",
				"          original_value_of_supply as string,",
				"          correct_value_of_supply as string,",
				"          customs_declaration_number as string,",
				"          customs_office as string,",
				"          customs_declaration_date as string,",
				"          payment_order_reference as string,",
				"          payment_order_number as string,",
				"          advance_payment_received_amount as string,",
				"          lock_version_key as string,",
				"          series as string,",
				"          folio_number as string,",
				"          use_of_invoice as string,",
				"          form_of_payment as string,",
				"          type_of_receipt as string,",
				"          payment_method as string,",
				"          issuance_place as string,",
				"          confirmation as string,",
				"          original_invoice_date as string,",
				"          withholding_tax_override as string,",
				"          clearance_document as string,",
				"          coupa_accelerate_status as string,",
				"          type_of_relationship as string,",
				"          invoice_reference_number as string,",
				"          dispute_method as string,",
				"          date_received as string,",
				"          sender_email as string,",
				"          inbox_name as string,",
				"          amount_due as string,",
				"          tax_due_to_supplier as string,",
				"          customer_accounting_tax as string,",
				"          payment_channel as string,",
				"          show_tax_information as string,",
				"          document_type as string,",
				"          original_invoice_number as string,",
				"          date_of_discovery_of_facts_decisive_for_correction as string,",
				"          place_of_supply as string,",
				"          split_payment_mechanism as string,",
				"          gross_total_less_discount as string,",
				"          net_total_less_discount as string,",
				"          total_taxes_less_discount as string,",
				"          customer_accounting_tax_less_discount as string,",
				"          amount_due_less_discount as string,",
				"          endorsement_on_invoices as string,",
				"          new_means_of_transport as string,",
				"          place_of_issuance as string,",
				"          amount_of_advance_payment as string,",
				"          transaction_uuid as string,",
				"          transaction_notification_date as string,",
				"          content_validation as string,",
				"          supplier_invoice_issuer_name as string,",
				"          supplier_invoice_reviewer_name as string,",
				"          supplier_payment_collector_name as string,",
				"          signed_qr_code as string,",
				"          archive_entity_id as string,",
				"          invoice_issuance_time as string,",
				"          cash_register_operator as string,",
				"          means_of_payment as string,",
				"          unique_identification_code_of_cash_receipt as string,",
				"          security_code_of_issuer as string,",
				"          state_tax_number as string,",
				"          state_tax_number_for_substitute_taxpayer as string,",
				"          municipal_tax_number as string,",
				"          serial_code_of_fiscal_invoice as string,",
				"          verification_code as string,",
				"          type_of_document as string,",
				"          protocol_number as string,",
				"          nature_of_operation as string,",
				"          type_of_operation as string,",
				"          freight_type as string,",
				"          vehicle_license_plate as string,",
				"          national_enrollment_of_conveyor as string,",
				"          volume_amount as string,",
				"          volume_gross_weight as string,",
				"          volume_liquid_weight as string,",
				"          volume_brand as string,",
				"          volume_type as string,",
				"          volume_numbering as string,",
				"          image_scan_content_type as string,",
				"          image_scan_file_name as string,",
				"          image_scan_file_size as string,",
				"          is_credit_note as string,",
				"          channel as string,",
				"          currency_id as string,",
				"          line_count as string,",
				"          custom_fields_oracle_voucher as string,",
				"          custom_fields_voucher_exception as string,",
				"          custom_fields_supplier_insurance__approver as string,",
				"          custom_fields_nonpo_backed_categories as string,",
				"          payments as string,",
				"          account_type_id as string,",
				"          account_type_name as string,",
				"          currency_code as string,",
				"          payment_term_id as string,",
				"          payment_term_code as string,",
				"          remit_to_address_id as string,",
				"          remit_to_address_remit_to_code as string,",
				"          remit_to_address_name as string,",
				"          ship_to_address_id as string,",
				"          ship_to_address_name as string,",
				"          ship_to_address_location_code as string,",
				"          bill_to_address_id as string,",
				"          bill_to_address_name as string,",
				"          bill_to_address_location_code as string,",
				"          supplier_id as string,",
				"          supplier_name as string,",
				"          supplier_number as string,",
				"          attachments as string,",
				"          invoice_payment_receipts as string,",
				"          invoice_charges as string,",
				"          invoice_lines as string,",
				"          approvals as string,",
				"          created_by_id as string,",
				"          created_by_login as string,",
				"          created_by_email as string,",
				"          updated_by_id as string,",
				"          updated_by_login as string,",
				"          updated_by_email as string,",
				"          tax_lines as string,",
				"          withholding_tax_lines as string,",
				"          tcs_tax_lines as string,",
				"          current_integration_history_records as string,",
				"          requested_by_id as string,",
				"          requested_by_login as string,",
				"          requested_by_email as string,",
				"          tags as string,",
				"          taggings as string,",
				"          failed_tolerances as string,",
				"          dispute_reasons as string,",
				"          payment_agreement_notes as string,",
				"          pay_invoice_id as string,",
				"          supplier_remit_to_id as string,",
				"          invoice_from_address_id as string,",
				"          supplier_tax_registration_number as string,",
				"          ship_from_address_id as string,",
				"          buyer_tax_registration_number as string,",
				"          origin_country_id as string,",
				"          origin_country_code as string,",
				"          origin_country_name as string,",
				"          destination_country_id as string,",
				"          destination_country_code as string,",
				"          destination_country_name as string,",
				"          legal_destination_country_id as string,",
				"          legal_destination_country_code as string,",
				"          legal_destination_country_name as string,",
				"          tax_code_id as string,",
				"          tax_code_code as string,",
				"          abandon_reason_id as string,",
				"          abandon_reason_code as string,",
				"          abandon_reason_reason_type as string,",
				"          repo_load_dttm as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          id as string,",
				"          created_at as date,",
				"          updated_at as string,",
				"          accounting_total as double,",
				"          description as string,",
				"          line_num as string,",
				"          order_header_num as string,",
				"          po_number as string,",
				"          order_line_id as string,",
				"          order_line_num as string,",
				"          price as double,",
				"          net_weight as string,",
				"          price_per_uom as string,",
				"          quantity as string,",
				"          adjustment_type as string,",
				"          status as string,",
				"          tax_rate as string,",
				"          tax_location as string,",
				"          tax_amount as string,",
				"          tax_description as string,",
				"          tax_supply_date as string,",
				"          total as string,",
				"          type as string,",
				"          tax_amount_engine as string,",
				"          tax_code_engine as string,",
				"          tax_rate_engine as string,",
				"          tax_distribution_total as string,",
				"          shipping_distribution_total as string,",
				"          handling_distribution_total as string,",
				"          misc_distribution_total as string,",
				"          match_reference as string,",
				"          original_date_of_supply as string,",
				"          delivery_note_number as string,",
				"          discount_amount as string,",
				"          company_uom as string,",
				"          property_tax_account as string,",
				"          source_part_num as string,",
				"          supp_aux_part_num as string,",
				"          customs_declaration_number as string,",
				"          hsn_sac_code as string,",
				"          unspsc as string,",
				"          billing_note as string,",
				"          fiscal_code as string,",
				"          classification_of_goods as string,",
				"          municipality_taxation_code as string,",
				"          item_barcode as string,",
				"          category as string,",
				"          subcategory as string,",
				"          deductibility as string,",
				"          custom_fields_prepayment_required as string,",
				"          custom_fields_start_date as string,",
				"          custom_fields_end_date as string,",
				"          custom_fields_unallowable as string,",
				"          custom_fields_taxable as string,",
				"          account_id as string,",
				"          account_allocations as string,",
				"          accounting_total_currency_id as string,",
				"          currency_id as string,",
				"          uom_id as string,",
				"          order_line_commodity_id as string,",
				"          order_line_custom_fields_government_contract_number as string,",
				"          order_line_custom_fields_dpas_number as string,",
				"          order_line_custom_fields_supplier_business_size_classification as string,",
				"          order_line_custom_fields_award_classification as string,",
				"          order_line_custom_fields_government_property as string,",
				"          order_line_custom_fields_custom_fields as string,",
				"          contract_id as string,",
				"          tax_lines as string,",
				"          withholding_tax_lines as string,",
				"          tags as string,",
				"          taggings as string,",
				"          failed_tolerances as string,",
				"          commodity_id as string,",
				"          created_by_id as string,",
				"          updated_by_id as string,",
				"          invoice_header_id as string,",
				"          item_id as string,",
				"          tax_code_id as string,",
				"          repo_load_dttm as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          INVOICE_NUM as string,",
				"          INE_NUMBER as string,",
				"          DISTRIBUTION_LINE_NUMBER as string,",
				"          {SEGMENT1_VENDOR#} as string,",
				"          VENDOR_NAME as string,",
				"          VENDOR_SITE_CODE as string,",
				"          CREATION_DATE as date,",
				"          INVOICE_DATE as string,",
				"          SOURCE as string,",
				"          INVOICE_AMOUNT as string,",
				"          INVOICE_CURRENCY_CODE as string,",
				"          LINE_TYPE_LOOKUP_CODE as string,",
				"          DESCRIPTION as string,",
				"          MATCH_TYPE as string,",
				"          PO_HEADER_ID as string,",
				"          PO_LINE_ID as string,",
				"          PO_LINE_LOCATION_ID as string,",
				"          PO_DISTRIBUTION_ID as string,",
				"          REQ_DISTRIBUTION_ID as string,",
				"          REQUISITION_HEADER_ID as string,",
				"          REQ_SOURCE as string,",
				"          DIST_CODE_COMBINATION_ID as string,",
				"          AMOUNT as double,",
				"          GL_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          DateKey as string,",
				"          DateText as string,",
				"          Date as date,",
				"          DayOfMonth as string,",
				"          DayName as string,",
				"          DayOfWeek as string,",
				"          WeekOfMonth as string,",
				"          WeekOfQuarter as string,",
				"          MonthName as string,",
				"          Month as string,",
				"          Quarter as string,",
				"          Year as string,",
				"          MonthYear as string,",
				"          YearMonth as string,",
				"          MonthYearName as string,",
				"          QuarterYear as string,",
				"          FirstDayOfMonth as string,",
				"          LastDayOfMonth as string,",
				"          FirstDayOfQuarter as string,",
				"          LastDayOfQuarter as string,",
				"          FiscalFirstDayOfYear as string,",
				"          FiscalLastDayOfYear as string,",
				"          FiscalDayOfYear as string,",
				"          FiscalWeekOfYear as string,",
				"          FiscalQuarter as string,",
				"          FiscalQuarterYear as string,",
				"          FiscalYearQuarter as string,",
				"          FiscalYear as string,",
				"          FiscalYearName as string,",
				"          IsBusinessDay as string,",
				"          IsHoliday as string,",
				"          HolidayName as string,",
				"          WeekEndingDate_Monday as string,",
				"          WeekEndingDate_Tuesday as string,",
				"          WeekEndingDate_Wednesday as string,",
				"          WeekEndingDate_Thursday as string,",
				"          WeekEndingDate_Friday as string,",
				"          WeekEndingDate_Saturday as string,",
				"          WeekEndingDate_Sunday as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source1 select(mapColumn(",
				"          currency_code,",
				"          id,",
				"          {invoice #} = invoice_number,",
				"          supplier_created,",
				"          invoice_supplier = supplier_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(not(isNull({invoice #}))) ~> filter1",
				"source2 select(mapColumn(",
				"          {Invoice Line Total} = accounting_total,",
				"          {Invoice Created Date} = created_at,",
				"          {Invoice Description} = description,",
				"          invoice_header_id,",
				"          {Invoice Line #} = line_num,",
				"          price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive({Invoice Line Total} = iif(not(isNull({Invoice Line Total})), {Invoice Line Total}, toDouble(\"\")),",
				"          price = iif(not(isNull(price)), price, toDouble(''))) ~> derivedColumn1",
				"filter1, derivedColumn1 join(id == invoice_header_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive({Create Method} = iif(supplier_created=='False','Viasat-Entered','Supplier-Entered'),",
				"          {Invoice Delivery Method} = iif(supplier_created=='False', \"Coupa Web Portal\",iif( invoice_supplier== (\"STAPLES BUSINESS ADVANTAGE-USA\") || invoice_supplier==\"AMAZON BUSINESS-USA\" || invoice_supplier==\"CDW DIRECT LLC-USA\"|| invoice_supplier==\"DIGIKEY CORPORATION-USA\"|| invoice_supplier==\"SHI-USA\", \"Integration (cXML)\",'Other') ),",
				"          {Data Source} = 'coupa',",
				"          REQ_SOURCE = 'coupa') ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          {invoice #},",
				"          {Invoice Line #},",
				"          {Invoice Supplier} = invoice_supplier,",
				"          {Invoice Create Date} = {Invoice Created Date},",
				"          {Invoice Delivery Method},",
				"          {Invoice Currency} = currency_code,",
				"          {Invoice Description},",
				"          {Invoice Line Total},",
				"          {Create Method},",
				"          {Data Source},",
				"          REQ_SOURCE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"source4 select(mapColumn(",
				"          Date,",
				"          FiscalQuarter,",
				"          FiscalYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"source3 select(mapColumn(",
				"          {INVOICE #} = INVOICE_NUM,",
				"          {INVOICE LINE #} = INE_NUMBER,",
				"          {Invoice Supplier} = VENDOR_NAME,",
				"          {Incoice Create Date} = CREATION_DATE,",
				"          {Invoice Delivery Method} = SOURCE,",
				"          {Invoice Currency} = INVOICE_CURRENCY_CODE,",
				"          {Invoice Description} = DESCRIPTION,",
				"          REQ_SOURCE,",
				"          {Invoice Line Total} = AMOUNT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5 filter({Invoice Delivery Method}!=\"RTS\" && {Invoice Delivery Method}!=\"PPA\" && {Invoice Delivery Method}!=\"SERENGETI\") ~> filter2",
				"filter2 derive({Create Method} = iif({Invoice Delivery Method}==\"ERS\"|| {Invoice Delivery Method}==\"SERENGETI\", 'Supplier-Entered', 'Viasat-Entered'),",
				"          {Data Source } = 'Oracle') ~> derivedColumn3",
				"derivedColumn3 filter({Incoice Create Date}>=toDate('2018-07-01')) ~> filter3",
				"select3, select6 union(byName: true)~> union1",
				"filter3 select(mapColumn(",
				"          {invoice #} = {INVOICE #},",
				"          {Invoice Line #} = {INVOICE LINE #},",
				"          {Invoice Supplier},",
				"          {Invoice Create Date} = {Incoice Create Date},",
				"          {Invoice Delivery Method},",
				"          {Invoice Currency},",
				"          {Invoice Description},",
				"          {Invoice Line Total},",
				"          {Create Method},",
				"          {Data Source} = {Data Source },",
				"          REQ_SOURCE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"union1 derive({Coupa.Amazon.Staples} = iif(upper({Invoice Supplier})==\"AMAZON BUSINESS-USA\"|| upper({Invoice Supplier})==\"STAPLES BUSINESS ADVANTAGE-USA\", 'yes', 'no')) ~> derivedColumn4",
				"derivedColumn4, select4 join({Invoice Create Date} == Date,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 derive({Date Published} = currentTimestamp()-hours(8),",
				"          {Workflow Published Data} = 'Coupa Invoices') ~> derivedColumn5",
				"derivedColumn5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['coupa_invoices_ouput.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}