{
	"name": "WIPSummary_copy1",
	"properties": {
		"folder": {
			"name": "WIP_Summary"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "QAG0NmrDetailVsat"
				},
				{
					"name": "AllJobs"
				},
				{
					"name": "Routings"
				}
			],
			"sinks": [
				{
					"name": "dummySink"
				}
			],
			"transformations": [
				{
					"name": "initCapCols1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "selectingreqCols1"
				},
				{
					"name": "sortingNmrDate"
				},
				{
					"name": "UniqueRows1"
				},
				{
					"name": "initCapCols2"
				},
				{
					"name": "filter2"
				},
				{
					"name": "selectingReqCols2"
				},
				{
					"name": "leftouterjoin1"
				},
				{
					"name": "Summarise1"
				},
				{
					"name": "innerjoin1"
				},
				{
					"name": "initCapCols3"
				},
				{
					"name": "filter3"
				},
				{
					"name": "select1"
				},
				{
					"name": "innerjoin2"
				},
				{
					"name": "RenamingCols1"
				},
				{
					"name": "RankingOrTilingUnique"
				},
				{
					"name": "filter4"
				},
				{
					"name": "Summarise2"
				},
				{
					"name": "innerouterjoin3"
				},
				{
					"name": "filter5"
				},
				{
					"name": "UniqueRows2"
				},
				{
					"name": "select2"
				},
				{
					"name": "leftouterjoin2"
				},
				{
					"name": "select3"
				},
				{
					"name": "innerjoin4"
				},
				{
					"name": "RoutingFlagInner"
				},
				{
					"name": "exists1"
				},
				{
					"name": "RoutingFlagLeftAnti"
				},
				{
					"name": "unioningRoutingFlags"
				},
				{
					"name": "select4"
				},
				{
					"name": "sort1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "selectingReqCols3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {A$NMR_DET_PLAN_NAME} as string,",
				"          {A$NMR_PLAN_NAME} as string,",
				"          {A$ZZ__________________________} as string,",
				"          BUSINESS_AREA as string,",
				"          COMMODITY_CODE as string,",
				"          NMR_PARENT_SN as string,",
				"          NMR_ACT_REV as string,",
				"          NMR_CM_STATUS as string,",
				"          NMR_COLLECTION as string,",
				"          NMR_COMMENTS as string,",
				"          NMR_CUSTOMER as string,",
				"          NMR_DET_ACTION_TAKEN as string,",
				"          NMR_DET_APPR_CUST as string,",
				"          NMR_DET_APPR_ENG as string,",
				"          NMR_DET_APPR_MFG as string,",
				"          NMR_DET_APPR_PLANNER as string,",
				"          NMR_DET_APPR_QA as string,",
				"          NMR_DET_APPR_SC as string,",
				"          NMR_DET_CAUSE_CODE as string,",
				"          NMR_DET_CAUSE_DESC as string,",
				"          NMR_DET_CHILD_NMR as string,",
				"          NMR_DET_COMMENTS as string,",
				"          NMR_DET_DATE_ACTION_TAKEN as string,",
				"          NMR_DET_DATE_CLOSED as string,",
				"          NMR_DET_DEF_CODE as string,",
				"          NMR_DET_DEF_DESC as string,",
				"          NMR_DET_DESC_OF_DEF as string,",
				"          NMR_DET_DISPO as string,",
				"          NMR_DET_FAILED_ITEM as string,",
				"          NMR_DET_FLEX_COMMENT_1 as string,",
				"          NMR_DET_FLEX_DATE_1 as string,",
				"          NMR_DET_FLEX_LOV_1 as string,",
				"          NMR_DET_FLEX_LOV_10 as string,",
				"          NMR_DET_FLEX_LOV_11 as string,",
				"          NMR_DET_FLEX_LOV_12 as string,",
				"          NMR_DET_FLEX_LOV_13 as string,",
				"          NMR_DET_FLEX_LOV_14 as string,",
				"          NMR_DET_FLEX_LOV_15 as string,",
				"          NMR_DET_FLEX_LOV_16 as string,",
				"          NMR_DET_FLEX_LOV_17 as string,",
				"          NMR_DET_FLEX_LOV_18 as string,",
				"          NMR_DET_FLEX_LOV_19 as string,",
				"          NMR_DET_FLEX_LOV_2 as string,",
				"          NMR_DET_FLEX_LOV_20 as string,",
				"          NMR_DET_FLEX_LOV_3 as string,",
				"          NMR_DET_FLEX_LOV_4 as string,",
				"          NMR_DET_FLEX_LOV_5 as string,",
				"          NMR_DET_FLEX_LOV_6 as string,",
				"          NMR_DET_FLEX_LOV_7 as string,",
				"          NMR_DET_FLEX_LOV_8 as string,",
				"          NMR_DET_FLEX_LOV_9 as string,",
				"          NMR_DET_LAST_UPDATE_DATE as string,",
				"          NMR_DET_LINE_CREATION_DATE as string,",
				"          NMR_DET_MIDS_BAT_INS as string,",
				"          NMR_DET_MIDS_HC_DAMAGE as string,",
				"          NMR_DET_MIDS_SW_LOAD as string,",
				"          NMR_DET_MIDS_TERM_REC as string,",
				"          NMR_DET_MRB_COMMENTS as string,",
				"          NMR_DET_NMR_LINE_NO as string,",
				"          NMR_DET_OCCURRENCE as string,",
				"          NMR_DET_OPER_NAME as string,",
				"          NMR_DET_PLAN_ID as string,",
				"          NMR_DET_PLAN_NAME as string,",
				"          NMR_DET_QA_APPR_DATE as string,",
				"          NMR_DET_QC_ACCEPT as string,",
				"          NMR_DET_QTY_DEF as string,",
				"          NMR_DET_REF_DESIG as string,",
				"          NMR_DET_REF_DESIG_PN as string,",
				"          NMR_DET_REPAIR_ACTION as string,",
				"          NMR_DET_RESP as string,",
				"          NMR_DET_SN as string,",
				"          NMR_DET_TEST_TYPE as string,",
				"          NMR_FLEX_COMMENT_NMR_1 as string,",
				"          NMR_FLEX_DATE_NMR_1 as string,",
				"          NMR_FLEX_DATE_NMR_2 as string,",
				"          NMR_FLEX_DATE_NMR_3 as string,",
				"          NMR_FLEX_DATE_NMR_4 as string,",
				"          NMR_FLEX_LOV_NMR_1 as string,",
				"          NMR_FLEX_LOV_NMR_10 as string,",
				"          NMR_FLEX_LOV_NMR_11 as string,",
				"          NMR_FLEX_LOV_NMR_12 as string,",
				"          NMR_FLEX_LOV_NMR_13 as string,",
				"          NMR_FLEX_LOV_NMR_14 as string,",
				"          NMR_FLEX_LOV_NMR_15 as string,",
				"          NMR_FLEX_LOV_NMR_16 as string,",
				"          NMR_FLEX_LOV_NMR_17 as string,",
				"          NMR_FLEX_LOV_NMR_18 as string,",
				"          NMR_FLEX_LOV_NMR_19 as string,",
				"          NMR_FLEX_LOV_NMR_2 as string,",
				"          NMR_FLEX_LOV_NMR_20 as string,",
				"          NMR_FLEX_LOV_NMR_21 as string,",
				"          NMR_FLEX_LOV_NMR_22 as string,",
				"          NMR_FLEX_LOV_NMR_23 as string,",
				"          NMR_FLEX_LOV_NMR_24 as string,",
				"          NMR_FLEX_LOV_NMR_25 as string,",
				"          NMR_FLEX_LOV_NMR_26 as string,",
				"          NMR_FLEX_LOV_NMR_27 as string,",
				"          NMR_FLEX_LOV_NMR_28 as string,",
				"          NMR_FLEX_LOV_NMR_29 as string,",
				"          NMR_FLEX_LOV_NMR_3 as string,",
				"          NMR_FLEX_LOV_NMR_30 as string,",
				"          NMR_FLEX_LOV_NMR_4 as string,",
				"          NMR_FLEX_LOV_NMR_5 as string,",
				"          NMR_FLEX_LOV_NMR_6 as string,",
				"          NMR_FLEX_LOV_NMR_7 as string,",
				"          NMR_FLEX_LOV_NMR_8 as string,",
				"          NMR_FLEX_LOV_NMR_9 as string,",
				"          NMR_FLEX_NUM_1 as string,",
				"          NMR_FLEX_NUM_2 as string,",
				"          NMR_FLEX_NUM_3 as string,",
				"          NMR_FLEX_NUM_4 as string,",
				"          NMR_INSP_TYPE as string,",
				"          NMR_ITEM_COST as string,",
				"          NMR_LAST_UPDATE_DATE as string,",
				"          NMR_LOT_QTY as string,",
				"          NMR_MIDS_CU_PN as string,",
				"          NMR_MIDS_CU_SN as string,",
				"          NMR_MIDS_DODAAC_NUM as string,",
				"          NMR_MIDS_DOC_NUM as string,",
				"          NMR_MIDS_INC_SW_LAB as string,",
				"          NMR_MIDS_PSA_PN as string,",
				"          NMR_MIDS_PSA_SN as string,",
				"          NMR_MIDS_RPS_PN as string,",
				"          NMR_MIDS_RPS_SN as string,",
				"          NMR_MIDS_REC_OUTGOING_SW as string,",
				"          NMR_MIDS_TRAY_PN as string,",
				"          NMR_MIDS_TRAY_SN as string,",
				"          NMR_NMR_DATE as date,",
				"          NMR_NMR_DATE_CLOSED as string,",
				"          NMR_NMR_NO as string,",
				"          NMR_OCCURRENCE as string,",
				"          NMR_ORIGINATOR as string,",
				"          NMR_ORIGINATOR_ID as string,",
				"          NMR_PARENT_NMR as string,",
				"          NMR_PGM as string,",
				"          NMR_PLAN_ID as string,",
				"          NMR_PLAN_NAME as string,",
				"          NMR_PN as string,",
				"          NMR_PN_DESC as string,",
				"          NMR_PN_REV as string,",
				"          NMR_PO_LINE_NO as string,",
				"          NMR_PO_NO as string,",
				"          NMR_PO_RCPT_NO as string,",
				"          NMR_PO_RECEIPT_DATE as string,",
				"          NMR_PO_SHIP_LINE as string,",
				"          NMR_PROJECT_NO as string,",
				"          NMR_QIR_NO as string,",
				"          NMR_QTY_REJECT as string,",
				"          NMR_RMA_LINE_NO as string,",
				"          NMR_RMA_NO as string,",
				"          NMR_RPT_SYMP as string,",
				"          NMR_SAMP_QTY_REJ as string,",
				"          NMR_SAMPLE_QTY as string,",
				"          NMR_SN as string,",
				"          NMR_SUPPLIER as string,",
				"          NMR_SYMPTOM_CONFIRMED as string,",
				"          NMR_TEST_CYCLE as string,",
				"          NMR_TEST_TYPE as string,",
				"          NMR_UNIT_HRS as string,",
				"          NMR_VOID_RECORD as string,",
				"          NMR_WARRANTY as string,",
				"          NMR_WO as string,",
				"          ORGANIZATION_CODE as string,",
				"          QIR_OCCURANCE as string,",
				"          QIR_PLAN_ID as string,",
				"          QUALITY_ENGINEER as string,",
				"          QUALITY_ENGINEER_ID as string,",
				"          RMA_CREATION_DATE as string,",
				"          RMA_HEADER_ID as string,",
				"          REPAIR_LINE_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     fileSystem: 'ops-datascience-5026',",
				"     folderPath: 'NoetixViews',",
				"     fileName: 'QAG0_NMR_Detail_Vsat.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> QAG0NmrDetailVsat",
				"source(output(",
				"          {ASSEMBLY$SV$PART_NUMBER} as string,",
				"          ASSEMBLY_DESCRIPTION as string,",
				"          JOB_CLOSED_DATE as string,",
				"          JOB_COMPLETED_DATE as string,",
				"          JOB_CREATED_BY as string,",
				"          JOB_NAME as string,",
				"          JOB_QUANTITY_COMPLETED as double,",
				"          JOB_QUANTITY_SCHEDULED as double,",
				"          JOB_QUANTITY_SCRAPPED as double,",
				"          JOB_DESCRIPTION as string,",
				"          JOB_TYPE as string,",
				"          JOB_STATUS as string,",
				"          JOB_RELEASED_DATE as string,",
				"          ORGANIZATION_CODE as string,",
				"          PROJECT_NUMBER as string,",
				"          TASK_NUMBER as string,",
				"          JOB_SCHEDULED_COMPLETION_DT as string,",
				"          JOB_START_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     fileSystem: 'ops-datascience-5026',",
				"     folderPath: 'NoetixViews',",
				"     fileName: 'AllJobs.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> AllJobs",
				"source(output(",
				"          {ASSEMBLY$SV$PART_NUMBER} as string,",
				"          ASSEMBLY_DESCRIPTION as string,",
				"          DEPARTMENT as string,",
				"          FIRST_UNIT_COMPLETION_DATE as string,",
				"          FIRST_UNIT_START_DATE as string,",
				"          JOB_DATE_RELEASED as string,",
				"          JOB_NAME as string,",
				"          JOB_QUANTITY_COMPLETED as double,",
				"          JOB_QUANTITY_SCHEDULED as double,",
				"          JOB_QUANTITY_SCRAPPED as string,",
				"          JOB_START_DATE as string,",
				"          JOB_STATUS as string,",
				"          JOB_TYPE as string,",
				"          LAST_UNIT_COMPLETION_DATE as string,",
				"          LAST_UNIT_START_DATE as string,",
				"          OPERATION_DESCRIPTION as string,",
				"          OPERATION_QUANTITY_COMPLETED as double,",
				"          OPERATION_QUANTITY_IN_QUEUE as double,",
				"          OPERATION_QUANTITY_REJECTED as double,",
				"          OPERATION_QUANTITY_REMAINING as double,",
				"          OPERATION_QUANTITY_RUNNING as double,",
				"          OPERATION_QUANTITY_SCRAPPED as double,",
				"          OPERATION_QUANTITY_TO_MOVE as double,",
				"          OPERATION_SEQUENCE_NUMBER as double,",
				"          ORGANIZATION_CODE as string,",
				"          ORGANIZATION_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     fileSystem: 'ops-datascience-5026',",
				"     folderPath: 'NoetixViews',",
				"     fileName: 'Routings.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> Routings",
				"QAG0NmrDetailVsat select(mapColumn(",
				"          each(match(true()),",
				"               initCap(replace(initCap($$),'_',' ')) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> initCapCols1",
				"initCapCols1 filter(isNull({Nmr Nmr Date Closed})) ~> filter1",
				"filter1 select(mapColumn(",
				"          {Nmr Nmr Date},",
				"          {Nmr Nmr Date Closed},",
				"          {Nmr Nmr No},",
				"          {Nmr Parent Nmr},",
				"          {Nmr Pn},",
				"          {Nmr Project No},",
				"          {Nmr Sn},",
				"          {Nmr Wo},",
				"          {Organization Code}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingreqCols1",
				"selectingreqCols1 sort(asc({Nmr Nmr Date}, false)) ~> sortingNmrDate",
				"sortingNmrDate aggregate(groupBy({Nmr Nmr No}),",
				"     each(match(name!='Nmr Nmr No'), $$ = first($$))) ~> UniqueRows1",
				"AllJobs select(mapColumn(",
				"          each(match(true()),",
				"               initCap(replace(initCap($$),'_',' ')) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> initCapCols2",
				"initCapCols2 filter({Job Status} == \"Released\" || {Job Status} == \"Unreleased\") ~> filter2",
				"filter2 select(mapColumn(",
				"          {Assembly$Sv$Part Number} = {Assembly$sv$part Number},",
				"          {Assembly Description},",
				"          {Job Created By},",
				"          {Job Name},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Quantity Scrapped},",
				"          {Job Description},",
				"          {Job Type},",
				"          {Job Status},",
				"          {Job Released Date},",
				"          {Organization Code},",
				"          {Project Number},",
				"          {Task Number},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingReqCols2",
				"selectingReqCols2, UniqueRows1 join({Job Name} == {Nmr Wo}",
				"     && selectingReqCols2@{Organization Code} == UniqueRows1@{Organization Code},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouterjoin1",
				"leftouterjoin1 aggregate(groupBy(selectingReqCols2@{Organization Code},",
				"          {Job Name}),",
				"     {Project Number} = max({Project Number}),",
				"          {Number of NMR's} = count({Nmr Nmr No}),",
				"          {Concat_Nmr Nmr No} = dropRight(toString(reduce(collect({Nmr Nmr No}),'',#item+','+#acc,#result)),1),",
				"          {Concat_Nmr Nmr Date} = dropRight(toString(reduce(collect(toString({Nmr Nmr Date})),'',#item+','+#acc,#result)),1)) ~> Summarise1",
				"Summarise1, leftouterjoin1 join(Summarise1@{Job Name} == selectingReqCols2@{Job Name}",
				"     && Summarise1@{Organization Code} == UniqueRows1@{Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin1",
				"Routings select(mapColumn(",
				"          each(match(true()),",
				"               initCap(replace(initCap($$),'_',' ')) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> initCapCols3",
				"filter4 filter({Job Status} == \"Released\") ~> filter3",
				"innerjoin1 select(mapColumn(",
				"          {Organization Code} = Summarise1@{Organization Code},",
				"          {Job Name} = Summarise1@{Job Name},",
				"          {Project Number} = Summarise1@{Project Number},",
				"          {Number of NMR's},",
				"          {Concat_Nmr Nmr No},",
				"          {Concat_Nmr Nmr Date},",
				"          {Assembly$Sv$Part Number},",
				"          {Assembly Description},",
				"          {Job Created By},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Quantity Scrapped},",
				"          {Job Description},",
				"          {Job Type},",
				"          {Job Status},",
				"          {Job Released Date},",
				"          {Organization Code} = selectingReqCols2@{Organization Code},",
				"          {Project Number} = selectingReqCols2@{Project Number},",
				"          {Task Number},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date},",
				"          {Nmr Nmr No},",
				"          {Nmr Nmr Date},",
				"          {Nmr Nmr Date Closed},",
				"          {Nmr Parent Nmr},",
				"          {Nmr Pn},",
				"          {Nmr Project No},",
				"          {Nmr Sn},",
				"          {Nmr Wo},",
				"          {Right_Organization Code} = UniqueRows1@{Organization Code}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, filter3 join(select1@{Job Name} == initCapCols3@{Job Name}",
				"     && select1@{Organization Code} == initCapCols3@{Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin2",
				"innerjoin2 select(mapColumn(",
				"          {Organization Code} = select1@{Organization Code},",
				"          {Job Name} = select1@{Job Name},",
				"          {Project Number},",
				"          {Number of NMR's},",
				"          {Concat_Nmr Nmr No},",
				"          {Concat_Nmr Nmr Date},",
				"          {Assembly$Sv$Part Number} = select1@{Assembly$Sv$Part Number},",
				"          {Assembly Description} = select1@{Assembly Description},",
				"          {Job Created By},",
				"          {Job Quantity Completed} = select1@{Job Quantity Completed},",
				"          {Job Quantity Scheduled} = select1@{Job Quantity Scheduled},",
				"          {Job Quantity Scrapped} = select1@{Job Quantity Scrapped},",
				"          {Job Description},",
				"          {Job Type} = select1@{Job Type},",
				"          {Job Status} = select1@{Job Status},",
				"          {Released Date} = {Job Released Date},",
				"          {Task Number},",
				"          {Scheduled Comp Date} = {Job Scheduled Completion Dt},",
				"          {Job Start Date} = select1@{Job Start Date},",
				"          {Nmr Nmr No},",
				"          {Nmr Nmr Date},",
				"          {Nmr Nmr Date Closed},",
				"          {Nmr Parent Nmr},",
				"          {Nmr Pn},",
				"          {Nmr Project No},",
				"          {Nmr Sn},",
				"          {Nmr Wo},",
				"          {Right_Organization Code},",
				"          {Assembly$sv$part Number} = initCapCols3@{Assembly$sv$part Number},",
				"          {Assembly Description} = initCapCols3@{Assembly Description},",
				"          Department,",
				"          {Job Date Released},",
				"          {Job Name} = initCapCols3@{Job Name},",
				"          {Job Quantity Completed} = initCapCols3@{Job Quantity Completed},",
				"          {Job Quantity Scheduled} = initCapCols3@{Job Quantity Scheduled},",
				"          {Job Quantity Scrapped} = initCapCols3@{Job Quantity Scrapped},",
				"          {Job Start Date} = initCapCols3@{Job Start Date},",
				"          {Job Status} = initCapCols3@{Job Status},",
				"          {Job Type} = initCapCols3@{Job Type},",
				"          {Operation Description},",
				"          Completed = {Operation Quantity Completed},",
				"          Queue = {Operation Quantity In Queue},",
				"          Rejected = {Operation Quantity Rejected},",
				"          Remaining = {Operation Quantity Remaining},",
				"          Running = {Operation Quantity Running},",
				"          Scrapped = {Operation Quantity Scrapped},",
				"          {To Move} = {Operation Quantity To Move},",
				"          {Sequence #} = {Operation Sequence Number},",
				"          {Organization Code} = initCapCols3@{Organization Code},",
				"          {Organization Name}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamingCols1",
				"RenamingCols1 rank(asc({Scheduled Comp Date}, true),",
				"     asc({Job Name}, true),",
				"     asc({Sequence #}, true),",
				"     output({Conditional Formatting} as long),",
				"     dense: true) ~> RankingOrTilingUnique",
				"initCapCols3 filter({Job Status} == \"Released\" || {Job Status} == \"Unreleased\") ~> filter4",
				"filter4 aggregate(groupBy({Organization Code},",
				"          {Job Name}),",
				"     {Max_Operation Sequence Number} = max({Operation Sequence Number})) ~> Summarise2",
				"Summarise2, filter4 join(Summarise2@{Job Name} == initCapCols3@{Job Name}",
				"     && {Max_Operation Sequence Number} == {Operation Sequence Number}",
				"     && Summarise2@{Organization Code} == initCapCols3@{Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerouterjoin3",
				"filter4 filter(({Operation Quantity In Queue} + {Operation Quantity Running} + {Operation Quantity To Move}) > 0) ~> filter5",
				"filter5 aggregate(groupBy({Job Name},",
				"          {Organization Code}),",
				"     each(match(name!='Job Name'&&name!='Organization Code'), $$ = first($$))) ~> UniqueRows2",
				"UniqueRows2 select(mapColumn(",
				"          {Job Name},",
				"          {Organization Code},",
				"          {Assembly$sv$part Number},",
				"          {Assembly Description},",
				"          Department,",
				"          {First Unit Completion Date},",
				"          {First Unit Start Date},",
				"          {Job Date Released},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Quantity Scrapped},",
				"          {Job Start Date},",
				"          {Job Status},",
				"          {Job Type},",
				"          {Last Unit Completion Date},",
				"          {Last Unit Start Date},",
				"          {Operation Description},",
				"          {Operation Quantity Completed},",
				"          {Operation Quantity In Queue},",
				"          {Operation Quantity Rejected},",
				"          {Operation Quantity Remaining},",
				"          {Operation Quantity Running},",
				"          {Operation Quantity Scrapped},",
				"          {Operation Quantity To Move},",
				"          {Current Operation Sequence Number} = {Operation Sequence Number},",
				"          {Organization Name}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"innerouterjoin3, select2 join(Summarise2@{Organization Code} == select2@{Organization Code}",
				"     && Summarise2@{Job Name} == select2@{Job Name},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouterjoin2",
				"leftouterjoin2 select(mapColumn(",
				"          {Organization Code} = Summarise2@{Organization Code},",
				"          {Job Name} = Summarise2@{Job Name},",
				"          {Max_Operation Sequence Number},",
				"          {Assembly$sv$part Number} = initCapCols3@{Assembly$sv$part Number},",
				"          {Assembly Description} = initCapCols3@{Assembly Description},",
				"          Department = initCapCols3@Department,",
				"          {First Unit Completion Date} = initCapCols3@{First Unit Completion Date},",
				"          {First Unit Start Date} = initCapCols3@{First Unit Start Date},",
				"          {Job Date Released} = initCapCols3@{Job Date Released},",
				"          {Job Quantity Completed} = initCapCols3@{Job Quantity Completed},",
				"          {Job Quantity Scheduled} = initCapCols3@{Job Quantity Scheduled},",
				"          {Job Quantity Scrapped} = initCapCols3@{Job Quantity Scrapped},",
				"          {Job Start Date} = initCapCols3@{Job Start Date},",
				"          {Job Status} = initCapCols3@{Job Status},",
				"          {Job Type} = initCapCols3@{Job Type},",
				"          {Last Unit Completion Date} = initCapCols3@{Last Unit Completion Date},",
				"          {Last Unit Start Date} = initCapCols3@{Last Unit Start Date},",
				"          {Operation Description} = initCapCols3@{Operation Description},",
				"          {Operation Quantity Completed} = initCapCols3@{Operation Quantity Completed},",
				"          {Operation Quantity In Queue} = initCapCols3@{Operation Quantity In Queue},",
				"          {Operation Quantity Rejected} = initCapCols3@{Operation Quantity Rejected},",
				"          {Operation Quantity Remaining} = initCapCols3@{Operation Quantity Remaining},",
				"          {Operation Quantity Running} = initCapCols3@{Operation Quantity Running},",
				"          {Operation Quantity Scrapped} = initCapCols3@{Operation Quantity Scrapped},",
				"          {Operation Quantity To Move} = initCapCols3@{Operation Quantity To Move},",
				"          {Operation Sequence Number},",
				"          {Organization Code} = initCapCols3@{Organization Code},",
				"          {Organization Name} = initCapCols3@{Organization Name},",
				"          {Operation Description} = select2@{Operation Description},",
				"          {Current Operation Sequence Number}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"selectingReqCols2, select3 join(selectingReqCols2@{Job Name} == select3@{Job Name}",
				"     && selectingReqCols2@{Organization Code} == select3@{Organization Code},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin4",
				"innerjoin4 derive({No Routing Flag} = toBoolean('0')) ~> RoutingFlagInner",
				"selectingReqCols2, select3 exists(selectingReqCols2@{Job Name} == select3@{Job Name}",
				"     && selectingReqCols2@{Organization Code} == select3@{Organization Code},",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive({No Routing Flag} = toBoolean('1')) ~> RoutingFlagLeftAnti",
				"RoutingFlagLeftAnti, select4 union(byName: true)~> unioningRoutingFlags",
				"RoutingFlagInner select(mapColumn(",
				"          {Assembly$Sv$Part Number} = selectingReqCols2@{Assembly$Sv$Part Number},",
				"          {Assembly Description} = selectingReqCols2@{Assembly Description},",
				"          {Job Created By},",
				"          {Job Name} = selectingReqCols2@{Job Name},",
				"          {Job Quantity Completed} = selectingReqCols2@{Job Quantity Completed},",
				"          {Job Quantity Scheduled} = selectingReqCols2@{Job Quantity Scheduled},",
				"          {Job Quantity Scrapped} = selectingReqCols2@{Job Quantity Scrapped},",
				"          {Job Description},",
				"          {Job Type} = selectingReqCols2@{Job Type},",
				"          {Job Status} = selectingReqCols2@{Job Status},",
				"          {Job Released Date},",
				"          {Organization Code} = selectingReqCols2@{Organization Code},",
				"          {Project Number},",
				"          {Task Number},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date} = selectingReqCols2@{Job Start Date},",
				"          {Right_Organization Code} = select3@{Organization Code},",
				"          {Right_Job Name} = select3@{Job Name},",
				"          {Max_Operation Sequence Number},",
				"          {Right_Assembly$sv$part Number} = select3@{Assembly$sv$part Number},",
				"          {Right_Assembly Description} = select3@{Assembly Description},",
				"          Department,",
				"          {First Unit Completion Date},",
				"          {First Unit Start Date},",
				"          {Job Date Released},",
				"          {Right_Job Quantity Completed} = select3@{Job Quantity Completed},",
				"          {Right_Job Quantity Scheduled} = select3@{Job Quantity Scheduled},",
				"          {Right_Job Quantity Scrapped} = select3@{Job Quantity Scrapped},",
				"          {Right_Job Start Date} = select3@{Job Start Date},",
				"          {Right_Job Status} = select3@{Job Status},",
				"          {Right_Job Type} = select3@{Job Type},",
				"          {Last Unit Completion Date},",
				"          {Last Unit Start Date},",
				"          {Operation Description},",
				"          {Operation Quantity Completed},",
				"          {Operation Quantity In Queue},",
				"          {Operation Quantity Rejected},",
				"          {Operation Quantity Remaining},",
				"          {Operation Quantity Running},",
				"          {Operation Quantity Scrapped},",
				"          {Operation Quantity To Move},",
				"          {Operation Sequence Number},",
				"          {Organization Name},",
				"          {Current Operation Sequence Number},",
				"          {No Routing Flag}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"unioningRoutingFlags sort(asc({Job Scheduled Completion Dt}, false)) ~> sort1",
				"sort1 derive({WO Status Category} = iif({Operation Quantity Remaining}==toDouble(0),'In Last Sequence Step', 'Past Due WO')) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          {Item Description} = {Assembly Description},",
				"          {Job Created By},",
				"          {Job Name},",
				"          {Job Quantity Completed},",
				"          {Job Quantity Scheduled},",
				"          {Job Quantity Scrapped},",
				"          {Job Description},",
				"          {Job Type},",
				"          {Job Status},",
				"          {Job Released Date},",
				"          {Organization Code},",
				"          {Project Number},",
				"          {Task Number},",
				"          {Job Scheduled Completion Dt},",
				"          {Job Start Date},",
				"          {No Routing Flag},",
				"          {Right_Organization Code},",
				"          Department,",
				"          {Operation Description},",
				"          {Operation Quantity Completed},",
				"          {Operation Quantity Remaining},",
				"          {Operation Sequence Number},",
				"          {Organization Name},",
				"          {Current Operation Sequence Number},",
				"          {WO Status Category}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingReqCols3",
				"selectingReqCols3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     preCommands: [],",
				"     postCommands: []) ~> dummySink"
			]
		}
	}
}