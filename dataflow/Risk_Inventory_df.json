{
	"name": "Risk_Inventory_df",
	"properties": {
		"folder": {
			"name": "pte-project-cost-final"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "invg0OnhandQuantitiesCustom"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "BOMBg0CurrentStructuredBills"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "BombExplosions"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "PAG0ClassCategoriesVsat"
				},
				{
					"dataset": {
						"referenceName": "ds_csv_input",
						"type": "DatasetReference"
					},
					"name": "INVG0ItemsVsat"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_AzSql",
						"type": "DatasetReference"
					},
					"name": "TableauOutputSql"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "DataCleasingTrims"
				},
				{
					"name": "selectingReqCols1"
				},
				{
					"name": "FullOuter1"
				},
				{
					"name": "Summarise1"
				},
				{
					"name": "innerjoin1"
				},
				{
					"name": "Summarise2"
				},
				{
					"name": "leftOuterjoin1"
				},
				{
					"name": "Formulae1"
				},
				{
					"name": "RenameRightCols"
				},
				{
					"name": "selectReqCols3"
				},
				{
					"name": "UniqueRows"
				},
				{
					"name": "RemoveSHA"
				},
				{
					"name": "leftOuterjoin2"
				},
				{
					"name": "RenamingRightCols"
				},
				{
					"name": "LeftOuterjoin3"
				},
				{
					"name": "FINALSELECT"
				},
				{
					"name": "DatacleasingNulls"
				},
				{
					"name": "SelectReqCols2"
				},
				{
					"name": "DatacleasingTrimsFinal"
				},
				{
					"name": "DataClesasingNullsFinal"
				},
				{
					"name": "FinalCasting"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORGANIZATION_CODE as short,",
				"          SUBINVENTORY_CODE as string,",
				"          LOCATOR as string,",
				"          ITEM_NUM as string,",
				"          ITEM_DESCRIPTION as string,",
				"          ONHAND_QTY as double,",
				"          ITEM_COST as double,",
				"          ITEM_TYPE as string,",
				"          MAKE_BUY_CODE as string,",
				"          SERIAL_CONTROL_CODE as string,",
				"          PROJECT_NUM as string,",
				"          PROJ_MGR as string,",
				"          TASK_NUM as boolean,",
				"          MATERIAL_COST as double,",
				"          MATERIAL_OVERHEAD_COST as double,",
				"          OUTSIDE_PROCESSING_COST as double,",
				"          RESOURCE_COST as double,",
				"          OVERHEAD_COST as double,",
				"          ITEM_STATUS as string,",
				"          ITEM_STATUS_CODE as string,",
				"          PLANNING_GROUP as string,",
				"          PRIMARY_UNIT_OF_MEASURE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'RiskInventory1.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> invg0OnhandQuantitiesCustom",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'RiskInventory2.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> BOMBg0CurrentStructuredBills",
				"source(output(",
				"          {Org Code} as string,",
				"          Assembly as integer,",
				"          Path as string,",
				"          Component as string,",
				"          Level as short,",
				"          QPA as double,",
				"          {Extended Quantity} as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'pte-project-cost-final',",
				"     folderPath: 'input',",
				"     fileName: 'BOM Explosions.xlsx',",
				"     sheetName: 'Sheet1',",
				"     firstRowAsHeader: true) ~> BombExplosions",
				"source(output(",
				"          {A$PROJECT_NAME} as string,",
				"          {A$PROJECT_NUMBER} as string,",
				"          {A$PROJECT_TYPE} as string,",
				"          {A$ZZ__________________________} as string,",
				"          AFTER_MARKET_SERVICE as boolean,",
				"          CLASSIFICATION as string,",
				"          CUSTOMER_GROUP as string,",
				"          DEPOT_PRODUCT_LINE as string,",
				"          PRODUCT_LINE as string,",
				"          PRODUCT_LINE_BUSINESS_AREA as string,",
				"          PRODUCT_SERVICE as string,",
				"          PROJECT_NAME as string,",
				"          PROJECT_NUMBER as string,",
				"          PROJECT_TYPE as string,",
				"          REVENUE_TYPE as string,",
				"          SEGMENT as string,",
				"          SUB_CATEGORY as string,",
				"          {Z$$_________________________} as string,",
				"          {Z$PAG0_PROJECTS} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     container: 'pte-project-cost',",
				"     folderPath: 'input',",
				"     fileName: 'PAG0_Project_Class_Categories.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> PAG0ClassCategoriesVsat",
				"source(output(",
				"          ORGANIZATION_CODE as string,",
				"          ITEM_NUMBER as string,",
				"          ITEM_DESCRIPTION as string,",
				"          ITEM_CREATION_DATE as string,",
				"          PLANNING_MAKE_BUY_CODE as string,",
				"          BUYER_NAME as string,",
				"          PLANNER_CODE as string,",
				"          PREPROCESSING_LEAD_TIME as short,",
				"          PROCESSING_LEAD_TIME as short,",
				"          POSTPROCESSING_LEAD_TIME as short,",
				"          FIXED_LEAD_TIME as short,",
				"          CUM_MANUFACTURING_LEAD_TIME as boolean,",
				"          CUMULATIVE_TOTAL_LEAD_TIME as short,",
				"          PURCHASE_COMMOD as integer,",
				"          UNIT_OF_MEASURE as string,",
				"          RECEIPT_ROUTING as string,",
				"          ITEM_STATUS_CODE as string,",
				"          ITEM_TYPE as string,",
				"          ITEMCATINV_ITEM_CATEGORY_KFF as string,",
				"          AVERAGE_COST as boolean,",
				"          MRP_PLANNING_METHOD as string,",
				"          {ITEMS$AGILE_ITEM__PART__CATEGO} as string,",
				"          WIP_SUPPLY_TYPE as string,",
				"          {ITEMS$ITEM_SETUP_VERIFIED} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     fileSystem: 'nmrs',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> INVG0ItemsVsat",
				"BOMBg0CurrentStructuredBills filter(COMP_MRP_PLANNING_METHOD == \"MRP planning\") ~> filter1",
				"invg0OnhandQuantitiesCustom derive(ONHAND_QTY = trim(toString(ONHAND_QTY)),",
				"          ITEM_COST = trim(toString(ITEM_COST)),",
				"          report_date = currentTimestamp()-hours(7),",
				"          {Extended Cost} = ITEM_COST*ONHAND_QTY) ~> DataCleasingTrims",
				"filter1 select(mapColumn(",
				"          RE_ORDER_POINT_QUANTITY,",
				"          LEVEL_NUMBER,",
				"          {TOPASSM$SV$PART_NUMBER},",
				"          MAUC,",
				"          TOP_ASSEMBLY_ORG_CODE,",
				"          COMP_PLANNING_MAKE_BUY_CODE,",
				"          COMPONENT_DESCRIPTION,",
				"          COMP_ITEM_TYPE,",
				"          COMP_PART_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingReqCols1",
				"selectingReqCols1, DatacleasingNulls join(COMP_PART_NUMBER == ITEM_NUM",
				"     && TOP_ASSEMBLY_ORG_CODE == ORGANIZATION_CODE,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FullOuter1",
				"BombExplosions aggregate(groupBy(Assembly,",
				"          Component),",
				"     dummy = count()) ~> Summarise1",
				"FullOuter1, Summarise1 join(ITEM_NUM == Component,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerjoin1",
				"innerjoin1 aggregate(groupBy(ITEM_NUM),",
				"     {Assy Where Used Count} = countDistinct(Assembly)) ~> Summarise2",
				"FullOuter1, Summarise2 join(RiskInventory1@ITEM_NUM == Summarise2@ITEM_NUM,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftOuterjoin1",
				"RenameRightCols derive(ITEM_COST = iif(isNull(ITEM_COST),MAUC,toDouble(ITEM_COST)),",
				"          ITEM_NUM = iif(isNull(ITEM_NUM),COMP_PART_NUMBER,ITEM_NUM),",
				"          ITEM_DESCRIPTION = iif(isNull(ITEM_DESCRIPTION),COMPONENT_DESCRIPTION,ITEM_DESCRIPTION),",
				"          MAKE_BUY_CODE = iif(isNull(MAKE_BUY_CODE),COMP_PLANNING_MAKE_BUY_CODE,MAKE_BUY_CODE),",
				"          ITEM_TYPE = iif(isNull(ITEM_TYPE),COMP_ITEM_TYPE,ITEM_TYPE),",
				"          ORGANIZATION_CODE = iif(isNull(ORGANIZATION_CODE),TOP_ASSEMBLY_ORG_CODE,ORGANIZATION_CODE)) ~> Formulae1",
				"leftOuterjoin1 select(mapColumn(",
				"          {TOPASSM$SV$PART_NUMBER},",
				"          TOP_ASSEMBLY_ORG_CODE,",
				"          LEVEL_NUMBER,",
				"          COMP_PART_NUMBER,",
				"          COMPONENT_DESCRIPTION,",
				"          RE_ORDER_POINT_QUANTITY,",
				"          MAUC,",
				"          COMP_PLANNING_MAKE_BUY_CODE,",
				"          COMP_ITEM_TYPE,",
				"          ORGANIZATION_CODE,",
				"          SUBINVENTORY_CODE,",
				"          LOCATOR,",
				"          ITEM_NUM = {RiskInventory1@ITEM_NUM},",
				"          ITEM_DESCRIPTION,",
				"          ONHAND_QTY,",
				"          ITEM_COST,",
				"          ITEM_TYPE,",
				"          MAKE_BUY_CODE,",
				"          SERIAL_CONTROL_CODE,",
				"          PROJECT_NUM,",
				"          PROJ_MGR,",
				"          TASK_NUM,",
				"          MATERIAL_COST,",
				"          MATERIAL_OVERHEAD_COST,",
				"          OUTSIDE_PROCESSING_COST,",
				"          RESOURCE_COST,",
				"          OVERHEAD_COST,",
				"          ITEM_STATUS,",
				"          ITEM_STATUS_CODE,",
				"          PLANNING_GROUP,",
				"          PRIMARY_UNIT_OF_MEASURE,",
				"          report_date,",
				"          {Extended Cost},",
				"          Right_ITEM_NUM = Summarise2@ITEM_NUM,",
				"          {Assy Where Used Count}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameRightCols",
				"PAG0ClassCategoriesVsat select(mapColumn(",
				"          {Product Line} = PRODUCT_LINE,",
				"          {Project Number} = PROJECT_NUMBER,",
				"          Segment = SEGMENT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqCols3",
				"selectReqCols3 aggregate(groupBy(dummm = sha2(256,columns())),",
				"     each(match(true()), $$ = first($$))) ~> UniqueRows",
				"UniqueRows select(mapColumn(",
				"          {Product Line},",
				"          {Project Number},",
				"          Segment",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveSHA",
				"SelectReqCols2, Formulae1 join(SelectReqCols2@ORGANIZATION_CODE == Formulae1@ORGANIZATION_CODE",
				"     && {ITEM$SV$PART_NUMBER} == ITEM_NUM,",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftOuterjoin2",
				"leftOuterjoin2 select(mapColumn(",
				"          ITEM_STATUS = RenameRightCols@ITEM_STATUS,",
				"          MINIMUM_ORDER_QUANTITY,",
				"          {TOPASSM$SV$PART_NUMBER},",
				"          TOP_ASSEMBLY_ORG_CODE,",
				"          LEVEL_NUMBER,",
				"          COMP_PART_NUMBER,",
				"          COMPONENT_DESCRIPTION,",
				"          RE_ORDER_POINT_QUANTITY,",
				"          MAUC,",
				"          COMP_PLANNING_MAKE_BUY_CODE,",
				"          COMP_ITEM_TYPE,",
				"          ORGANIZATION_CODE = Formulae1@ORGANIZATION_CODE,",
				"          SUBINVENTORY_CODE,",
				"          LOCATOR,",
				"          ITEM_NUM,",
				"          ITEM_DESCRIPTION,",
				"          ONHAND_QTY,",
				"          ITEM_COST,",
				"          ITEM_TYPE,",
				"          MAKE_BUY_CODE,",
				"          SERIAL_CONTROL_CODE,",
				"          PROJECT_NUM,",
				"          PROJ_MGR,",
				"          TASK_NUM,",
				"          MATERIAL_COST,",
				"          MATERIAL_OVERHEAD_COST,",
				"          OUTSIDE_PROCESSING_COST,",
				"          RESOURCE_COST,",
				"          OVERHEAD_COST,",
				"          Right_ITEM_STATUS = RenameRightCols@ITEM_STATUS,",
				"          ITEM_STATUS_CODE,",
				"          PLANNING_GROUP,",
				"          PRIMARY_UNIT_OF_MEASURE,",
				"          report_date,",
				"          {Extended Cost},",
				"          Right_ITEM_NUM,",
				"          {Assy Where Used Count}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamingRightCols",
				"RenamingRightCols, RemoveSHA join(PROJECT_NUM == {Project Number},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftOuterjoin3",
				"DataClesasingNullsFinal select(mapColumn(",
				"          MINIMUM_ORDER_QUANTITY,",
				"          {TOPASSM$SV$PART_NUMBER},",
				"          LEVEL_NUMBER,",
				"          RE_ORDER_POINT_QUANTITY,",
				"          ORGANIZATION_CODE,",
				"          SUBINVENTORY_CODE,",
				"          LOCATOR,",
				"          ITEM_NUM,",
				"          ITEM_DESCRIPTION,",
				"          ONHAND_QTY,",
				"          ITEM_COST,",
				"          ITEM_TYPE,",
				"          MAKE_BUY_CODE,",
				"          SERIAL_CONTROL_CODE,",
				"          PROJECT_NUM,",
				"          PROJ_MGR,",
				"          TASK_NUM,",
				"          MATERIAL_COST,",
				"          MATERIAL_OVERHEAD_COST,",
				"          OUTSIDE_PROCESSING_COST,",
				"          RESOURCE_COST,",
				"          OVERHEAD_COST,",
				"          Right_ITEM_STATUS,",
				"          ITEM_STATUS_CODE,",
				"          PLANNING_GROUP,",
				"          PRIMARY_UNIT_OF_MEASURE,",
				"          report_date,",
				"          {Extended Cost},",
				"          Right_ITEM_NUM,",
				"          {Assy Where Used Count},",
				"          {Product Line},",
				"          {Project Number},",
				"          Segment",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FINALSELECT",
				"DataCleasingTrims derive(each(match(name=='ONHAND_QTY'||name=='ITEM_COST'), $$ = iif(isNull($$),'',toString($$)))) ~> DatacleasingNulls",
				"INVG0ItemsVsat select(mapColumn(",
				"          ORGANIZATION_CODE,",
				"          ITEM_STATUS = ITEM_STATUS_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReqCols2",
				"LeftOuterjoin3 derive(each(match(type=='double'), $$ = toDouble(trim(toString($$))))) ~> DatacleasingTrimsFinal",
				"DatacleasingTrimsFinal derive(each(match(type=='double'), $$ = iif(isNull($$),'',toString($$)))) ~> DataClesasingNullsFinal",
				"FINALSELECT cast(output(",
				"          MINIMUM_ORDER_QUANTITY as double,",
				"          LEVEL_NUMBER as double,",
				"          RE_ORDER_POINT_QUANTITY as double,",
				"          ONHAND_QTY as double,",
				"          MATERIAL_COST as double,",
				"          MATERIAL_OVERHEAD_COST as double,",
				"          OUTSIDE_PROCESSING_COST as double,",
				"          OVERHEAD_COST as double,",
				"          {Extended Cost} as double",
				"     ),",
				"     errors: false) ~> FinalCasting",
				"FinalCasting sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> TableauOutputSql"
			]
		}
	}
}